/*
 *  This file is part of the jasm project (http://code.google.com/p/jasm).
 *
 *  This file is licensed to you under the BSD License; You may not use
 *  this file except in compliance with the License. See the LICENSE.txt
 *  file distributed with this work for a copy of the License and information
 *  regarding copyright ownership.
 */
package jasm.amd64;

import jasm.LittleEndianAssembler;
import jasm.x86.ControlRegister;
import jasm.x86.DebugRegister;
import jasm.x86.FPStackRegister;
import jasm.x86.MMXRegister;
import jasm.x86.Scale;
import jasm.x86.SegmentRegister;

public abstract class AMD64RawAssembler extends LittleEndianAssembler {

    protected AMD64RawAssembler() {
        super();
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>imm8</i>
     */
    // Template#: 1, Serial#: 141
    public void adc_AL(byte imm8) {
        assemble0001((byte) 0x14, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 2, Serial#: 358
    public void adcb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0002((byte) 0x80, (byte) 0x02, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 3, Serial#: 646
    public void adcl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0002((byte) 0x83, (byte) 0x02, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 4, Serial#: 718
    public void adcq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0003((byte) 0x83, (byte) 0x02, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5, Serial#: 790
    public void adcw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0004((byte) 0x83, (byte) 0x02, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6, Serial#: 105
    public void adc(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0005((byte) 0x11, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 7, Serial#: 87
    public void adc(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0006((byte) 0x11, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 8, Serial#: 96
    public void adc(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0007((byte) 0x11, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 9, Serial#: 78
    public void adc(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0008((byte) 0x10, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 10, Serial#: 430
    public void adcl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0009((byte) 0x81, (byte) 0x02, disp8, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 11, Serial#: 502
    public void adcq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0010((byte) 0x81, (byte) 0x02, disp8, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 12, Serial#: 574
    public void adcw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0011((byte) 0x81, (byte) 0x02, disp8, base, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcb  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 13, Serial#: 357
    public void adcb(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0012((byte) 0x80, (byte) 0x02, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcl  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 14, Serial#: 645
    public void adcl(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0012((byte) 0x83, (byte) 0x02, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcq  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 15, Serial#: 717
    public void adcq(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0013((byte) 0x83, (byte) 0x02, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcw  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 16, Serial#: 789
    public void adcw(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0014((byte) 0x83, (byte) 0x02, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 17, Serial#: 104
    public void adc(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0015((byte) 0x11, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 18, Serial#: 86
    public void adc(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0016((byte) 0x11, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 19, Serial#: 95
    public void adc(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0017((byte) 0x11, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 20, Serial#: 77
    public void adc(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0018((byte) 0x10, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcl  }<i>disp8</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 21, Serial#: 429
    public void adcl(byte disp8, AMD64IndirectRegister64 destination, int imm32) {
        assemble0019((byte) 0x81, (byte) 0x02, disp8, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcq  }<i>disp8</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 22, Serial#: 501
    public void adcq(byte disp8, AMD64IndirectRegister64 destination, int imm32) {
        assemble0020((byte) 0x81, (byte) 0x02, disp8, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcw  }<i>disp8</i>, <i>destination</i>, <i>imm16</i>
     */
    // Template#: 23, Serial#: 573
    public void adcw(byte disp8, AMD64IndirectRegister64 destination, short imm16) {
        assemble0021((byte) 0x81, (byte) 0x02, disp8, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcb  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 24, Serial#: 330
    public void adcb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0022((byte) 0x80, (byte) 0x02, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcl  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 25, Serial#: 618
    public void adcl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0022((byte) 0x83, (byte) 0x02, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcq  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 26, Serial#: 690
    public void adcq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0023((byte) 0x83, (byte) 0x02, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcw  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 27, Serial#: 762
    public void adcw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0024((byte) 0x83, (byte) 0x02, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 28, Serial#: 101
    public void adc(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0025((byte) 0x11, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 29, Serial#: 83
    public void adc(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0026((byte) 0x11, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 30, Serial#: 92
    public void adc(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0027((byte) 0x11, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 31, Serial#: 74
    public void adc(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0028((byte) 0x10, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcl  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 32, Serial#: 402
    public void adcl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0029((byte) 0x81, (byte) 0x02, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcq  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 33, Serial#: 474
    public void adcq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0030((byte) 0x81, (byte) 0x02, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcw  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 34, Serial#: 546
    public void adcw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0031((byte) 0x81, (byte) 0x02, base, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 35, Serial#: 819
    public void adcw(AMD64GeneralRegister16 destination, byte imm8) {
        assemble0032((byte) 0x83, (byte) 0x02, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 36, Serial#: 138
    public void adc(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0033((byte) 0x13, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 37, Serial#: 137
    public void adc(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0034((byte) 0x13, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 38, Serial#: 134
    public void adc(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0035((byte) 0x13, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>source</i>
     */
    // Template#: 39, Serial#: 108
    public void adc(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0036((byte) 0x11, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>source</i>
     */
    // Template#: 40, Serial#: 133
    public void adc(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        assemble0037((byte) 0x13, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 41, Serial#: 136
    public void rip_adc(AMD64GeneralRegister16 destination, int rel32) {
        assemble0038((byte) 0x13, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 42, Serial#: 140
    public void adc(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0039((byte) 0x13, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 43, Serial#: 135
    public void m_adc(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0040((byte) 0x13, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 44, Serial#: 139
    public void adc(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0041((byte) 0x13, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcw  }<i>destination</i>, <i>imm16</i>
     */
    // Template#: 45, Serial#: 603
    public void adcw(AMD64GeneralRegister16 destination, short imm16) {
        assemble0042((byte) 0x81, (byte) 0x02, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcl  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 46, Serial#: 675
    public void adcl(AMD64GeneralRegister32 destination, byte imm8) {
        assemble0043((byte) 0x83, (byte) 0x02, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 47, Serial#: 122
    public void adc(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0044((byte) 0x13, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 48, Serial#: 121
    public void adc(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0045((byte) 0x13, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 49, Serial#: 118
    public void adc(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0046((byte) 0x13, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>source</i>
     */
    // Template#: 50, Serial#: 90
    public void adc(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0047((byte) 0x11, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>source</i>
     */
    // Template#: 51, Serial#: 117
    public void adc(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0048((byte) 0x13, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 52, Serial#: 120
    public void rip_adc(AMD64GeneralRegister32 destination, int rel32) {
        assemble0049((byte) 0x13, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcl  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 53, Serial#: 459
    public void adcl(AMD64GeneralRegister32 destination, int imm32) {
        assemble0050((byte) 0x81, (byte) 0x02, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 54, Serial#: 124
    public void adc(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0051((byte) 0x13, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 55, Serial#: 119
    public void m_adc(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0052((byte) 0x13, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 56, Serial#: 123
    public void adc(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0053((byte) 0x13, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 57, Serial#: 747
    public void adcq(AMD64GeneralRegister64 destination, byte imm8) {
        assemble0054((byte) 0x83, (byte) 0x02, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 58, Serial#: 130
    public void adc(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0055((byte) 0x13, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 59, Serial#: 129
    public void adc(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0056((byte) 0x13, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 60, Serial#: 126
    public void adc(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0057((byte) 0x13, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>source</i>
     */
    // Template#: 61, Serial#: 99
    public void adc(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0058((byte) 0x11, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>source</i>
     */
    // Template#: 62, Serial#: 125
    public void adc(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0059((byte) 0x13, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 63, Serial#: 128
    public void rip_adc(AMD64GeneralRegister64 destination, int rel32) {
        assemble0060((byte) 0x13, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcq  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 64, Serial#: 531
    public void adcq(AMD64GeneralRegister64 destination, int imm32) {
        assemble0061((byte) 0x81, (byte) 0x02, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 65, Serial#: 132
    public void adc(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0062((byte) 0x13, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 66, Serial#: 127
    public void m_adc(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0063((byte) 0x13, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 67, Serial#: 131
    public void adc(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0064((byte) 0x13, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcb  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 68, Serial#: 387
    public void adcb(AMD64GeneralRegister8 destination, byte imm8) {
        assemble0065((byte) 0x80, (byte) 0x02, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 69, Serial#: 114
    public void adc(AMD64GeneralRegister8 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0066((byte) 0x12, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 70, Serial#: 113
    public void adc(AMD64GeneralRegister8 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0067((byte) 0x12, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 71, Serial#: 110
    public void adc(AMD64GeneralRegister8 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0068((byte) 0x12, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>source</i>
     */
    // Template#: 72, Serial#: 81
    public void adc(AMD64GeneralRegister8 destination, AMD64GeneralRegister8 source) {
        assemble0069((byte) 0x10, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>source</i>
     */
    // Template#: 73, Serial#: 109
    public void adc(AMD64GeneralRegister8 destination, AMD64IndirectRegister64 source) {
        assemble0070((byte) 0x12, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 74, Serial#: 112
    public void rip_adc(AMD64GeneralRegister8 destination, int rel32) {
        assemble0071((byte) 0x12, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 75, Serial#: 116
    public void adc(AMD64GeneralRegister8 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0072((byte) 0x12, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 76, Serial#: 111
    public void m_adc(AMD64GeneralRegister8 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0073((byte) 0x12, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 77, Serial#: 115
    public void adc(AMD64GeneralRegister8 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0074((byte) 0x12, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcb  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 78, Serial#: 329
    public void adcb(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0075((byte) 0x80, (byte) 0x02, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcl  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 79, Serial#: 617
    public void adcl(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0075((byte) 0x83, (byte) 0x02, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 80, Serial#: 689
    public void adcq(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0076((byte) 0x83, (byte) 0x02, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 81, Serial#: 761
    public void adcw(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0077((byte) 0x83, (byte) 0x02, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>source</i>
     */
    // Template#: 82, Serial#: 100
    public void adc(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0078((byte) 0x11, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>source</i>
     */
    // Template#: 83, Serial#: 82
    public void adc(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0079((byte) 0x11, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>source</i>
     */
    // Template#: 84, Serial#: 91
    public void adc(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0080((byte) 0x11, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>source</i>
     */
    // Template#: 85, Serial#: 73
    public void adc(AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0081((byte) 0x10, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcl  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 86, Serial#: 401
    public void adcl(AMD64IndirectRegister64 destination, int imm32) {
        assemble0082((byte) 0x81, (byte) 0x02, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcq  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 87, Serial#: 473
    public void adcq(AMD64IndirectRegister64 destination, int imm32) {
        assemble0083((byte) 0x81, (byte) 0x02, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcw  }<i>destination</i>, <i>imm16</i>
     */
    // Template#: 88, Serial#: 545
    public void adcw(AMD64IndirectRegister64 destination, short imm16) {
        assemble0084((byte) 0x81, (byte) 0x02, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>imm32</i>
     */
    // Template#: 89, Serial#: 142
    public void adc_EAX(int imm32) {
        assemble0085((byte) 0x15, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>imm32</i>
     */
    // Template#: 90, Serial#: 143
    public void adc_RAX(int imm32) {
        assemble0086((byte) 0x15, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcb  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 91, Serial#: 332
    public void rip_adcb(int rel32, byte imm8) {
        assemble0087((byte) 0x80, (byte) 0x02, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcl  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 92, Serial#: 620
    public void rip_adcl(int rel32, byte imm8) {
        assemble0087((byte) 0x83, (byte) 0x02, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcq  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 93, Serial#: 692
    public void rip_adcq(int rel32, byte imm8) {
        assemble0088((byte) 0x83, (byte) 0x02, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcw  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 94, Serial#: 764
    public void rip_adcw(int rel32, byte imm8) {
        assemble0089((byte) 0x83, (byte) 0x02, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 95, Serial#: 374
    public void adcb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0090((byte) 0x80, (byte) 0x02, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 96, Serial#: 662
    public void adcl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0090((byte) 0x83, (byte) 0x02, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 97, Serial#: 734
    public void adcq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0091((byte) 0x83, (byte) 0x02, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 98, Serial#: 806
    public void adcw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0092((byte) 0x83, (byte) 0x02, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 99, Serial#: 107
    public void adc(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0093((byte) 0x11, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 100, Serial#: 89
    public void adc(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0094((byte) 0x11, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 101, Serial#: 98
    public void adc(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0095((byte) 0x11, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 102, Serial#: 80
    public void adc(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0096((byte) 0x10, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 103, Serial#: 446
    public void adcl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0097((byte) 0x81, (byte) 0x02, disp32, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 104, Serial#: 518
    public void adcq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0098((byte) 0x81, (byte) 0x02, disp32, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 105, Serial#: 590
    public void adcw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0099((byte) 0x81, (byte) 0x02, disp32, base, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 106, Serial#: 103
    public void rip_adc(int rel32, AMD64GeneralRegister16 source) {
        assemble0100((byte) 0x11, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 107, Serial#: 85
    public void rip_adc(int rel32, AMD64GeneralRegister32 source) {
        assemble0101((byte) 0x11, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 108, Serial#: 94
    public void rip_adc(int rel32, AMD64GeneralRegister64 source) {
        assemble0102((byte) 0x11, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 109, Serial#: 76
    public void rip_adc(int rel32, AMD64GeneralRegister8 source) {
        assemble0103((byte) 0x10, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcb  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 110, Serial#: 331
    public void m_adcb(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0104((byte) 0x80, (byte) 0x02, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcl  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 111, Serial#: 619
    public void m_adcl(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0104((byte) 0x83, (byte) 0x02, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcq  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 112, Serial#: 691
    public void m_adcq(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0105((byte) 0x83, (byte) 0x02, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcw  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 113, Serial#: 763
    public void m_adcw(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0106((byte) 0x83, (byte) 0x02, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 114, Serial#: 102
    public void m_adc(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0107((byte) 0x11, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 115, Serial#: 84
    public void m_adc(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0108((byte) 0x11, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 116, Serial#: 93
    public void m_adc(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0109((byte) 0x11, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 117, Serial#: 75
    public void m_adc(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0110((byte) 0x10, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcl  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 118, Serial#: 403
    public void m_adcl(int m32, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0111((byte) 0x81, (byte) 0x02, m32, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcq  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 119, Serial#: 475
    public void m_adcq(int m32, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0112((byte) 0x81, (byte) 0x02, m32, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcw  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 120, Serial#: 547
    public void m_adcw(int m32, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0113((byte) 0x81, (byte) 0x02, m32, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcb  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 121, Serial#: 373
    public void adcb(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0114((byte) 0x80, (byte) 0x02, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcl  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 122, Serial#: 661
    public void adcl(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0114((byte) 0x83, (byte) 0x02, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcq  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 123, Serial#: 733
    public void adcq(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0115((byte) 0x83, (byte) 0x02, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcw  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 124, Serial#: 805
    public void adcw(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0116((byte) 0x83, (byte) 0x02, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 125, Serial#: 106
    public void adc(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0117((byte) 0x11, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 126, Serial#: 88
    public void adc(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0118((byte) 0x11, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 127, Serial#: 97
    public void adc(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0119((byte) 0x11, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 128, Serial#: 79
    public void adc(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0120((byte) 0x10, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcl  }<i>disp32</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 129, Serial#: 445
    public void adcl(int disp32, AMD64IndirectRegister64 destination, int imm32) {
        assemble0121((byte) 0x81, (byte) 0x02, disp32, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcq  }<i>disp32</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 130, Serial#: 517
    public void adcq(int disp32, AMD64IndirectRegister64 destination, int imm32) {
        assemble0122((byte) 0x81, (byte) 0x02, disp32, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcw  }<i>disp32</i>, <i>destination</i>, <i>imm16</i>
     */
    // Template#: 131, Serial#: 589
    public void adcw(int disp32, AMD64IndirectRegister64 destination, short imm16) {
        assemble0123((byte) 0x81, (byte) 0x02, disp32, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcl  }<i>rel32</i>, <i>imm32</i>
     */
    // Template#: 132, Serial#: 404
    public void rip_adcl(int rel32, int imm32) {
        assemble0124((byte) 0x81, (byte) 0x02, rel32, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcq  }<i>rel32</i>, <i>imm32</i>
     */
    // Template#: 133, Serial#: 476
    public void rip_adcq(int rel32, int imm32) {
        assemble0125((byte) 0x81, (byte) 0x02, rel32, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcw  }<i>rel32</i>, <i>imm16</i>
     */
    // Template#: 134, Serial#: 548
    public void rip_adcw(int rel32, short imm16) {
        assemble0126((byte) 0x81, (byte) 0x02, rel32, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>imm16</i>
     */
    // Template#: 135, Serial#: 144
    public void adc_AX(short imm16) {
        assemble0127((byte) 0x15, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>imm8</i>
     */
    // Template#: 136, Serial#: 69
    public void add_AL(byte imm8) {
        assemble0001((byte) 0x04, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code addb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 137, Serial#: 354
    public void addb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0002((byte) 0x80, (byte) 0x00, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code addl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 138, Serial#: 642
    public void addl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0002((byte) 0x83, (byte) 0x00, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code addq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 139, Serial#: 714
    public void addq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0003((byte) 0x83, (byte) 0x00, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code addw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 140, Serial#: 786
    public void addw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0004((byte) 0x83, (byte) 0x00, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 141, Serial#: 33
    public void add(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0005((byte) 0x01, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 142, Serial#: 15
    public void add(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0006((byte) 0x01, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 143, Serial#: 24
    public void add(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0007((byte) 0x01, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 144, Serial#: 6
    public void add(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0008((byte) 0x00, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code addl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 145, Serial#: 426
    public void addl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0009((byte) 0x81, (byte) 0x00, disp8, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code addq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 146, Serial#: 498
    public void addq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0010((byte) 0x81, (byte) 0x00, disp8, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code addw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 147, Serial#: 570
    public void addw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0011((byte) 0x81, (byte) 0x00, disp8, base, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code addb  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 148, Serial#: 353
    public void addb(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0012((byte) 0x80, (byte) 0x00, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code addl  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 149, Serial#: 641
    public void addl(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0012((byte) 0x83, (byte) 0x00, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code addq  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 150, Serial#: 713
    public void addq(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0013((byte) 0x83, (byte) 0x00, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code addw  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 151, Serial#: 785
    public void addw(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0014((byte) 0x83, (byte) 0x00, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 152, Serial#: 32
    public void add(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0015((byte) 0x01, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 153, Serial#: 14
    public void add(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0016((byte) 0x01, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 154, Serial#: 23
    public void add(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0017((byte) 0x01, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 155, Serial#: 5
    public void add(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0018((byte) 0x00, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code addl  }<i>disp8</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 156, Serial#: 425
    public void addl(byte disp8, AMD64IndirectRegister64 destination, int imm32) {
        assemble0019((byte) 0x81, (byte) 0x00, disp8, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code addq  }<i>disp8</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 157, Serial#: 497
    public void addq(byte disp8, AMD64IndirectRegister64 destination, int imm32) {
        assemble0020((byte) 0x81, (byte) 0x00, disp8, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code addw  }<i>disp8</i>, <i>destination</i>, <i>imm16</i>
     */
    // Template#: 158, Serial#: 569
    public void addw(byte disp8, AMD64IndirectRegister64 destination, short imm16) {
        assemble0021((byte) 0x81, (byte) 0x00, disp8, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code addb  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 159, Serial#: 322
    public void addb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0022((byte) 0x80, (byte) 0x00, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code addl  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 160, Serial#: 610
    public void addl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0022((byte) 0x83, (byte) 0x00, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code addq  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 161, Serial#: 682
    public void addq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0023((byte) 0x83, (byte) 0x00, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code addw  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 162, Serial#: 754
    public void addw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0024((byte) 0x83, (byte) 0x00, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 163, Serial#: 29
    public void add(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0025((byte) 0x01, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 164, Serial#: 11
    public void add(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0026((byte) 0x01, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 165, Serial#: 20
    public void add(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0027((byte) 0x01, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 166, Serial#: 2
    public void add(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0028((byte) 0x00, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code addl  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 167, Serial#: 394
    public void addl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0029((byte) 0x81, (byte) 0x00, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code addq  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 168, Serial#: 466
    public void addq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0030((byte) 0x81, (byte) 0x00, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code addw  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 169, Serial#: 538
    public void addw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0031((byte) 0x81, (byte) 0x00, base, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code addw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 170, Serial#: 817
    public void addw(AMD64GeneralRegister16 destination, byte imm8) {
        assemble0032((byte) 0x83, (byte) 0x00, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 171, Serial#: 66
    public void add(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0033((byte) 0x03, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 172, Serial#: 65
    public void add(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0034((byte) 0x03, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 173, Serial#: 62
    public void add(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0035((byte) 0x03, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>source</i>
     */
    // Template#: 174, Serial#: 36
    public void add(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0036((byte) 0x01, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>source</i>
     */
    // Template#: 175, Serial#: 61
    public void add(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        assemble0037((byte) 0x03, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 176, Serial#: 64
    public void rip_add(AMD64GeneralRegister16 destination, int rel32) {
        assemble0038((byte) 0x03, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 177, Serial#: 68
    public void add(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0039((byte) 0x03, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 178, Serial#: 63
    public void m_add(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0040((byte) 0x03, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 179, Serial#: 67
    public void add(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0041((byte) 0x03, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code addw  }<i>destination</i>, <i>imm16</i>
     */
    // Template#: 180, Serial#: 601
    public void addw(AMD64GeneralRegister16 destination, short imm16) {
        assemble0042((byte) 0x81, (byte) 0x00, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code addl  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 181, Serial#: 673
    public void addl(AMD64GeneralRegister32 destination, byte imm8) {
        assemble0043((byte) 0x83, (byte) 0x00, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 182, Serial#: 50
    public void add(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0044((byte) 0x03, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 183, Serial#: 49
    public void add(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0045((byte) 0x03, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 184, Serial#: 46
    public void add(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0046((byte) 0x03, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>source</i>
     */
    // Template#: 185, Serial#: 18
    public void add(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0047((byte) 0x01, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>source</i>
     */
    // Template#: 186, Serial#: 45
    public void add(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0048((byte) 0x03, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 187, Serial#: 48
    public void rip_add(AMD64GeneralRegister32 destination, int rel32) {
        assemble0049((byte) 0x03, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code addl  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 188, Serial#: 457
    public void addl(AMD64GeneralRegister32 destination, int imm32) {
        assemble0050((byte) 0x81, (byte) 0x00, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 189, Serial#: 52
    public void add(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0051((byte) 0x03, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 190, Serial#: 47
    public void m_add(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0052((byte) 0x03, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 191, Serial#: 51
    public void add(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0053((byte) 0x03, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code addq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 192, Serial#: 745
    public void addq(AMD64GeneralRegister64 destination, byte imm8) {
        assemble0054((byte) 0x83, (byte) 0x00, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 193, Serial#: 58
    public void add(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0055((byte) 0x03, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 194, Serial#: 57
    public void add(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0056((byte) 0x03, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 195, Serial#: 54
    public void add(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0057((byte) 0x03, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>source</i>
     */
    // Template#: 196, Serial#: 27
    public void add(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0058((byte) 0x01, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>source</i>
     */
    // Template#: 197, Serial#: 53
    public void add(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0059((byte) 0x03, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 198, Serial#: 56
    public void rip_add(AMD64GeneralRegister64 destination, int rel32) {
        assemble0060((byte) 0x03, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code addq  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 199, Serial#: 529
    public void addq(AMD64GeneralRegister64 destination, int imm32) {
        assemble0061((byte) 0x81, (byte) 0x00, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 200, Serial#: 60
    public void add(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0062((byte) 0x03, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 201, Serial#: 55
    public void m_add(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0063((byte) 0x03, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 202, Serial#: 59
    public void add(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0064((byte) 0x03, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code addb  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 203, Serial#: 385
    public void addb(AMD64GeneralRegister8 destination, byte imm8) {
        assemble0065((byte) 0x80, (byte) 0x00, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 204, Serial#: 42
    public void add(AMD64GeneralRegister8 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0066((byte) 0x02, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 205, Serial#: 41
    public void add(AMD64GeneralRegister8 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0067((byte) 0x02, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 206, Serial#: 38
    public void add(AMD64GeneralRegister8 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0068((byte) 0x02, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>source</i>
     */
    // Template#: 207, Serial#: 9
    public void add(AMD64GeneralRegister8 destination, AMD64GeneralRegister8 source) {
        assemble0069((byte) 0x00, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>source</i>
     */
    // Template#: 208, Serial#: 37
    public void add(AMD64GeneralRegister8 destination, AMD64IndirectRegister64 source) {
        assemble0070((byte) 0x02, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 209, Serial#: 40
    public void rip_add(AMD64GeneralRegister8 destination, int rel32) {
        assemble0071((byte) 0x02, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 210, Serial#: 44
    public void add(AMD64GeneralRegister8 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0072((byte) 0x02, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 211, Serial#: 39
    public void m_add(AMD64GeneralRegister8 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0073((byte) 0x02, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 212, Serial#: 43
    public void add(AMD64GeneralRegister8 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0074((byte) 0x02, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code addb  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 213, Serial#: 321
    public void addb(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0075((byte) 0x80, (byte) 0x00, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code addl  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 214, Serial#: 609
    public void addl(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0075((byte) 0x83, (byte) 0x00, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code addq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 215, Serial#: 681
    public void addq(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0076((byte) 0x83, (byte) 0x00, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code addw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 216, Serial#: 753
    public void addw(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0077((byte) 0x83, (byte) 0x00, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>source</i>
     */
    // Template#: 217, Serial#: 28
    public void add(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0078((byte) 0x01, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>source</i>
     */
    // Template#: 218, Serial#: 10
    public void add(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0079((byte) 0x01, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>source</i>
     */
    // Template#: 219, Serial#: 19
    public void add(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0080((byte) 0x01, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>source</i>
     */
    // Template#: 220, Serial#: 1
    public void add(AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0081((byte) 0x00, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code addl  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 221, Serial#: 393
    public void addl(AMD64IndirectRegister64 destination, int imm32) {
        assemble0082((byte) 0x81, (byte) 0x00, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code addq  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 222, Serial#: 465
    public void addq(AMD64IndirectRegister64 destination, int imm32) {
        assemble0083((byte) 0x81, (byte) 0x00, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code addw  }<i>destination</i>, <i>imm16</i>
     */
    // Template#: 223, Serial#: 537
    public void addw(AMD64IndirectRegister64 destination, short imm16) {
        assemble0084((byte) 0x81, (byte) 0x00, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>imm32</i>
     */
    // Template#: 224, Serial#: 70
    public void add_EAX(int imm32) {
        assemble0085((byte) 0x05, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>imm32</i>
     */
    // Template#: 225, Serial#: 71
    public void add_RAX(int imm32) {
        assemble0086((byte) 0x05, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code addb  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 226, Serial#: 324
    public void rip_addb(int rel32, byte imm8) {
        assemble0087((byte) 0x80, (byte) 0x00, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code addl  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 227, Serial#: 612
    public void rip_addl(int rel32, byte imm8) {
        assemble0087((byte) 0x83, (byte) 0x00, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code addq  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 228, Serial#: 684
    public void rip_addq(int rel32, byte imm8) {
        assemble0088((byte) 0x83, (byte) 0x00, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code addw  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 229, Serial#: 756
    public void rip_addw(int rel32, byte imm8) {
        assemble0089((byte) 0x83, (byte) 0x00, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code addb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 230, Serial#: 370
    public void addb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0090((byte) 0x80, (byte) 0x00, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code addl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 231, Serial#: 658
    public void addl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0090((byte) 0x83, (byte) 0x00, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code addq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 232, Serial#: 730
    public void addq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0091((byte) 0x83, (byte) 0x00, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code addw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 233, Serial#: 802
    public void addw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0092((byte) 0x83, (byte) 0x00, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 234, Serial#: 35
    public void add(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0093((byte) 0x01, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 235, Serial#: 17
    public void add(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0094((byte) 0x01, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 236, Serial#: 26
    public void add(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0095((byte) 0x01, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 237, Serial#: 8
    public void add(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0096((byte) 0x00, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code addl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 238, Serial#: 442
    public void addl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0097((byte) 0x81, (byte) 0x00, disp32, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code addq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 239, Serial#: 514
    public void addq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0098((byte) 0x81, (byte) 0x00, disp32, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code addw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 240, Serial#: 586
    public void addw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0099((byte) 0x81, (byte) 0x00, disp32, base, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 241, Serial#: 31
    public void rip_add(int rel32, AMD64GeneralRegister16 source) {
        assemble0100((byte) 0x01, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 242, Serial#: 13
    public void rip_add(int rel32, AMD64GeneralRegister32 source) {
        assemble0101((byte) 0x01, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 243, Serial#: 22
    public void rip_add(int rel32, AMD64GeneralRegister64 source) {
        assemble0102((byte) 0x01, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 244, Serial#: 4
    public void rip_add(int rel32, AMD64GeneralRegister8 source) {
        assemble0103((byte) 0x00, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code addb  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 245, Serial#: 323
    public void m_addb(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0104((byte) 0x80, (byte) 0x00, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code addl  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 246, Serial#: 611
    public void m_addl(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0104((byte) 0x83, (byte) 0x00, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code addq  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 247, Serial#: 683
    public void m_addq(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0105((byte) 0x83, (byte) 0x00, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code addw  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 248, Serial#: 755
    public void m_addw(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0106((byte) 0x83, (byte) 0x00, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 249, Serial#: 30
    public void m_add(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0107((byte) 0x01, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 250, Serial#: 12
    public void m_add(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0108((byte) 0x01, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 251, Serial#: 21
    public void m_add(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0109((byte) 0x01, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 252, Serial#: 3
    public void m_add(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0110((byte) 0x00, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code addl  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 253, Serial#: 395
    public void m_addl(int m32, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0111((byte) 0x81, (byte) 0x00, m32, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code addq  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 254, Serial#: 467
    public void m_addq(int m32, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0112((byte) 0x81, (byte) 0x00, m32, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code addw  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 255, Serial#: 539
    public void m_addw(int m32, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0113((byte) 0x81, (byte) 0x00, m32, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code addb  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 256, Serial#: 369
    public void addb(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0114((byte) 0x80, (byte) 0x00, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code addl  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 257, Serial#: 657
    public void addl(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0114((byte) 0x83, (byte) 0x00, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code addq  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 258, Serial#: 729
    public void addq(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0115((byte) 0x83, (byte) 0x00, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code addw  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 259, Serial#: 801
    public void addw(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0116((byte) 0x83, (byte) 0x00, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 260, Serial#: 34
    public void add(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0117((byte) 0x01, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 261, Serial#: 16
    public void add(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0118((byte) 0x01, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 262, Serial#: 25
    public void add(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0119((byte) 0x01, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 263, Serial#: 7
    public void add(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0120((byte) 0x00, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code addl  }<i>disp32</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 264, Serial#: 441
    public void addl(int disp32, AMD64IndirectRegister64 destination, int imm32) {
        assemble0121((byte) 0x81, (byte) 0x00, disp32, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code addq  }<i>disp32</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 265, Serial#: 513
    public void addq(int disp32, AMD64IndirectRegister64 destination, int imm32) {
        assemble0122((byte) 0x81, (byte) 0x00, disp32, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code addw  }<i>disp32</i>, <i>destination</i>, <i>imm16</i>
     */
    // Template#: 266, Serial#: 585
    public void addw(int disp32, AMD64IndirectRegister64 destination, short imm16) {
        assemble0123((byte) 0x81, (byte) 0x00, disp32, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code addl  }<i>rel32</i>, <i>imm32</i>
     */
    // Template#: 267, Serial#: 396
    public void rip_addl(int rel32, int imm32) {
        assemble0124((byte) 0x81, (byte) 0x00, rel32, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code addq  }<i>rel32</i>, <i>imm32</i>
     */
    // Template#: 268, Serial#: 468
    public void rip_addq(int rel32, int imm32) {
        assemble0125((byte) 0x81, (byte) 0x00, rel32, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code addw  }<i>rel32</i>, <i>imm16</i>
     */
    // Template#: 269, Serial#: 540
    public void rip_addw(int rel32, short imm16) {
        assemble0126((byte) 0x81, (byte) 0x00, rel32, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>imm16</i>
     */
    // Template#: 270, Serial#: 72
    public void add_AX(short imm16) {
        assemble0127((byte) 0x05, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code addpd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 271, Serial#: 5439
    public void addpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x58, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code addpd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 272, Serial#: 5438
    public void addpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x58, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code addpd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 273, Serial#: 5435
    public void addpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x58, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code addpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 274, Serial#: 5434
    public void addpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x58, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code addpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 275, Serial#: 5442
    public void addpd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x58, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code addpd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 276, Serial#: 5437
    public void rip_addpd(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x58, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code addpd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 277, Serial#: 5441
    public void addpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x58, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code addpd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 278, Serial#: 5436
    public void m_addpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x58, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code addpd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 279, Serial#: 5440
    public void addpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x58, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code addps  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 280, Serial#: 5367
    public void addps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0137((byte) 0x58, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code addps  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 281, Serial#: 5366
    public void addps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0138((byte) 0x58, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code addps  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 282, Serial#: 5363
    public void addps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0139((byte) 0x58, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code addps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 283, Serial#: 5362
    public void addps(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0140((byte) 0x58, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code addps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 284, Serial#: 5370
    public void addps(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0141((byte) 0x58, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code addps  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 285, Serial#: 5365
    public void rip_addps(AMD64XMMRegister destination, int rel32) {
        assemble0142((byte) 0x58, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code addps  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 286, Serial#: 5369
    public void addps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0143((byte) 0x58, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code addps  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 287, Serial#: 5364
    public void m_addps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0144((byte) 0x58, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code addps  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 288, Serial#: 5368
    public void addps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0145((byte) 0x58, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code address_size  }
     */
    // Template#: 289, Serial#: 312
    public void address_size() {
        assemble0146((byte) 0x67);
    }

    /**
     * Pseudo-external assembler syntax: {@code addsd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 290, Serial#: 5511
    public void addsd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0147((byte) 0x58, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code addsd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 291, Serial#: 5510
    public void addsd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0148((byte) 0x58, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code addsd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 292, Serial#: 5507
    public void addsd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0149((byte) 0x58, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code addsd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 293, Serial#: 5506
    public void addsd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0150((byte) 0x58, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code addsd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 294, Serial#: 5514
    public void addsd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0151((byte) 0x58, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code addsd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 295, Serial#: 5509
    public void rip_addsd(AMD64XMMRegister destination, int rel32) {
        assemble0152((byte) 0x58, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code addsd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 296, Serial#: 5513
    public void addsd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0153((byte) 0x58, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code addsd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 297, Serial#: 5508
    public void m_addsd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0154((byte) 0x58, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code addsd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 298, Serial#: 5512
    public void addsd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0155((byte) 0x58, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code addss  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 299, Serial#: 5574
    public void addss(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0156((byte) 0x58, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code addss  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 300, Serial#: 5573
    public void addss(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0157((byte) 0x58, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code addss  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 301, Serial#: 5570
    public void addss(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0158((byte) 0x58, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code addss  }<i>destination</i>, <i>source</i>
     */
    // Template#: 302, Serial#: 5569
    public void addss(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0159((byte) 0x58, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code addss  }<i>destination</i>, <i>source</i>
     */
    // Template#: 303, Serial#: 5577
    public void addss(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0160((byte) 0x58, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code addss  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 304, Serial#: 5572
    public void rip_addss(AMD64XMMRegister destination, int rel32) {
        assemble0161((byte) 0x58, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code addss  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 305, Serial#: 5576
    public void addss(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0162((byte) 0x58, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code addss  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 306, Serial#: 5571
    public void m_addss(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0163((byte) 0x58, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code addss  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 307, Serial#: 5575
    public void addss(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0164((byte) 0x58, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code addsubpd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 308, Serial#: 4516
    public void addsubpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xD0, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code addsubpd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 309, Serial#: 4515
    public void addsubpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xD0, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code addsubpd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 310, Serial#: 4512
    public void addsubpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xD0, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code addsubpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 311, Serial#: 4511
    public void addsubpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xD0, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code addsubpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 312, Serial#: 4519
    public void addsubpd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xD0, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code addsubpd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 313, Serial#: 4514
    public void rip_addsubpd(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xD0, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code addsubpd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 314, Serial#: 4518
    public void addsubpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xD0, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code addsubpd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 315, Serial#: 4513
    public void m_addsubpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xD0, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code addsubpd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 316, Serial#: 4517
    public void addsubpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xD0, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>imm8</i>
     */
    // Template#: 317, Serial#: 213
    public void and_AL(byte imm8) {
        assemble0001((byte) 0x24, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code andb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 318, Serial#: 362
    public void andb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0002((byte) 0x80, (byte) 0x04, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code andl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 319, Serial#: 650
    public void andl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0002((byte) 0x83, (byte) 0x04, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code andq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 320, Serial#: 722
    public void andq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0003((byte) 0x83, (byte) 0x04, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code andw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 321, Serial#: 794
    public void andw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0004((byte) 0x83, (byte) 0x04, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 322, Serial#: 177
    public void and(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0005((byte) 0x21, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 323, Serial#: 159
    public void and(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0006((byte) 0x21, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 324, Serial#: 168
    public void and(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0007((byte) 0x21, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 325, Serial#: 150
    public void and(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0008((byte) 0x20, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code andl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 326, Serial#: 434
    public void andl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0009((byte) 0x81, (byte) 0x04, disp8, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code andq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 327, Serial#: 506
    public void andq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0010((byte) 0x81, (byte) 0x04, disp8, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code andw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 328, Serial#: 578
    public void andw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0011((byte) 0x81, (byte) 0x04, disp8, base, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code andb  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 329, Serial#: 361
    public void andb(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0012((byte) 0x80, (byte) 0x04, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code andl  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 330, Serial#: 649
    public void andl(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0012((byte) 0x83, (byte) 0x04, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code andq  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 331, Serial#: 721
    public void andq(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0013((byte) 0x83, (byte) 0x04, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code andw  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 332, Serial#: 793
    public void andw(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0014((byte) 0x83, (byte) 0x04, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 333, Serial#: 176
    public void and(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0015((byte) 0x21, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 334, Serial#: 158
    public void and(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0016((byte) 0x21, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 335, Serial#: 167
    public void and(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0017((byte) 0x21, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 336, Serial#: 149
    public void and(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0018((byte) 0x20, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code andl  }<i>disp8</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 337, Serial#: 433
    public void andl(byte disp8, AMD64IndirectRegister64 destination, int imm32) {
        assemble0019((byte) 0x81, (byte) 0x04, disp8, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code andq  }<i>disp8</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 338, Serial#: 505
    public void andq(byte disp8, AMD64IndirectRegister64 destination, int imm32) {
        assemble0020((byte) 0x81, (byte) 0x04, disp8, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code andw  }<i>disp8</i>, <i>destination</i>, <i>imm16</i>
     */
    // Template#: 339, Serial#: 577
    public void andw(byte disp8, AMD64IndirectRegister64 destination, short imm16) {
        assemble0021((byte) 0x81, (byte) 0x04, disp8, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code andb  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 340, Serial#: 338
    public void andb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0022((byte) 0x80, (byte) 0x04, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code andl  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 341, Serial#: 626
    public void andl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0022((byte) 0x83, (byte) 0x04, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code andq  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 342, Serial#: 698
    public void andq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0023((byte) 0x83, (byte) 0x04, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code andw  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 343, Serial#: 770
    public void andw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0024((byte) 0x83, (byte) 0x04, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 344, Serial#: 173
    public void and(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0025((byte) 0x21, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 345, Serial#: 155
    public void and(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0026((byte) 0x21, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 346, Serial#: 164
    public void and(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0027((byte) 0x21, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 347, Serial#: 146
    public void and(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0028((byte) 0x20, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code andl  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 348, Serial#: 410
    public void andl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0029((byte) 0x81, (byte) 0x04, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code andq  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 349, Serial#: 482
    public void andq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0030((byte) 0x81, (byte) 0x04, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code andw  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 350, Serial#: 554
    public void andw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0031((byte) 0x81, (byte) 0x04, base, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code andw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 351, Serial#: 821
    public void andw(AMD64GeneralRegister16 destination, byte imm8) {
        assemble0032((byte) 0x83, (byte) 0x04, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 352, Serial#: 210
    public void and(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0033((byte) 0x23, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 353, Serial#: 209
    public void and(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0034((byte) 0x23, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 354, Serial#: 206
    public void and(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0035((byte) 0x23, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>source</i>
     */
    // Template#: 355, Serial#: 180
    public void and(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0036((byte) 0x21, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>source</i>
     */
    // Template#: 356, Serial#: 205
    public void and(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        assemble0037((byte) 0x23, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 357, Serial#: 208
    public void rip_and(AMD64GeneralRegister16 destination, int rel32) {
        assemble0038((byte) 0x23, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 358, Serial#: 212
    public void and(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0039((byte) 0x23, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 359, Serial#: 207
    public void m_and(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0040((byte) 0x23, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 360, Serial#: 211
    public void and(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0041((byte) 0x23, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code andw  }<i>destination</i>, <i>imm16</i>
     */
    // Template#: 361, Serial#: 605
    public void andw(AMD64GeneralRegister16 destination, short imm16) {
        assemble0042((byte) 0x81, (byte) 0x04, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code andl  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 362, Serial#: 677
    public void andl(AMD64GeneralRegister32 destination, byte imm8) {
        assemble0043((byte) 0x83, (byte) 0x04, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 363, Serial#: 194
    public void and(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0044((byte) 0x23, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 364, Serial#: 193
    public void and(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0045((byte) 0x23, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 365, Serial#: 190
    public void and(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0046((byte) 0x23, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>source</i>
     */
    // Template#: 366, Serial#: 162
    public void and(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0047((byte) 0x21, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>source</i>
     */
    // Template#: 367, Serial#: 189
    public void and(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0048((byte) 0x23, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 368, Serial#: 192
    public void rip_and(AMD64GeneralRegister32 destination, int rel32) {
        assemble0049((byte) 0x23, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code andl  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 369, Serial#: 461
    public void andl(AMD64GeneralRegister32 destination, int imm32) {
        assemble0050((byte) 0x81, (byte) 0x04, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 370, Serial#: 196
    public void and(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0051((byte) 0x23, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 371, Serial#: 191
    public void m_and(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0052((byte) 0x23, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 372, Serial#: 195
    public void and(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0053((byte) 0x23, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code andq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 373, Serial#: 749
    public void andq(AMD64GeneralRegister64 destination, byte imm8) {
        assemble0054((byte) 0x83, (byte) 0x04, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 374, Serial#: 202
    public void and(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0055((byte) 0x23, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 375, Serial#: 201
    public void and(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0056((byte) 0x23, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 376, Serial#: 198
    public void and(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0057((byte) 0x23, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>source</i>
     */
    // Template#: 377, Serial#: 171
    public void and(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0058((byte) 0x21, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>source</i>
     */
    // Template#: 378, Serial#: 197
    public void and(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0059((byte) 0x23, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 379, Serial#: 200
    public void rip_and(AMD64GeneralRegister64 destination, int rel32) {
        assemble0060((byte) 0x23, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code andq  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 380, Serial#: 533
    public void andq(AMD64GeneralRegister64 destination, int imm32) {
        assemble0061((byte) 0x81, (byte) 0x04, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 381, Serial#: 204
    public void and(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0062((byte) 0x23, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 382, Serial#: 199
    public void m_and(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0063((byte) 0x23, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 383, Serial#: 203
    public void and(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0064((byte) 0x23, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code andb  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 384, Serial#: 389
    public void andb(AMD64GeneralRegister8 destination, byte imm8) {
        assemble0065((byte) 0x80, (byte) 0x04, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 385, Serial#: 186
    public void and(AMD64GeneralRegister8 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0066((byte) 0x22, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 386, Serial#: 185
    public void and(AMD64GeneralRegister8 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0067((byte) 0x22, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 387, Serial#: 182
    public void and(AMD64GeneralRegister8 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0068((byte) 0x22, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>source</i>
     */
    // Template#: 388, Serial#: 153
    public void and(AMD64GeneralRegister8 destination, AMD64GeneralRegister8 source) {
        assemble0069((byte) 0x20, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>source</i>
     */
    // Template#: 389, Serial#: 181
    public void and(AMD64GeneralRegister8 destination, AMD64IndirectRegister64 source) {
        assemble0070((byte) 0x22, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 390, Serial#: 184
    public void rip_and(AMD64GeneralRegister8 destination, int rel32) {
        assemble0071((byte) 0x22, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 391, Serial#: 188
    public void and(AMD64GeneralRegister8 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0072((byte) 0x22, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 392, Serial#: 183
    public void m_and(AMD64GeneralRegister8 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0073((byte) 0x22, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 393, Serial#: 187
    public void and(AMD64GeneralRegister8 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0074((byte) 0x22, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code andb  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 394, Serial#: 337
    public void andb(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0075((byte) 0x80, (byte) 0x04, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code andl  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 395, Serial#: 625
    public void andl(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0075((byte) 0x83, (byte) 0x04, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code andq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 396, Serial#: 697
    public void andq(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0076((byte) 0x83, (byte) 0x04, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code andw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 397, Serial#: 769
    public void andw(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0077((byte) 0x83, (byte) 0x04, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>source</i>
     */
    // Template#: 398, Serial#: 172
    public void and(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0078((byte) 0x21, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>source</i>
     */
    // Template#: 399, Serial#: 154
    public void and(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0079((byte) 0x21, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>source</i>
     */
    // Template#: 400, Serial#: 163
    public void and(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0080((byte) 0x21, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>source</i>
     */
    // Template#: 401, Serial#: 145
    public void and(AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0081((byte) 0x20, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code andl  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 402, Serial#: 409
    public void andl(AMD64IndirectRegister64 destination, int imm32) {
        assemble0082((byte) 0x81, (byte) 0x04, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code andq  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 403, Serial#: 481
    public void andq(AMD64IndirectRegister64 destination, int imm32) {
        assemble0083((byte) 0x81, (byte) 0x04, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code andw  }<i>destination</i>, <i>imm16</i>
     */
    // Template#: 404, Serial#: 553
    public void andw(AMD64IndirectRegister64 destination, short imm16) {
        assemble0084((byte) 0x81, (byte) 0x04, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>imm32</i>
     */
    // Template#: 405, Serial#: 214
    public void and_EAX(int imm32) {
        assemble0085((byte) 0x25, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>imm32</i>
     */
    // Template#: 406, Serial#: 215
    public void and_RAX(int imm32) {
        assemble0086((byte) 0x25, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code andb  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 407, Serial#: 340
    public void rip_andb(int rel32, byte imm8) {
        assemble0087((byte) 0x80, (byte) 0x04, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code andl  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 408, Serial#: 628
    public void rip_andl(int rel32, byte imm8) {
        assemble0087((byte) 0x83, (byte) 0x04, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code andq  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 409, Serial#: 700
    public void rip_andq(int rel32, byte imm8) {
        assemble0088((byte) 0x83, (byte) 0x04, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code andw  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 410, Serial#: 772
    public void rip_andw(int rel32, byte imm8) {
        assemble0089((byte) 0x83, (byte) 0x04, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code andb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 411, Serial#: 378
    public void andb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0090((byte) 0x80, (byte) 0x04, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code andl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 412, Serial#: 666
    public void andl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0090((byte) 0x83, (byte) 0x04, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code andq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 413, Serial#: 738
    public void andq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0091((byte) 0x83, (byte) 0x04, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code andw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 414, Serial#: 810
    public void andw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0092((byte) 0x83, (byte) 0x04, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 415, Serial#: 179
    public void and(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0093((byte) 0x21, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 416, Serial#: 161
    public void and(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0094((byte) 0x21, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 417, Serial#: 170
    public void and(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0095((byte) 0x21, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 418, Serial#: 152
    public void and(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0096((byte) 0x20, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code andl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 419, Serial#: 450
    public void andl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0097((byte) 0x81, (byte) 0x04, disp32, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code andq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 420, Serial#: 522
    public void andq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0098((byte) 0x81, (byte) 0x04, disp32, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code andw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 421, Serial#: 594
    public void andw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0099((byte) 0x81, (byte) 0x04, disp32, base, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 422, Serial#: 175
    public void rip_and(int rel32, AMD64GeneralRegister16 source) {
        assemble0100((byte) 0x21, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 423, Serial#: 157
    public void rip_and(int rel32, AMD64GeneralRegister32 source) {
        assemble0101((byte) 0x21, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 424, Serial#: 166
    public void rip_and(int rel32, AMD64GeneralRegister64 source) {
        assemble0102((byte) 0x21, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 425, Serial#: 148
    public void rip_and(int rel32, AMD64GeneralRegister8 source) {
        assemble0103((byte) 0x20, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code andb  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 426, Serial#: 339
    public void m_andb(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0104((byte) 0x80, (byte) 0x04, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code andl  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 427, Serial#: 627
    public void m_andl(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0104((byte) 0x83, (byte) 0x04, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code andq  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 428, Serial#: 699
    public void m_andq(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0105((byte) 0x83, (byte) 0x04, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code andw  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 429, Serial#: 771
    public void m_andw(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0106((byte) 0x83, (byte) 0x04, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 430, Serial#: 174
    public void m_and(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0107((byte) 0x21, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 431, Serial#: 156
    public void m_and(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0108((byte) 0x21, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 432, Serial#: 165
    public void m_and(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0109((byte) 0x21, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 433, Serial#: 147
    public void m_and(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0110((byte) 0x20, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code andl  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 434, Serial#: 411
    public void m_andl(int m32, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0111((byte) 0x81, (byte) 0x04, m32, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code andq  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 435, Serial#: 483
    public void m_andq(int m32, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0112((byte) 0x81, (byte) 0x04, m32, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code andw  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 436, Serial#: 555
    public void m_andw(int m32, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0113((byte) 0x81, (byte) 0x04, m32, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code andb  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 437, Serial#: 377
    public void andb(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0114((byte) 0x80, (byte) 0x04, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code andl  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 438, Serial#: 665
    public void andl(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0114((byte) 0x83, (byte) 0x04, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code andq  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 439, Serial#: 737
    public void andq(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0115((byte) 0x83, (byte) 0x04, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code andw  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 440, Serial#: 809
    public void andw(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0116((byte) 0x83, (byte) 0x04, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 441, Serial#: 178
    public void and(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0117((byte) 0x21, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 442, Serial#: 160
    public void and(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0118((byte) 0x21, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 443, Serial#: 169
    public void and(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0119((byte) 0x21, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 444, Serial#: 151
    public void and(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0120((byte) 0x20, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code andl  }<i>disp32</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 445, Serial#: 449
    public void andl(int disp32, AMD64IndirectRegister64 destination, int imm32) {
        assemble0121((byte) 0x81, (byte) 0x04, disp32, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code andq  }<i>disp32</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 446, Serial#: 521
    public void andq(int disp32, AMD64IndirectRegister64 destination, int imm32) {
        assemble0122((byte) 0x81, (byte) 0x04, disp32, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code andw  }<i>disp32</i>, <i>destination</i>, <i>imm16</i>
     */
    // Template#: 447, Serial#: 593
    public void andw(int disp32, AMD64IndirectRegister64 destination, short imm16) {
        assemble0123((byte) 0x81, (byte) 0x04, disp32, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code andl  }<i>rel32</i>, <i>imm32</i>
     */
    // Template#: 448, Serial#: 412
    public void rip_andl(int rel32, int imm32) {
        assemble0124((byte) 0x81, (byte) 0x04, rel32, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code andq  }<i>rel32</i>, <i>imm32</i>
     */
    // Template#: 449, Serial#: 484
    public void rip_andq(int rel32, int imm32) {
        assemble0125((byte) 0x81, (byte) 0x04, rel32, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code andw  }<i>rel32</i>, <i>imm16</i>
     */
    // Template#: 450, Serial#: 556
    public void rip_andw(int rel32, short imm16) {
        assemble0126((byte) 0x81, (byte) 0x04, rel32, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>imm16</i>
     */
    // Template#: 451, Serial#: 216
    public void and_AX(short imm16) {
        assemble0127((byte) 0x25, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code andnpd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 452, Serial#: 3748
    public void andnpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x55, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code andnpd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 453, Serial#: 3747
    public void andnpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x55, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code andnpd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 454, Serial#: 3744
    public void andnpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x55, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code andnpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 455, Serial#: 3743
    public void andnpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x55, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code andnpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 456, Serial#: 3751
    public void andnpd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x55, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code andnpd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 457, Serial#: 3746
    public void rip_andnpd(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x55, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code andnpd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 458, Serial#: 3750
    public void andnpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x55, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code andnpd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 459, Serial#: 3745
    public void m_andnpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x55, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code andnpd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 460, Serial#: 3749
    public void andnpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x55, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code andnps  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 461, Serial#: 3702
    public void andnps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0137((byte) 0x55, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code andnps  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 462, Serial#: 3701
    public void andnps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0138((byte) 0x55, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code andnps  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 463, Serial#: 3698
    public void andnps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0139((byte) 0x55, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code andnps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 464, Serial#: 3697
    public void andnps(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0140((byte) 0x55, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code andnps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 465, Serial#: 3705
    public void andnps(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0141((byte) 0x55, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code andnps  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 466, Serial#: 3700
    public void rip_andnps(AMD64XMMRegister destination, int rel32) {
        assemble0142((byte) 0x55, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code andnps  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 467, Serial#: 3704
    public void andnps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0143((byte) 0x55, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code andnps  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 468, Serial#: 3699
    public void m_andnps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0144((byte) 0x55, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code andnps  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 469, Serial#: 3703
    public void andnps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0145((byte) 0x55, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code andpd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 470, Serial#: 3739
    public void andpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x54, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code andpd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 471, Serial#: 3738
    public void andpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x54, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code andpd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 472, Serial#: 3735
    public void andpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x54, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code andpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 473, Serial#: 3734
    public void andpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x54, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code andpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 474, Serial#: 3742
    public void andpd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x54, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code andpd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 475, Serial#: 3737
    public void rip_andpd(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x54, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code andpd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 476, Serial#: 3741
    public void andpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x54, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code andpd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 477, Serial#: 3736
    public void m_andpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x54, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code andpd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 478, Serial#: 3740
    public void andpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x54, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code andps  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 479, Serial#: 3693
    public void andps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0137((byte) 0x54, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code andps  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 480, Serial#: 3692
    public void andps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0138((byte) 0x54, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code andps  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 481, Serial#: 3689
    public void andps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0139((byte) 0x54, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code andps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 482, Serial#: 3688
    public void andps(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0140((byte) 0x54, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code andps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 483, Serial#: 3696
    public void andps(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0141((byte) 0x54, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code andps  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 484, Serial#: 3691
    public void rip_andps(AMD64XMMRegister destination, int rel32) {
        assemble0142((byte) 0x54, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code andps  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 485, Serial#: 3695
    public void andps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0143((byte) 0x54, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code andps  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 486, Serial#: 3690
    public void m_andps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0144((byte) 0x54, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code andps  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 487, Serial#: 3694
    public void andps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0145((byte) 0x54, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsf  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 488, Serial#: 6226
    public void bsf(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0165((byte) 0xBC, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsf  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 489, Serial#: 6225
    public void bsf(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0166((byte) 0xBC, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsf  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 490, Serial#: 6222
    public void bsf(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0167((byte) 0xBC, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsf  }<i>destination</i>, <i>source</i>
     */
    // Template#: 491, Serial#: 6229
    public void bsf(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0168((byte) 0xBC, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsf  }<i>destination</i>, <i>source</i>
     */
    // Template#: 492, Serial#: 6221
    public void bsf(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        assemble0169((byte) 0xBC, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsf  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 493, Serial#: 6224
    public void rip_bsf(AMD64GeneralRegister16 destination, int rel32) {
        assemble0170((byte) 0xBC, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsf  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 494, Serial#: 6228
    public void bsf(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0171((byte) 0xBC, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsf  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 495, Serial#: 6223
    public void m_bsf(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0172((byte) 0xBC, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsf  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 496, Serial#: 6227
    public void bsf(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0173((byte) 0xBC, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsf  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 497, Serial#: 6208
    public void bsf(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0174((byte) 0xBC, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsf  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 498, Serial#: 6207
    public void bsf(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0175((byte) 0xBC, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsf  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 499, Serial#: 6204
    public void bsf(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0176((byte) 0xBC, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsf  }<i>destination</i>, <i>source</i>
     */
    // Template#: 500, Serial#: 6211
    public void bsf(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0177((byte) 0xBC, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsf  }<i>destination</i>, <i>source</i>
     */
    // Template#: 501, Serial#: 6203
    public void bsf(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0178((byte) 0xBC, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsf  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 502, Serial#: 6206
    public void rip_bsf(AMD64GeneralRegister32 destination, int rel32) {
        assemble0179((byte) 0xBC, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsf  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 503, Serial#: 6210
    public void bsf(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0180((byte) 0xBC, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsf  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 504, Serial#: 6205
    public void m_bsf(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0181((byte) 0xBC, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsf  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 505, Serial#: 6209
    public void bsf(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0182((byte) 0xBC, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsf  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 506, Serial#: 6217
    public void bsf(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0183((byte) 0xBC, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsf  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 507, Serial#: 6216
    public void bsf(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0184((byte) 0xBC, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsf  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 508, Serial#: 6213
    public void bsf(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0185((byte) 0xBC, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsf  }<i>destination</i>, <i>source</i>
     */
    // Template#: 509, Serial#: 6220
    public void bsf(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0186((byte) 0xBC, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsf  }<i>destination</i>, <i>source</i>
     */
    // Template#: 510, Serial#: 6212
    public void bsf(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0187((byte) 0xBC, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsf  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 511, Serial#: 6215
    public void rip_bsf(AMD64GeneralRegister64 destination, int rel32) {
        assemble0188((byte) 0xBC, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsf  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 512, Serial#: 6219
    public void bsf(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0189((byte) 0xBC, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsf  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 513, Serial#: 6214
    public void m_bsf(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0190((byte) 0xBC, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsf  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 514, Serial#: 6218
    public void bsf(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0191((byte) 0xBC, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsr  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 515, Serial#: 6253
    public void bsr(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0165((byte) 0xBD, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsr  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 516, Serial#: 6252
    public void bsr(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0166((byte) 0xBD, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsr  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 517, Serial#: 6249
    public void bsr(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0167((byte) 0xBD, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsr  }<i>destination</i>, <i>source</i>
     */
    // Template#: 518, Serial#: 6256
    public void bsr(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0168((byte) 0xBD, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsr  }<i>destination</i>, <i>source</i>
     */
    // Template#: 519, Serial#: 6248
    public void bsr(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        assemble0169((byte) 0xBD, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsr  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 520, Serial#: 6251
    public void rip_bsr(AMD64GeneralRegister16 destination, int rel32) {
        assemble0170((byte) 0xBD, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsr  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 521, Serial#: 6255
    public void bsr(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0171((byte) 0xBD, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsr  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 522, Serial#: 6250
    public void m_bsr(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0172((byte) 0xBD, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsr  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 523, Serial#: 6254
    public void bsr(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0173((byte) 0xBD, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsr  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 524, Serial#: 6235
    public void bsr(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0174((byte) 0xBD, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsr  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 525, Serial#: 6234
    public void bsr(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0175((byte) 0xBD, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsr  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 526, Serial#: 6231
    public void bsr(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0176((byte) 0xBD, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsr  }<i>destination</i>, <i>source</i>
     */
    // Template#: 527, Serial#: 6238
    public void bsr(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0177((byte) 0xBD, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsr  }<i>destination</i>, <i>source</i>
     */
    // Template#: 528, Serial#: 6230
    public void bsr(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0178((byte) 0xBD, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsr  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 529, Serial#: 6233
    public void rip_bsr(AMD64GeneralRegister32 destination, int rel32) {
        assemble0179((byte) 0xBD, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsr  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 530, Serial#: 6237
    public void bsr(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0180((byte) 0xBD, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsr  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 531, Serial#: 6232
    public void m_bsr(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0181((byte) 0xBD, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsr  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 532, Serial#: 6236
    public void bsr(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0182((byte) 0xBD, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsr  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 533, Serial#: 6244
    public void bsr(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0183((byte) 0xBD, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsr  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 534, Serial#: 6243
    public void bsr(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0184((byte) 0xBD, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsr  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 535, Serial#: 6240
    public void bsr(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0185((byte) 0xBD, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsr  }<i>destination</i>, <i>source</i>
     */
    // Template#: 536, Serial#: 6247
    public void bsr(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0186((byte) 0xBD, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsr  }<i>destination</i>, <i>source</i>
     */
    // Template#: 537, Serial#: 6239
    public void bsr(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0187((byte) 0xBD, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsr  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 538, Serial#: 6242
    public void rip_bsr(AMD64GeneralRegister64 destination, int rel32) {
        assemble0188((byte) 0xBD, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsr  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 539, Serial#: 6246
    public void bsr(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0189((byte) 0xBD, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsr  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 540, Serial#: 6241
    public void m_bsr(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0190((byte) 0xBD, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsr  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 541, Serial#: 6245
    public void bsr(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0191((byte) 0xBD, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bswap  }<i>register</i>
     */
    // Template#: 542, Serial#: 6302
    public void bswap(AMD64GeneralRegister32 register) {
        assemble0192((byte) 0xC8, register);
    }

    /**
     * Pseudo-external assembler syntax: {@code bswap  }<i>register</i>
     */
    // Template#: 543, Serial#: 6303
    public void bswap(AMD64GeneralRegister64 register) {
        assemble0193((byte) 0xC8, register);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 544, Serial#: 6149
    public void bt(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0194((byte) 0xBA, (byte) 0x04, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 545, Serial#: 4165
    public void bt(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0195((byte) 0xA3, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 546, Serial#: 4147
    public void bt(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0196((byte) 0xA3, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 547, Serial#: 4156
    public void bt(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0197((byte) 0xA3, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 548, Serial#: 6148
    public void bt(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0198((byte) 0xBA, (byte) 0x04, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 549, Serial#: 4164
    public void bt(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0199((byte) 0xA3, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 550, Serial#: 4146
    public void bt(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0200((byte) 0xA3, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 551, Serial#: 4155
    public void bt(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0201((byte) 0xA3, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 552, Serial#: 6133
    public void bt(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0202((byte) 0xBA, (byte) 0x04, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 553, Serial#: 4161
    public void bt(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0203((byte) 0xA3, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 554, Serial#: 4143
    public void bt(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0204((byte) 0xA3, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 555, Serial#: 4152
    public void bt(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0205((byte) 0xA3, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 556, Serial#: 6172
    public void bt(AMD64GeneralRegister16 destination, byte imm8) {
        assemble0206((byte) 0xBA, (byte) 0x04, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>destination</i>, <i>source</i>
     */
    // Template#: 557, Serial#: 4168
    public void bt(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0207((byte) 0xA3, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 558, Serial#: 6164
    public void bt(AMD64GeneralRegister32 destination, byte imm8) {
        assemble0208((byte) 0xBA, (byte) 0x04, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>destination</i>, <i>source</i>
     */
    // Template#: 559, Serial#: 4150
    public void bt(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0209((byte) 0xA3, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 560, Serial#: 6168
    public void bt(AMD64GeneralRegister64 destination, byte imm8) {
        assemble0210((byte) 0xBA, (byte) 0x04, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>destination</i>, <i>source</i>
     */
    // Template#: 561, Serial#: 4159
    public void bt(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0211((byte) 0xA3, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 562, Serial#: 6132
    public void bt(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0212((byte) 0xBA, (byte) 0x04, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>destination</i>, <i>source</i>
     */
    // Template#: 563, Serial#: 4160
    public void bt(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0213((byte) 0xA3, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>destination</i>, <i>source</i>
     */
    // Template#: 564, Serial#: 4142
    public void bt(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0214((byte) 0xA3, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>destination</i>, <i>source</i>
     */
    // Template#: 565, Serial#: 4151
    public void bt(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0215((byte) 0xA3, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 566, Serial#: 6135
    public void rip_bt(int rel32, byte imm8) {
        assemble0216((byte) 0xBA, (byte) 0x04, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 567, Serial#: 6157
    public void bt(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0217((byte) 0xBA, (byte) 0x04, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 568, Serial#: 4167
    public void bt(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0218((byte) 0xA3, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 569, Serial#: 4149
    public void bt(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0219((byte) 0xA3, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 570, Serial#: 4158
    public void bt(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0220((byte) 0xA3, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 571, Serial#: 4163
    public void rip_bt(int rel32, AMD64GeneralRegister16 source) {
        assemble0221((byte) 0xA3, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 572, Serial#: 4145
    public void rip_bt(int rel32, AMD64GeneralRegister32 source) {
        assemble0222((byte) 0xA3, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 573, Serial#: 4154
    public void rip_bt(int rel32, AMD64GeneralRegister64 source) {
        assemble0223((byte) 0xA3, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 574, Serial#: 6134
    public void m_bt(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0224((byte) 0xBA, (byte) 0x04, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 575, Serial#: 4162
    public void m_bt(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0225((byte) 0xA3, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 576, Serial#: 4144
    public void m_bt(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0226((byte) 0xA3, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 577, Serial#: 4153
    public void m_bt(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0227((byte) 0xA3, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 578, Serial#: 6156
    public void bt(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0228((byte) 0xBA, (byte) 0x04, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 579, Serial#: 4166
    public void bt(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0229((byte) 0xA3, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 580, Serial#: 4148
    public void bt(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0230((byte) 0xA3, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 581, Serial#: 4157
    public void bt(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0231((byte) 0xA3, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 582, Serial#: 6155
    public void btc(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0194((byte) 0xBA, (byte) 0x07, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 583, Serial#: 6199
    public void btc(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0195((byte) 0xBB, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 584, Serial#: 6181
    public void btc(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0196((byte) 0xBB, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 585, Serial#: 6190
    public void btc(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0197((byte) 0xBB, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 586, Serial#: 6154
    public void btc(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0198((byte) 0xBA, (byte) 0x07, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 587, Serial#: 6198
    public void btc(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0199((byte) 0xBB, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 588, Serial#: 6180
    public void btc(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0200((byte) 0xBB, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 589, Serial#: 6189
    public void btc(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0201((byte) 0xBB, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 590, Serial#: 6145
    public void btc(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0202((byte) 0xBA, (byte) 0x07, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 591, Serial#: 6195
    public void btc(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0203((byte) 0xBB, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 592, Serial#: 6177
    public void btc(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0204((byte) 0xBB, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 593, Serial#: 6186
    public void btc(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0205((byte) 0xBB, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 594, Serial#: 6175
    public void btc(AMD64GeneralRegister16 destination, byte imm8) {
        assemble0206((byte) 0xBA, (byte) 0x07, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>destination</i>, <i>source</i>
     */
    // Template#: 595, Serial#: 6202
    public void btc(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0207((byte) 0xBB, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 596, Serial#: 6167
    public void btc(AMD64GeneralRegister32 destination, byte imm8) {
        assemble0208((byte) 0xBA, (byte) 0x07, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>destination</i>, <i>source</i>
     */
    // Template#: 597, Serial#: 6184
    public void btc(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0209((byte) 0xBB, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 598, Serial#: 6171
    public void btc(AMD64GeneralRegister64 destination, byte imm8) {
        assemble0210((byte) 0xBA, (byte) 0x07, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>destination</i>, <i>source</i>
     */
    // Template#: 599, Serial#: 6193
    public void btc(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0211((byte) 0xBB, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 600, Serial#: 6144
    public void btc(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0212((byte) 0xBA, (byte) 0x07, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>destination</i>, <i>source</i>
     */
    // Template#: 601, Serial#: 6194
    public void btc(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0213((byte) 0xBB, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>destination</i>, <i>source</i>
     */
    // Template#: 602, Serial#: 6176
    public void btc(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0214((byte) 0xBB, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>destination</i>, <i>source</i>
     */
    // Template#: 603, Serial#: 6185
    public void btc(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0215((byte) 0xBB, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 604, Serial#: 6147
    public void rip_btc(int rel32, byte imm8) {
        assemble0216((byte) 0xBA, (byte) 0x07, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 605, Serial#: 6163
    public void btc(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0217((byte) 0xBA, (byte) 0x07, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 606, Serial#: 6201
    public void btc(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0218((byte) 0xBB, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 607, Serial#: 6183
    public void btc(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0219((byte) 0xBB, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 608, Serial#: 6192
    public void btc(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0220((byte) 0xBB, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 609, Serial#: 6197
    public void rip_btc(int rel32, AMD64GeneralRegister16 source) {
        assemble0221((byte) 0xBB, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 610, Serial#: 6179
    public void rip_btc(int rel32, AMD64GeneralRegister32 source) {
        assemble0222((byte) 0xBB, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 611, Serial#: 6188
    public void rip_btc(int rel32, AMD64GeneralRegister64 source) {
        assemble0223((byte) 0xBB, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 612, Serial#: 6146
    public void m_btc(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0224((byte) 0xBA, (byte) 0x07, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 613, Serial#: 6196
    public void m_btc(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0225((byte) 0xBB, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 614, Serial#: 6178
    public void m_btc(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0226((byte) 0xBB, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 615, Serial#: 6187
    public void m_btc(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0227((byte) 0xBB, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 616, Serial#: 6162
    public void btc(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0228((byte) 0xBA, (byte) 0x07, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 617, Serial#: 6200
    public void btc(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0229((byte) 0xBB, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 618, Serial#: 6182
    public void btc(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0230((byte) 0xBB, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 619, Serial#: 6191
    public void btc(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0231((byte) 0xBB, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 620, Serial#: 6153
    public void btr(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0194((byte) 0xBA, (byte) 0x06, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 621, Serial#: 4282
    public void btr(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0195((byte) 0xB3, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 622, Serial#: 4264
    public void btr(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0196((byte) 0xB3, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 623, Serial#: 4273
    public void btr(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0197((byte) 0xB3, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 624, Serial#: 6152
    public void btr(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0198((byte) 0xBA, (byte) 0x06, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 625, Serial#: 4281
    public void btr(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0199((byte) 0xB3, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 626, Serial#: 4263
    public void btr(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0200((byte) 0xB3, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 627, Serial#: 4272
    public void btr(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0201((byte) 0xB3, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 628, Serial#: 6141
    public void btr(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0202((byte) 0xBA, (byte) 0x06, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 629, Serial#: 4278
    public void btr(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0203((byte) 0xB3, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 630, Serial#: 4260
    public void btr(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0204((byte) 0xB3, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 631, Serial#: 4269
    public void btr(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0205((byte) 0xB3, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 632, Serial#: 6174
    public void btr(AMD64GeneralRegister16 destination, byte imm8) {
        assemble0206((byte) 0xBA, (byte) 0x06, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>destination</i>, <i>source</i>
     */
    // Template#: 633, Serial#: 4285
    public void btr(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0207((byte) 0xB3, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 634, Serial#: 6166
    public void btr(AMD64GeneralRegister32 destination, byte imm8) {
        assemble0208((byte) 0xBA, (byte) 0x06, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>destination</i>, <i>source</i>
     */
    // Template#: 635, Serial#: 4267
    public void btr(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0209((byte) 0xB3, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 636, Serial#: 6170
    public void btr(AMD64GeneralRegister64 destination, byte imm8) {
        assemble0210((byte) 0xBA, (byte) 0x06, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>destination</i>, <i>source</i>
     */
    // Template#: 637, Serial#: 4276
    public void btr(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0211((byte) 0xB3, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 638, Serial#: 6140
    public void btr(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0212((byte) 0xBA, (byte) 0x06, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>destination</i>, <i>source</i>
     */
    // Template#: 639, Serial#: 4277
    public void btr(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0213((byte) 0xB3, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>destination</i>, <i>source</i>
     */
    // Template#: 640, Serial#: 4259
    public void btr(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0214((byte) 0xB3, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>destination</i>, <i>source</i>
     */
    // Template#: 641, Serial#: 4268
    public void btr(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0215((byte) 0xB3, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 642, Serial#: 6143
    public void rip_btr(int rel32, byte imm8) {
        assemble0216((byte) 0xBA, (byte) 0x06, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 643, Serial#: 6161
    public void btr(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0217((byte) 0xBA, (byte) 0x06, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 644, Serial#: 4284
    public void btr(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0218((byte) 0xB3, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 645, Serial#: 4266
    public void btr(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0219((byte) 0xB3, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 646, Serial#: 4275
    public void btr(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0220((byte) 0xB3, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 647, Serial#: 4280
    public void rip_btr(int rel32, AMD64GeneralRegister16 source) {
        assemble0221((byte) 0xB3, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 648, Serial#: 4262
    public void rip_btr(int rel32, AMD64GeneralRegister32 source) {
        assemble0222((byte) 0xB3, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 649, Serial#: 4271
    public void rip_btr(int rel32, AMD64GeneralRegister64 source) {
        assemble0223((byte) 0xB3, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 650, Serial#: 6142
    public void m_btr(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0224((byte) 0xBA, (byte) 0x06, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 651, Serial#: 4279
    public void m_btr(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0225((byte) 0xB3, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 652, Serial#: 4261
    public void m_btr(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0226((byte) 0xB3, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 653, Serial#: 4270
    public void m_btr(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0227((byte) 0xB3, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 654, Serial#: 6160
    public void btr(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0228((byte) 0xBA, (byte) 0x06, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 655, Serial#: 4283
    public void btr(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0229((byte) 0xB3, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 656, Serial#: 4265
    public void btr(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0230((byte) 0xB3, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 657, Serial#: 4274
    public void btr(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0231((byte) 0xB3, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 658, Serial#: 6151
    public void bts(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0194((byte) 0xBA, (byte) 0x05, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 659, Serial#: 6004
    public void bts(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0195((byte) 0xAB, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 660, Serial#: 5986
    public void bts(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0196((byte) 0xAB, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 661, Serial#: 5995
    public void bts(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0197((byte) 0xAB, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 662, Serial#: 6150
    public void bts(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0198((byte) 0xBA, (byte) 0x05, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 663, Serial#: 6003
    public void bts(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0199((byte) 0xAB, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 664, Serial#: 5985
    public void bts(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0200((byte) 0xAB, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 665, Serial#: 5994
    public void bts(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0201((byte) 0xAB, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 666, Serial#: 6137
    public void bts(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0202((byte) 0xBA, (byte) 0x05, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 667, Serial#: 6000
    public void bts(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0203((byte) 0xAB, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 668, Serial#: 5982
    public void bts(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0204((byte) 0xAB, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 669, Serial#: 5991
    public void bts(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0205((byte) 0xAB, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 670, Serial#: 6173
    public void bts(AMD64GeneralRegister16 destination, byte imm8) {
        assemble0206((byte) 0xBA, (byte) 0x05, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>destination</i>, <i>source</i>
     */
    // Template#: 671, Serial#: 6007
    public void bts(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0207((byte) 0xAB, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 672, Serial#: 6165
    public void bts(AMD64GeneralRegister32 destination, byte imm8) {
        assemble0208((byte) 0xBA, (byte) 0x05, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>destination</i>, <i>source</i>
     */
    // Template#: 673, Serial#: 5989
    public void bts(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0209((byte) 0xAB, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 674, Serial#: 6169
    public void bts(AMD64GeneralRegister64 destination, byte imm8) {
        assemble0210((byte) 0xBA, (byte) 0x05, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>destination</i>, <i>source</i>
     */
    // Template#: 675, Serial#: 5998
    public void bts(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0211((byte) 0xAB, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 676, Serial#: 6136
    public void bts(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0212((byte) 0xBA, (byte) 0x05, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>destination</i>, <i>source</i>
     */
    // Template#: 677, Serial#: 5999
    public void bts(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0213((byte) 0xAB, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>destination</i>, <i>source</i>
     */
    // Template#: 678, Serial#: 5981
    public void bts(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0214((byte) 0xAB, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>destination</i>, <i>source</i>
     */
    // Template#: 679, Serial#: 5990
    public void bts(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0215((byte) 0xAB, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 680, Serial#: 6139
    public void rip_bts(int rel32, byte imm8) {
        assemble0216((byte) 0xBA, (byte) 0x05, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 681, Serial#: 6159
    public void bts(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0217((byte) 0xBA, (byte) 0x05, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 682, Serial#: 6006
    public void bts(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0218((byte) 0xAB, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 683, Serial#: 5988
    public void bts(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0219((byte) 0xAB, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 684, Serial#: 5997
    public void bts(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0220((byte) 0xAB, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 685, Serial#: 6002
    public void rip_bts(int rel32, AMD64GeneralRegister16 source) {
        assemble0221((byte) 0xAB, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 686, Serial#: 5984
    public void rip_bts(int rel32, AMD64GeneralRegister32 source) {
        assemble0222((byte) 0xAB, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 687, Serial#: 5993
    public void rip_bts(int rel32, AMD64GeneralRegister64 source) {
        assemble0223((byte) 0xAB, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 688, Serial#: 6138
    public void m_bts(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0224((byte) 0xBA, (byte) 0x05, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 689, Serial#: 6001
    public void m_bts(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0225((byte) 0xAB, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 690, Serial#: 5983
    public void m_bts(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0226((byte) 0xAB, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 691, Serial#: 5992
    public void m_bts(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0227((byte) 0xAB, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 692, Serial#: 6158
    public void bts(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0228((byte) 0xBA, (byte) 0x05, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 693, Serial#: 6005
    public void bts(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0229((byte) 0xAB, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 694, Serial#: 5987
    public void bts(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0230((byte) 0xAB, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 695, Serial#: 5996
    public void bts(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0231((byte) 0xAB, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code call  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 696, Serial#: 3059
    public void call(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xFF, (byte) 0x02, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code call  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 697, Serial#: 3058
    public void call(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xFF, (byte) 0x02, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code call  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 698, Serial#: 3047
    public void call(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xFF, (byte) 0x02, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code call  }<i>destination</i>
     */
    // Template#: 699, Serial#: 3072
    public void call(AMD64GeneralRegister16 destination) {
        assemble0235((byte) 0xFF, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code call  }<i>destination</i>
     */
    // Template#: 700, Serial#: 3070
    public void call(AMD64GeneralRegister64 destination) {
        assemble0236((byte) 0xFF, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code call  }<i>destination</i>
     */
    // Template#: 701, Serial#: 3046
    public void call(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xFF, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code call  }<i>rel32</i>
     */
    // Template#: 702, Serial#: 2957
    public void call(int rel32) {
        assemble0238((byte) 0xE8, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code call  }<i>rel32</i>
     */
    // Template#: 703, Serial#: 3049
    public void rip_call(int rel32) {
        assemble0239((byte) 0xFF, (byte) 0x02, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code call  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 704, Serial#: 3065
    public void call(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xFF, (byte) 0x02, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code call  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 705, Serial#: 3048
    public void m_call(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xFF, (byte) 0x02, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code call  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 706, Serial#: 3064
    public void call(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xFF, (byte) 0x02, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code cdq  }
     */
    // Template#: 707, Serial#: 2466
    public void cdq() {
        assemble0146((byte) 0x99);
    }

    /**
     * Pseudo-external assembler syntax: {@code cdqe  }
     */
    // Template#: 708, Serial#: 2465
    public void cdqe() {
        assemble0243((byte) 0x98);
    }

    /**
     * Pseudo-external assembler syntax: {@code clc  }
     */
    // Template#: 709, Serial#: 2968
    public void clc() {
        assemble0146((byte) 0xF8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cld  }
     */
    // Template#: 710, Serial#: 2972
    public void cld() {
        assemble0146((byte) 0xFC);
    }

    /**
     * Pseudo-external assembler syntax: {@code clflush  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 711, Serial#: 6091
    public void clflush(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0244((byte) 0xAE, (byte) 0x07, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code clflush  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 712, Serial#: 6090
    public void clflush(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0245((byte) 0xAE, (byte) 0x07, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code clflush  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 713, Serial#: 6079
    public void clflush(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0246((byte) 0xAE, (byte) 0x07, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code clflush  }<i>destination</i>
     */
    // Template#: 714, Serial#: 6078
    public void clflush(AMD64IndirectRegister64 destination) {
        assemble0247((byte) 0xAE, (byte) 0x07, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code clflush  }<i>rel32</i>
     */
    // Template#: 715, Serial#: 6081
    public void rip_clflush(int rel32) {
        assemble0248((byte) 0xAE, (byte) 0x07, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code clflush  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 716, Serial#: 6101
    public void clflush(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0249((byte) 0xAE, (byte) 0x07, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code clflush  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 717, Serial#: 6080
    public void m_clflush(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0250((byte) 0xAE, (byte) 0x07, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code clflush  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 718, Serial#: 6100
    public void clflush(int disp32, AMD64IndirectRegister64 destination) {
        assemble0251((byte) 0xAE, (byte) 0x07, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code cli  }
     */
    // Template#: 719, Serial#: 2970
    public void cli() {
        assemble0146((byte) 0xFA);
    }

    /**
     * Pseudo-external assembler syntax: {@code clts  }
     */
    // Template#: 720, Serial#: 3248
    public void clts() {
        assemble0252((byte) 0x06);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmc  }
     */
    // Template#: 721, Serial#: 1730
    public void cmc() {
        assemble0146((byte) 0xF5);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmova  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 722, Serial#: 3656
    public void cmova(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0165((byte) 0x47, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmova  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 723, Serial#: 3655
    public void cmova(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0166((byte) 0x47, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmova  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 724, Serial#: 3652
    public void cmova(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0167((byte) 0x47, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmova  }<i>destination</i>, <i>source</i>
     */
    // Template#: 725, Serial#: 3659
    public void cmova(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0168((byte) 0x47, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmova  }<i>destination</i>, <i>source</i>
     */
    // Template#: 726, Serial#: 3651
    public void cmova(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        assemble0169((byte) 0x47, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmova  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 727, Serial#: 3654
    public void rip_cmova(AMD64GeneralRegister16 destination, int rel32) {
        assemble0170((byte) 0x47, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmova  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 728, Serial#: 3658
    public void cmova(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0171((byte) 0x47, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmova  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 729, Serial#: 3653
    public void m_cmova(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0172((byte) 0x47, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmova  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 730, Serial#: 3657
    public void cmova(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0173((byte) 0x47, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmova  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 731, Serial#: 3638
    public void cmova(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0174((byte) 0x47, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmova  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 732, Serial#: 3637
    public void cmova(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0175((byte) 0x47, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmova  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 733, Serial#: 3634
    public void cmova(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0176((byte) 0x47, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmova  }<i>destination</i>, <i>source</i>
     */
    // Template#: 734, Serial#: 3641
    public void cmova(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0177((byte) 0x47, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmova  }<i>destination</i>, <i>source</i>
     */
    // Template#: 735, Serial#: 3633
    public void cmova(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0178((byte) 0x47, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmova  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 736, Serial#: 3636
    public void rip_cmova(AMD64GeneralRegister32 destination, int rel32) {
        assemble0179((byte) 0x47, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmova  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 737, Serial#: 3640
    public void cmova(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0180((byte) 0x47, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmova  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 738, Serial#: 3635
    public void m_cmova(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0181((byte) 0x47, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmova  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 739, Serial#: 3639
    public void cmova(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0182((byte) 0x47, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmova  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 740, Serial#: 3647
    public void cmova(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0183((byte) 0x47, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmova  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 741, Serial#: 3646
    public void cmova(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0184((byte) 0x47, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmova  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 742, Serial#: 3643
    public void cmova(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0185((byte) 0x47, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmova  }<i>destination</i>, <i>source</i>
     */
    // Template#: 743, Serial#: 3650
    public void cmova(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0186((byte) 0x47, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmova  }<i>destination</i>, <i>source</i>
     */
    // Template#: 744, Serial#: 3642
    public void cmova(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0187((byte) 0x47, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmova  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 745, Serial#: 3645
    public void rip_cmova(AMD64GeneralRegister64 destination, int rel32) {
        assemble0188((byte) 0x47, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmova  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 746, Serial#: 3649
    public void cmova(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0189((byte) 0x47, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmova  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 747, Serial#: 3644
    public void m_cmova(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0190((byte) 0x47, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmova  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 748, Serial#: 3648
    public void cmova(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0191((byte) 0x47, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovae  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 749, Serial#: 3548
    public void cmovae(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0165((byte) 0x43, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovae  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 750, Serial#: 3547
    public void cmovae(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0166((byte) 0x43, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovae  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 751, Serial#: 3544
    public void cmovae(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0167((byte) 0x43, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovae  }<i>destination</i>, <i>source</i>
     */
    // Template#: 752, Serial#: 3551
    public void cmovae(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0168((byte) 0x43, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovae  }<i>destination</i>, <i>source</i>
     */
    // Template#: 753, Serial#: 3543
    public void cmovae(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        assemble0169((byte) 0x43, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovae  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 754, Serial#: 3546
    public void rip_cmovae(AMD64GeneralRegister16 destination, int rel32) {
        assemble0170((byte) 0x43, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovae  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 755, Serial#: 3550
    public void cmovae(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0171((byte) 0x43, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovae  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 756, Serial#: 3545
    public void m_cmovae(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0172((byte) 0x43, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovae  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 757, Serial#: 3549
    public void cmovae(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0173((byte) 0x43, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovae  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 758, Serial#: 3530
    public void cmovae(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0174((byte) 0x43, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovae  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 759, Serial#: 3529
    public void cmovae(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0175((byte) 0x43, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovae  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 760, Serial#: 3526
    public void cmovae(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0176((byte) 0x43, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovae  }<i>destination</i>, <i>source</i>
     */
    // Template#: 761, Serial#: 3533
    public void cmovae(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0177((byte) 0x43, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovae  }<i>destination</i>, <i>source</i>
     */
    // Template#: 762, Serial#: 3525
    public void cmovae(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0178((byte) 0x43, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovae  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 763, Serial#: 3528
    public void rip_cmovae(AMD64GeneralRegister32 destination, int rel32) {
        assemble0179((byte) 0x43, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovae  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 764, Serial#: 3532
    public void cmovae(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0180((byte) 0x43, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovae  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 765, Serial#: 3527
    public void m_cmovae(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0181((byte) 0x43, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovae  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 766, Serial#: 3531
    public void cmovae(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0182((byte) 0x43, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovae  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 767, Serial#: 3539
    public void cmovae(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0183((byte) 0x43, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovae  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 768, Serial#: 3538
    public void cmovae(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0184((byte) 0x43, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovae  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 769, Serial#: 3535
    public void cmovae(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0185((byte) 0x43, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovae  }<i>destination</i>, <i>source</i>
     */
    // Template#: 770, Serial#: 3542
    public void cmovae(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0186((byte) 0x43, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovae  }<i>destination</i>, <i>source</i>
     */
    // Template#: 771, Serial#: 3534
    public void cmovae(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0187((byte) 0x43, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovae  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 772, Serial#: 3537
    public void rip_cmovae(AMD64GeneralRegister64 destination, int rel32) {
        assemble0188((byte) 0x43, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovae  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 773, Serial#: 3541
    public void cmovae(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0189((byte) 0x43, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovae  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 774, Serial#: 3536
    public void m_cmovae(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0190((byte) 0x43, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovae  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 775, Serial#: 3540
    public void cmovae(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0191((byte) 0x43, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovb  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 776, Serial#: 3521
    public void cmovb(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0165((byte) 0x42, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovb  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 777, Serial#: 3520
    public void cmovb(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0166((byte) 0x42, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovb  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 778, Serial#: 3517
    public void cmovb(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0167((byte) 0x42, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 779, Serial#: 3524
    public void cmovb(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0168((byte) 0x42, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 780, Serial#: 3516
    public void cmovb(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        assemble0169((byte) 0x42, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovb  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 781, Serial#: 3519
    public void rip_cmovb(AMD64GeneralRegister16 destination, int rel32) {
        assemble0170((byte) 0x42, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovb  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 782, Serial#: 3523
    public void cmovb(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0171((byte) 0x42, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovb  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 783, Serial#: 3518
    public void m_cmovb(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0172((byte) 0x42, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovb  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 784, Serial#: 3522
    public void cmovb(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0173((byte) 0x42, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovb  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 785, Serial#: 3503
    public void cmovb(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0174((byte) 0x42, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovb  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 786, Serial#: 3502
    public void cmovb(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0175((byte) 0x42, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovb  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 787, Serial#: 3499
    public void cmovb(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0176((byte) 0x42, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 788, Serial#: 3506
    public void cmovb(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0177((byte) 0x42, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 789, Serial#: 3498
    public void cmovb(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0178((byte) 0x42, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovb  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 790, Serial#: 3501
    public void rip_cmovb(AMD64GeneralRegister32 destination, int rel32) {
        assemble0179((byte) 0x42, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovb  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 791, Serial#: 3505
    public void cmovb(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0180((byte) 0x42, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovb  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 792, Serial#: 3500
    public void m_cmovb(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0181((byte) 0x42, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovb  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 793, Serial#: 3504
    public void cmovb(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0182((byte) 0x42, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovb  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 794, Serial#: 3512
    public void cmovb(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0183((byte) 0x42, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovb  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 795, Serial#: 3511
    public void cmovb(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0184((byte) 0x42, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovb  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 796, Serial#: 3508
    public void cmovb(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0185((byte) 0x42, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 797, Serial#: 3515
    public void cmovb(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0186((byte) 0x42, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 798, Serial#: 3507
    public void cmovb(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0187((byte) 0x42, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovb  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 799, Serial#: 3510
    public void rip_cmovb(AMD64GeneralRegister64 destination, int rel32) {
        assemble0188((byte) 0x42, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovb  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 800, Serial#: 3514
    public void cmovb(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0189((byte) 0x42, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovb  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 801, Serial#: 3509
    public void m_cmovb(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0190((byte) 0x42, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovb  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 802, Serial#: 3513
    public void cmovb(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0191((byte) 0x42, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovbe  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 803, Serial#: 3629
    public void cmovbe(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0165((byte) 0x46, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovbe  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 804, Serial#: 3628
    public void cmovbe(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0166((byte) 0x46, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovbe  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 805, Serial#: 3625
    public void cmovbe(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0167((byte) 0x46, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovbe  }<i>destination</i>, <i>source</i>
     */
    // Template#: 806, Serial#: 3632
    public void cmovbe(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0168((byte) 0x46, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovbe  }<i>destination</i>, <i>source</i>
     */
    // Template#: 807, Serial#: 3624
    public void cmovbe(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        assemble0169((byte) 0x46, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovbe  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 808, Serial#: 3627
    public void rip_cmovbe(AMD64GeneralRegister16 destination, int rel32) {
        assemble0170((byte) 0x46, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovbe  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 809, Serial#: 3631
    public void cmovbe(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0171((byte) 0x46, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovbe  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 810, Serial#: 3626
    public void m_cmovbe(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0172((byte) 0x46, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovbe  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 811, Serial#: 3630
    public void cmovbe(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0173((byte) 0x46, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovbe  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 812, Serial#: 3611
    public void cmovbe(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0174((byte) 0x46, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovbe  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 813, Serial#: 3610
    public void cmovbe(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0175((byte) 0x46, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovbe  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 814, Serial#: 3607
    public void cmovbe(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0176((byte) 0x46, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovbe  }<i>destination</i>, <i>source</i>
     */
    // Template#: 815, Serial#: 3614
    public void cmovbe(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0177((byte) 0x46, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovbe  }<i>destination</i>, <i>source</i>
     */
    // Template#: 816, Serial#: 3606
    public void cmovbe(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0178((byte) 0x46, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovbe  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 817, Serial#: 3609
    public void rip_cmovbe(AMD64GeneralRegister32 destination, int rel32) {
        assemble0179((byte) 0x46, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovbe  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 818, Serial#: 3613
    public void cmovbe(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0180((byte) 0x46, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovbe  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 819, Serial#: 3608
    public void m_cmovbe(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0181((byte) 0x46, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovbe  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 820, Serial#: 3612
    public void cmovbe(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0182((byte) 0x46, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovbe  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 821, Serial#: 3620
    public void cmovbe(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0183((byte) 0x46, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovbe  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 822, Serial#: 3619
    public void cmovbe(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0184((byte) 0x46, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovbe  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 823, Serial#: 3616
    public void cmovbe(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0185((byte) 0x46, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovbe  }<i>destination</i>, <i>source</i>
     */
    // Template#: 824, Serial#: 3623
    public void cmovbe(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0186((byte) 0x46, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovbe  }<i>destination</i>, <i>source</i>
     */
    // Template#: 825, Serial#: 3615
    public void cmovbe(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0187((byte) 0x46, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovbe  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 826, Serial#: 3618
    public void rip_cmovbe(AMD64GeneralRegister64 destination, int rel32) {
        assemble0188((byte) 0x46, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovbe  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 827, Serial#: 3622
    public void cmovbe(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0189((byte) 0x46, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovbe  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 828, Serial#: 3617
    public void m_cmovbe(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0190((byte) 0x46, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovbe  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 829, Serial#: 3621
    public void cmovbe(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0191((byte) 0x46, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmove  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 830, Serial#: 3575
    public void cmove(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0165((byte) 0x44, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmove  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 831, Serial#: 3574
    public void cmove(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0166((byte) 0x44, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmove  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 832, Serial#: 3571
    public void cmove(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0167((byte) 0x44, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmove  }<i>destination</i>, <i>source</i>
     */
    // Template#: 833, Serial#: 3578
    public void cmove(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0168((byte) 0x44, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmove  }<i>destination</i>, <i>source</i>
     */
    // Template#: 834, Serial#: 3570
    public void cmove(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        assemble0169((byte) 0x44, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmove  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 835, Serial#: 3573
    public void rip_cmove(AMD64GeneralRegister16 destination, int rel32) {
        assemble0170((byte) 0x44, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmove  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 836, Serial#: 3577
    public void cmove(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0171((byte) 0x44, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmove  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 837, Serial#: 3572
    public void m_cmove(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0172((byte) 0x44, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmove  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 838, Serial#: 3576
    public void cmove(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0173((byte) 0x44, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmove  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 839, Serial#: 3557
    public void cmove(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0174((byte) 0x44, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmove  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 840, Serial#: 3556
    public void cmove(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0175((byte) 0x44, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmove  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 841, Serial#: 3553
    public void cmove(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0176((byte) 0x44, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmove  }<i>destination</i>, <i>source</i>
     */
    // Template#: 842, Serial#: 3560
    public void cmove(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0177((byte) 0x44, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmove  }<i>destination</i>, <i>source</i>
     */
    // Template#: 843, Serial#: 3552
    public void cmove(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0178((byte) 0x44, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmove  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 844, Serial#: 3555
    public void rip_cmove(AMD64GeneralRegister32 destination, int rel32) {
        assemble0179((byte) 0x44, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmove  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 845, Serial#: 3559
    public void cmove(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0180((byte) 0x44, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmove  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 846, Serial#: 3554
    public void m_cmove(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0181((byte) 0x44, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmove  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 847, Serial#: 3558
    public void cmove(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0182((byte) 0x44, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmove  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 848, Serial#: 3566
    public void cmove(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0183((byte) 0x44, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmove  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 849, Serial#: 3565
    public void cmove(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0184((byte) 0x44, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmove  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 850, Serial#: 3562
    public void cmove(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0185((byte) 0x44, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmove  }<i>destination</i>, <i>source</i>
     */
    // Template#: 851, Serial#: 3569
    public void cmove(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0186((byte) 0x44, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmove  }<i>destination</i>, <i>source</i>
     */
    // Template#: 852, Serial#: 3561
    public void cmove(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0187((byte) 0x44, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmove  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 853, Serial#: 3564
    public void rip_cmove(AMD64GeneralRegister64 destination, int rel32) {
        assemble0188((byte) 0x44, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmove  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 854, Serial#: 3568
    public void cmove(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0189((byte) 0x44, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmove  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 855, Serial#: 3563
    public void m_cmove(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0190((byte) 0x44, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmove  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 856, Serial#: 3567
    public void cmove(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0191((byte) 0x44, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovg  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 857, Serial#: 5358
    public void cmovg(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0165((byte) 0x4F, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovg  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 858, Serial#: 5357
    public void cmovg(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0166((byte) 0x4F, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovg  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 859, Serial#: 5354
    public void cmovg(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0167((byte) 0x4F, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovg  }<i>destination</i>, <i>source</i>
     */
    // Template#: 860, Serial#: 5361
    public void cmovg(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0168((byte) 0x4F, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovg  }<i>destination</i>, <i>source</i>
     */
    // Template#: 861, Serial#: 5353
    public void cmovg(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        assemble0169((byte) 0x4F, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovg  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 862, Serial#: 5356
    public void rip_cmovg(AMD64GeneralRegister16 destination, int rel32) {
        assemble0170((byte) 0x4F, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovg  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 863, Serial#: 5360
    public void cmovg(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0171((byte) 0x4F, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovg  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 864, Serial#: 5355
    public void m_cmovg(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0172((byte) 0x4F, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovg  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 865, Serial#: 5359
    public void cmovg(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0173((byte) 0x4F, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovg  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 866, Serial#: 5340
    public void cmovg(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0174((byte) 0x4F, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovg  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 867, Serial#: 5339
    public void cmovg(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0175((byte) 0x4F, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovg  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 868, Serial#: 5336
    public void cmovg(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0176((byte) 0x4F, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovg  }<i>destination</i>, <i>source</i>
     */
    // Template#: 869, Serial#: 5343
    public void cmovg(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0177((byte) 0x4F, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovg  }<i>destination</i>, <i>source</i>
     */
    // Template#: 870, Serial#: 5335
    public void cmovg(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0178((byte) 0x4F, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovg  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 871, Serial#: 5338
    public void rip_cmovg(AMD64GeneralRegister32 destination, int rel32) {
        assemble0179((byte) 0x4F, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovg  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 872, Serial#: 5342
    public void cmovg(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0180((byte) 0x4F, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovg  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 873, Serial#: 5337
    public void m_cmovg(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0181((byte) 0x4F, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovg  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 874, Serial#: 5341
    public void cmovg(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0182((byte) 0x4F, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovg  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 875, Serial#: 5349
    public void cmovg(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0183((byte) 0x4F, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovg  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 876, Serial#: 5348
    public void cmovg(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0184((byte) 0x4F, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovg  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 877, Serial#: 5345
    public void cmovg(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0185((byte) 0x4F, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovg  }<i>destination</i>, <i>source</i>
     */
    // Template#: 878, Serial#: 5352
    public void cmovg(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0186((byte) 0x4F, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovg  }<i>destination</i>, <i>source</i>
     */
    // Template#: 879, Serial#: 5344
    public void cmovg(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0187((byte) 0x4F, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovg  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 880, Serial#: 5347
    public void rip_cmovg(AMD64GeneralRegister64 destination, int rel32) {
        assemble0188((byte) 0x4F, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovg  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 881, Serial#: 5351
    public void cmovg(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0189((byte) 0x4F, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovg  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 882, Serial#: 5346
    public void m_cmovg(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0190((byte) 0x4F, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovg  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 883, Serial#: 5350
    public void cmovg(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0191((byte) 0x4F, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovge  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 884, Serial#: 5304
    public void cmovge(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0165((byte) 0x4D, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovge  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 885, Serial#: 5303
    public void cmovge(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0166((byte) 0x4D, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovge  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 886, Serial#: 5300
    public void cmovge(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0167((byte) 0x4D, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovge  }<i>destination</i>, <i>source</i>
     */
    // Template#: 887, Serial#: 5307
    public void cmovge(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0168((byte) 0x4D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovge  }<i>destination</i>, <i>source</i>
     */
    // Template#: 888, Serial#: 5299
    public void cmovge(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        assemble0169((byte) 0x4D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovge  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 889, Serial#: 5302
    public void rip_cmovge(AMD64GeneralRegister16 destination, int rel32) {
        assemble0170((byte) 0x4D, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovge  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 890, Serial#: 5306
    public void cmovge(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0171((byte) 0x4D, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovge  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 891, Serial#: 5301
    public void m_cmovge(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0172((byte) 0x4D, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovge  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 892, Serial#: 5305
    public void cmovge(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0173((byte) 0x4D, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovge  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 893, Serial#: 5286
    public void cmovge(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0174((byte) 0x4D, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovge  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 894, Serial#: 5285
    public void cmovge(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0175((byte) 0x4D, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovge  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 895, Serial#: 5282
    public void cmovge(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0176((byte) 0x4D, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovge  }<i>destination</i>, <i>source</i>
     */
    // Template#: 896, Serial#: 5289
    public void cmovge(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0177((byte) 0x4D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovge  }<i>destination</i>, <i>source</i>
     */
    // Template#: 897, Serial#: 5281
    public void cmovge(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0178((byte) 0x4D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovge  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 898, Serial#: 5284
    public void rip_cmovge(AMD64GeneralRegister32 destination, int rel32) {
        assemble0179((byte) 0x4D, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovge  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 899, Serial#: 5288
    public void cmovge(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0180((byte) 0x4D, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovge  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 900, Serial#: 5283
    public void m_cmovge(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0181((byte) 0x4D, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovge  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 901, Serial#: 5287
    public void cmovge(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0182((byte) 0x4D, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovge  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 902, Serial#: 5295
    public void cmovge(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0183((byte) 0x4D, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovge  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 903, Serial#: 5294
    public void cmovge(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0184((byte) 0x4D, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovge  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 904, Serial#: 5291
    public void cmovge(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0185((byte) 0x4D, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovge  }<i>destination</i>, <i>source</i>
     */
    // Template#: 905, Serial#: 5298
    public void cmovge(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0186((byte) 0x4D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovge  }<i>destination</i>, <i>source</i>
     */
    // Template#: 906, Serial#: 5290
    public void cmovge(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0187((byte) 0x4D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovge  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 907, Serial#: 5293
    public void rip_cmovge(AMD64GeneralRegister64 destination, int rel32) {
        assemble0188((byte) 0x4D, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovge  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 908, Serial#: 5297
    public void cmovge(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0189((byte) 0x4D, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovge  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 909, Serial#: 5292
    public void m_cmovge(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0190((byte) 0x4D, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovge  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 910, Serial#: 5296
    public void cmovge(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0191((byte) 0x4D, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovl  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 911, Serial#: 5277
    public void cmovl(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0165((byte) 0x4C, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovl  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 912, Serial#: 5276
    public void cmovl(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0166((byte) 0x4C, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovl  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 913, Serial#: 5273
    public void cmovl(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0167((byte) 0x4C, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovl  }<i>destination</i>, <i>source</i>
     */
    // Template#: 914, Serial#: 5280
    public void cmovl(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0168((byte) 0x4C, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovl  }<i>destination</i>, <i>source</i>
     */
    // Template#: 915, Serial#: 5272
    public void cmovl(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        assemble0169((byte) 0x4C, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovl  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 916, Serial#: 5275
    public void rip_cmovl(AMD64GeneralRegister16 destination, int rel32) {
        assemble0170((byte) 0x4C, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovl  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 917, Serial#: 5279
    public void cmovl(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0171((byte) 0x4C, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovl  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 918, Serial#: 5274
    public void m_cmovl(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0172((byte) 0x4C, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovl  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 919, Serial#: 5278
    public void cmovl(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0173((byte) 0x4C, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovl  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 920, Serial#: 5259
    public void cmovl(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0174((byte) 0x4C, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovl  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 921, Serial#: 5258
    public void cmovl(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0175((byte) 0x4C, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovl  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 922, Serial#: 5255
    public void cmovl(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0176((byte) 0x4C, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovl  }<i>destination</i>, <i>source</i>
     */
    // Template#: 923, Serial#: 5262
    public void cmovl(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0177((byte) 0x4C, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovl  }<i>destination</i>, <i>source</i>
     */
    // Template#: 924, Serial#: 5254
    public void cmovl(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0178((byte) 0x4C, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovl  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 925, Serial#: 5257
    public void rip_cmovl(AMD64GeneralRegister32 destination, int rel32) {
        assemble0179((byte) 0x4C, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovl  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 926, Serial#: 5261
    public void cmovl(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0180((byte) 0x4C, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovl  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 927, Serial#: 5256
    public void m_cmovl(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0181((byte) 0x4C, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovl  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 928, Serial#: 5260
    public void cmovl(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0182((byte) 0x4C, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovl  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 929, Serial#: 5268
    public void cmovl(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0183((byte) 0x4C, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovl  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 930, Serial#: 5267
    public void cmovl(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0184((byte) 0x4C, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovl  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 931, Serial#: 5264
    public void cmovl(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0185((byte) 0x4C, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovl  }<i>destination</i>, <i>source</i>
     */
    // Template#: 932, Serial#: 5271
    public void cmovl(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0186((byte) 0x4C, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovl  }<i>destination</i>, <i>source</i>
     */
    // Template#: 933, Serial#: 5263
    public void cmovl(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0187((byte) 0x4C, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovl  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 934, Serial#: 5266
    public void rip_cmovl(AMD64GeneralRegister64 destination, int rel32) {
        assemble0188((byte) 0x4C, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovl  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 935, Serial#: 5270
    public void cmovl(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0189((byte) 0x4C, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovl  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 936, Serial#: 5265
    public void m_cmovl(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0190((byte) 0x4C, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovl  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 937, Serial#: 5269
    public void cmovl(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0191((byte) 0x4C, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovle  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 938, Serial#: 5331
    public void cmovle(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0165((byte) 0x4E, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovle  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 939, Serial#: 5330
    public void cmovle(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0166((byte) 0x4E, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovle  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 940, Serial#: 5327
    public void cmovle(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0167((byte) 0x4E, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovle  }<i>destination</i>, <i>source</i>
     */
    // Template#: 941, Serial#: 5334
    public void cmovle(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0168((byte) 0x4E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovle  }<i>destination</i>, <i>source</i>
     */
    // Template#: 942, Serial#: 5326
    public void cmovle(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        assemble0169((byte) 0x4E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovle  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 943, Serial#: 5329
    public void rip_cmovle(AMD64GeneralRegister16 destination, int rel32) {
        assemble0170((byte) 0x4E, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovle  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 944, Serial#: 5333
    public void cmovle(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0171((byte) 0x4E, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovle  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 945, Serial#: 5328
    public void m_cmovle(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0172((byte) 0x4E, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovle  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 946, Serial#: 5332
    public void cmovle(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0173((byte) 0x4E, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovle  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 947, Serial#: 5313
    public void cmovle(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0174((byte) 0x4E, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovle  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 948, Serial#: 5312
    public void cmovle(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0175((byte) 0x4E, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovle  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 949, Serial#: 5309
    public void cmovle(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0176((byte) 0x4E, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovle  }<i>destination</i>, <i>source</i>
     */
    // Template#: 950, Serial#: 5316
    public void cmovle(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0177((byte) 0x4E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovle  }<i>destination</i>, <i>source</i>
     */
    // Template#: 951, Serial#: 5308
    public void cmovle(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0178((byte) 0x4E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovle  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 952, Serial#: 5311
    public void rip_cmovle(AMD64GeneralRegister32 destination, int rel32) {
        assemble0179((byte) 0x4E, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovle  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 953, Serial#: 5315
    public void cmovle(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0180((byte) 0x4E, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovle  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 954, Serial#: 5310
    public void m_cmovle(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0181((byte) 0x4E, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovle  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 955, Serial#: 5314
    public void cmovle(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0182((byte) 0x4E, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovle  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 956, Serial#: 5322
    public void cmovle(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0183((byte) 0x4E, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovle  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 957, Serial#: 5321
    public void cmovle(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0184((byte) 0x4E, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovle  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 958, Serial#: 5318
    public void cmovle(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0185((byte) 0x4E, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovle  }<i>destination</i>, <i>source</i>
     */
    // Template#: 959, Serial#: 5325
    public void cmovle(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0186((byte) 0x4E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovle  }<i>destination</i>, <i>source</i>
     */
    // Template#: 960, Serial#: 5317
    public void cmovle(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0187((byte) 0x4E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovle  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 961, Serial#: 5320
    public void rip_cmovle(AMD64GeneralRegister64 destination, int rel32) {
        assemble0188((byte) 0x4E, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovle  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 962, Serial#: 5324
    public void cmovle(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0189((byte) 0x4E, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovle  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 963, Serial#: 5319
    public void m_cmovle(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0190((byte) 0x4E, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovle  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 964, Serial#: 5323
    public void cmovle(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0191((byte) 0x4E, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovne  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 965, Serial#: 3602
    public void cmovne(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0165((byte) 0x45, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovne  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 966, Serial#: 3601
    public void cmovne(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0166((byte) 0x45, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovne  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 967, Serial#: 3598
    public void cmovne(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0167((byte) 0x45, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovne  }<i>destination</i>, <i>source</i>
     */
    // Template#: 968, Serial#: 3605
    public void cmovne(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0168((byte) 0x45, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovne  }<i>destination</i>, <i>source</i>
     */
    // Template#: 969, Serial#: 3597
    public void cmovne(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        assemble0169((byte) 0x45, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovne  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 970, Serial#: 3600
    public void rip_cmovne(AMD64GeneralRegister16 destination, int rel32) {
        assemble0170((byte) 0x45, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovne  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 971, Serial#: 3604
    public void cmovne(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0171((byte) 0x45, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovne  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 972, Serial#: 3599
    public void m_cmovne(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0172((byte) 0x45, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovne  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 973, Serial#: 3603
    public void cmovne(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0173((byte) 0x45, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovne  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 974, Serial#: 3584
    public void cmovne(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0174((byte) 0x45, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovne  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 975, Serial#: 3583
    public void cmovne(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0175((byte) 0x45, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovne  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 976, Serial#: 3580
    public void cmovne(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0176((byte) 0x45, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovne  }<i>destination</i>, <i>source</i>
     */
    // Template#: 977, Serial#: 3587
    public void cmovne(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0177((byte) 0x45, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovne  }<i>destination</i>, <i>source</i>
     */
    // Template#: 978, Serial#: 3579
    public void cmovne(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0178((byte) 0x45, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovne  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 979, Serial#: 3582
    public void rip_cmovne(AMD64GeneralRegister32 destination, int rel32) {
        assemble0179((byte) 0x45, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovne  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 980, Serial#: 3586
    public void cmovne(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0180((byte) 0x45, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovne  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 981, Serial#: 3581
    public void m_cmovne(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0181((byte) 0x45, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovne  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 982, Serial#: 3585
    public void cmovne(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0182((byte) 0x45, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovne  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 983, Serial#: 3593
    public void cmovne(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0183((byte) 0x45, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovne  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 984, Serial#: 3592
    public void cmovne(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0184((byte) 0x45, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovne  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 985, Serial#: 3589
    public void cmovne(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0185((byte) 0x45, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovne  }<i>destination</i>, <i>source</i>
     */
    // Template#: 986, Serial#: 3596
    public void cmovne(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0186((byte) 0x45, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovne  }<i>destination</i>, <i>source</i>
     */
    // Template#: 987, Serial#: 3588
    public void cmovne(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0187((byte) 0x45, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovne  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 988, Serial#: 3591
    public void rip_cmovne(AMD64GeneralRegister64 destination, int rel32) {
        assemble0188((byte) 0x45, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovne  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 989, Serial#: 3595
    public void cmovne(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0189((byte) 0x45, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovne  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 990, Serial#: 3590
    public void m_cmovne(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0190((byte) 0x45, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovne  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 991, Serial#: 3594
    public void cmovne(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0191((byte) 0x45, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovno  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 992, Serial#: 3494
    public void cmovno(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0165((byte) 0x41, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovno  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 993, Serial#: 3493
    public void cmovno(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0166((byte) 0x41, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovno  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 994, Serial#: 3490
    public void cmovno(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0167((byte) 0x41, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovno  }<i>destination</i>, <i>source</i>
     */
    // Template#: 995, Serial#: 3497
    public void cmovno(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0168((byte) 0x41, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovno  }<i>destination</i>, <i>source</i>
     */
    // Template#: 996, Serial#: 3489
    public void cmovno(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        assemble0169((byte) 0x41, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovno  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 997, Serial#: 3492
    public void rip_cmovno(AMD64GeneralRegister16 destination, int rel32) {
        assemble0170((byte) 0x41, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovno  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 998, Serial#: 3496
    public void cmovno(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0171((byte) 0x41, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovno  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 999, Serial#: 3491
    public void m_cmovno(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0172((byte) 0x41, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovno  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1000, Serial#: 3495
    public void cmovno(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0173((byte) 0x41, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovno  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1001, Serial#: 3476
    public void cmovno(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0174((byte) 0x41, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovno  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1002, Serial#: 3475
    public void cmovno(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0175((byte) 0x41, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovno  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1003, Serial#: 3472
    public void cmovno(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0176((byte) 0x41, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovno  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1004, Serial#: 3479
    public void cmovno(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0177((byte) 0x41, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovno  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1005, Serial#: 3471
    public void cmovno(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0178((byte) 0x41, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovno  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1006, Serial#: 3474
    public void rip_cmovno(AMD64GeneralRegister32 destination, int rel32) {
        assemble0179((byte) 0x41, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovno  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1007, Serial#: 3478
    public void cmovno(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0180((byte) 0x41, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovno  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1008, Serial#: 3473
    public void m_cmovno(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0181((byte) 0x41, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovno  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1009, Serial#: 3477
    public void cmovno(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0182((byte) 0x41, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovno  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1010, Serial#: 3485
    public void cmovno(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0183((byte) 0x41, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovno  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1011, Serial#: 3484
    public void cmovno(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0184((byte) 0x41, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovno  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1012, Serial#: 3481
    public void cmovno(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0185((byte) 0x41, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovno  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1013, Serial#: 3488
    public void cmovno(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0186((byte) 0x41, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovno  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1014, Serial#: 3480
    public void cmovno(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0187((byte) 0x41, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovno  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1015, Serial#: 3483
    public void rip_cmovno(AMD64GeneralRegister64 destination, int rel32) {
        assemble0188((byte) 0x41, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovno  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1016, Serial#: 3487
    public void cmovno(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0189((byte) 0x41, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovno  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1017, Serial#: 3482
    public void m_cmovno(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0190((byte) 0x41, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovno  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1018, Serial#: 3486
    public void cmovno(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0191((byte) 0x41, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovnp  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1019, Serial#: 5250
    public void cmovnp(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0165((byte) 0x4B, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovnp  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1020, Serial#: 5249
    public void cmovnp(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0166((byte) 0x4B, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovnp  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1021, Serial#: 5246
    public void cmovnp(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0167((byte) 0x4B, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovnp  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1022, Serial#: 5253
    public void cmovnp(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0168((byte) 0x4B, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovnp  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1023, Serial#: 5245
    public void cmovnp(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        assemble0169((byte) 0x4B, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovnp  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1024, Serial#: 5248
    public void rip_cmovnp(AMD64GeneralRegister16 destination, int rel32) {
        assemble0170((byte) 0x4B, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovnp  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1025, Serial#: 5252
    public void cmovnp(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0171((byte) 0x4B, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovnp  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1026, Serial#: 5247
    public void m_cmovnp(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0172((byte) 0x4B, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovnp  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1027, Serial#: 5251
    public void cmovnp(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0173((byte) 0x4B, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovnp  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1028, Serial#: 5232
    public void cmovnp(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0174((byte) 0x4B, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovnp  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1029, Serial#: 5231
    public void cmovnp(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0175((byte) 0x4B, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovnp  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1030, Serial#: 5228
    public void cmovnp(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0176((byte) 0x4B, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovnp  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1031, Serial#: 5235
    public void cmovnp(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0177((byte) 0x4B, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovnp  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1032, Serial#: 5227
    public void cmovnp(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0178((byte) 0x4B, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovnp  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1033, Serial#: 5230
    public void rip_cmovnp(AMD64GeneralRegister32 destination, int rel32) {
        assemble0179((byte) 0x4B, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovnp  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1034, Serial#: 5234
    public void cmovnp(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0180((byte) 0x4B, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovnp  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1035, Serial#: 5229
    public void m_cmovnp(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0181((byte) 0x4B, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovnp  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1036, Serial#: 5233
    public void cmovnp(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0182((byte) 0x4B, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovnp  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1037, Serial#: 5241
    public void cmovnp(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0183((byte) 0x4B, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovnp  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1038, Serial#: 5240
    public void cmovnp(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0184((byte) 0x4B, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovnp  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1039, Serial#: 5237
    public void cmovnp(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0185((byte) 0x4B, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovnp  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1040, Serial#: 5244
    public void cmovnp(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0186((byte) 0x4B, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovnp  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1041, Serial#: 5236
    public void cmovnp(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0187((byte) 0x4B, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovnp  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1042, Serial#: 5239
    public void rip_cmovnp(AMD64GeneralRegister64 destination, int rel32) {
        assemble0188((byte) 0x4B, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovnp  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1043, Serial#: 5243
    public void cmovnp(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0189((byte) 0x4B, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovnp  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1044, Serial#: 5238
    public void m_cmovnp(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0190((byte) 0x4B, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovnp  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1045, Serial#: 5242
    public void cmovnp(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0191((byte) 0x4B, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovns  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1046, Serial#: 5196
    public void cmovns(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0165((byte) 0x49, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovns  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1047, Serial#: 5195
    public void cmovns(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0166((byte) 0x49, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovns  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1048, Serial#: 5192
    public void cmovns(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0167((byte) 0x49, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovns  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1049, Serial#: 5199
    public void cmovns(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0168((byte) 0x49, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovns  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1050, Serial#: 5191
    public void cmovns(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        assemble0169((byte) 0x49, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovns  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1051, Serial#: 5194
    public void rip_cmovns(AMD64GeneralRegister16 destination, int rel32) {
        assemble0170((byte) 0x49, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovns  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1052, Serial#: 5198
    public void cmovns(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0171((byte) 0x49, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovns  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1053, Serial#: 5193
    public void m_cmovns(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0172((byte) 0x49, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovns  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1054, Serial#: 5197
    public void cmovns(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0173((byte) 0x49, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovns  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1055, Serial#: 5178
    public void cmovns(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0174((byte) 0x49, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovns  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1056, Serial#: 5177
    public void cmovns(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0175((byte) 0x49, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovns  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1057, Serial#: 5174
    public void cmovns(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0176((byte) 0x49, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovns  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1058, Serial#: 5181
    public void cmovns(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0177((byte) 0x49, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovns  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1059, Serial#: 5173
    public void cmovns(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0178((byte) 0x49, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovns  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1060, Serial#: 5176
    public void rip_cmovns(AMD64GeneralRegister32 destination, int rel32) {
        assemble0179((byte) 0x49, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovns  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1061, Serial#: 5180
    public void cmovns(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0180((byte) 0x49, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovns  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1062, Serial#: 5175
    public void m_cmovns(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0181((byte) 0x49, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovns  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1063, Serial#: 5179
    public void cmovns(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0182((byte) 0x49, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovns  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1064, Serial#: 5187
    public void cmovns(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0183((byte) 0x49, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovns  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1065, Serial#: 5186
    public void cmovns(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0184((byte) 0x49, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovns  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1066, Serial#: 5183
    public void cmovns(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0185((byte) 0x49, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovns  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1067, Serial#: 5190
    public void cmovns(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0186((byte) 0x49, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovns  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1068, Serial#: 5182
    public void cmovns(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0187((byte) 0x49, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovns  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1069, Serial#: 5185
    public void rip_cmovns(AMD64GeneralRegister64 destination, int rel32) {
        assemble0188((byte) 0x49, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovns  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1070, Serial#: 5189
    public void cmovns(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0189((byte) 0x49, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovns  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1071, Serial#: 5184
    public void m_cmovns(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0190((byte) 0x49, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovns  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1072, Serial#: 5188
    public void cmovns(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0191((byte) 0x49, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovo  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1073, Serial#: 3467
    public void cmovo(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0165((byte) 0x40, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovo  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1074, Serial#: 3466
    public void cmovo(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0166((byte) 0x40, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovo  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1075, Serial#: 3463
    public void cmovo(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0167((byte) 0x40, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovo  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1076, Serial#: 3470
    public void cmovo(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0168((byte) 0x40, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovo  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1077, Serial#: 3462
    public void cmovo(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        assemble0169((byte) 0x40, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovo  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1078, Serial#: 3465
    public void rip_cmovo(AMD64GeneralRegister16 destination, int rel32) {
        assemble0170((byte) 0x40, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovo  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1079, Serial#: 3469
    public void cmovo(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0171((byte) 0x40, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovo  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1080, Serial#: 3464
    public void m_cmovo(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0172((byte) 0x40, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovo  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1081, Serial#: 3468
    public void cmovo(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0173((byte) 0x40, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovo  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1082, Serial#: 3449
    public void cmovo(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0174((byte) 0x40, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovo  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1083, Serial#: 3448
    public void cmovo(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0175((byte) 0x40, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovo  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1084, Serial#: 3445
    public void cmovo(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0176((byte) 0x40, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovo  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1085, Serial#: 3452
    public void cmovo(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0177((byte) 0x40, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovo  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1086, Serial#: 3444
    public void cmovo(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0178((byte) 0x40, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovo  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1087, Serial#: 3447
    public void rip_cmovo(AMD64GeneralRegister32 destination, int rel32) {
        assemble0179((byte) 0x40, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovo  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1088, Serial#: 3451
    public void cmovo(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0180((byte) 0x40, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovo  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1089, Serial#: 3446
    public void m_cmovo(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0181((byte) 0x40, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovo  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1090, Serial#: 3450
    public void cmovo(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0182((byte) 0x40, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovo  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1091, Serial#: 3458
    public void cmovo(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0183((byte) 0x40, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovo  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1092, Serial#: 3457
    public void cmovo(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0184((byte) 0x40, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovo  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1093, Serial#: 3454
    public void cmovo(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0185((byte) 0x40, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovo  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1094, Serial#: 3461
    public void cmovo(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0186((byte) 0x40, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovo  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1095, Serial#: 3453
    public void cmovo(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0187((byte) 0x40, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovo  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1096, Serial#: 3456
    public void rip_cmovo(AMD64GeneralRegister64 destination, int rel32) {
        assemble0188((byte) 0x40, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovo  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1097, Serial#: 3460
    public void cmovo(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0189((byte) 0x40, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovo  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1098, Serial#: 3455
    public void m_cmovo(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0190((byte) 0x40, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovo  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1099, Serial#: 3459
    public void cmovo(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0191((byte) 0x40, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovp  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1100, Serial#: 5223
    public void cmovp(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0165((byte) 0x4A, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovp  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1101, Serial#: 5222
    public void cmovp(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0166((byte) 0x4A, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovp  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1102, Serial#: 5219
    public void cmovp(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0167((byte) 0x4A, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovp  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1103, Serial#: 5226
    public void cmovp(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0168((byte) 0x4A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovp  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1104, Serial#: 5218
    public void cmovp(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        assemble0169((byte) 0x4A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovp  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1105, Serial#: 5221
    public void rip_cmovp(AMD64GeneralRegister16 destination, int rel32) {
        assemble0170((byte) 0x4A, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovp  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1106, Serial#: 5225
    public void cmovp(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0171((byte) 0x4A, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovp  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1107, Serial#: 5220
    public void m_cmovp(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0172((byte) 0x4A, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovp  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1108, Serial#: 5224
    public void cmovp(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0173((byte) 0x4A, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovp  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1109, Serial#: 5205
    public void cmovp(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0174((byte) 0x4A, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovp  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1110, Serial#: 5204
    public void cmovp(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0175((byte) 0x4A, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovp  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1111, Serial#: 5201
    public void cmovp(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0176((byte) 0x4A, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovp  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1112, Serial#: 5208
    public void cmovp(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0177((byte) 0x4A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovp  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1113, Serial#: 5200
    public void cmovp(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0178((byte) 0x4A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovp  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1114, Serial#: 5203
    public void rip_cmovp(AMD64GeneralRegister32 destination, int rel32) {
        assemble0179((byte) 0x4A, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovp  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1115, Serial#: 5207
    public void cmovp(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0180((byte) 0x4A, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovp  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1116, Serial#: 5202
    public void m_cmovp(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0181((byte) 0x4A, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovp  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1117, Serial#: 5206
    public void cmovp(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0182((byte) 0x4A, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovp  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1118, Serial#: 5214
    public void cmovp(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0183((byte) 0x4A, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovp  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1119, Serial#: 5213
    public void cmovp(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0184((byte) 0x4A, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovp  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1120, Serial#: 5210
    public void cmovp(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0185((byte) 0x4A, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovp  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1121, Serial#: 5217
    public void cmovp(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0186((byte) 0x4A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovp  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1122, Serial#: 5209
    public void cmovp(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0187((byte) 0x4A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovp  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1123, Serial#: 5212
    public void rip_cmovp(AMD64GeneralRegister64 destination, int rel32) {
        assemble0188((byte) 0x4A, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovp  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1124, Serial#: 5216
    public void cmovp(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0189((byte) 0x4A, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovp  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1125, Serial#: 5211
    public void m_cmovp(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0190((byte) 0x4A, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovp  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1126, Serial#: 5215
    public void cmovp(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0191((byte) 0x4A, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovs  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1127, Serial#: 5169
    public void cmovs(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0165((byte) 0x48, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovs  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1128, Serial#: 5168
    public void cmovs(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0166((byte) 0x48, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovs  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1129, Serial#: 5165
    public void cmovs(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0167((byte) 0x48, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovs  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1130, Serial#: 5172
    public void cmovs(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0168((byte) 0x48, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovs  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1131, Serial#: 5164
    public void cmovs(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        assemble0169((byte) 0x48, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovs  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1132, Serial#: 5167
    public void rip_cmovs(AMD64GeneralRegister16 destination, int rel32) {
        assemble0170((byte) 0x48, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovs  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1133, Serial#: 5171
    public void cmovs(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0171((byte) 0x48, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovs  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1134, Serial#: 5166
    public void m_cmovs(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0172((byte) 0x48, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovs  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1135, Serial#: 5170
    public void cmovs(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0173((byte) 0x48, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovs  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1136, Serial#: 5151
    public void cmovs(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0174((byte) 0x48, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovs  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1137, Serial#: 5150
    public void cmovs(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0175((byte) 0x48, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovs  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1138, Serial#: 5147
    public void cmovs(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0176((byte) 0x48, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovs  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1139, Serial#: 5154
    public void cmovs(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0177((byte) 0x48, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovs  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1140, Serial#: 5146
    public void cmovs(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0178((byte) 0x48, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovs  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1141, Serial#: 5149
    public void rip_cmovs(AMD64GeneralRegister32 destination, int rel32) {
        assemble0179((byte) 0x48, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovs  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1142, Serial#: 5153
    public void cmovs(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0180((byte) 0x48, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovs  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1143, Serial#: 5148
    public void m_cmovs(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0181((byte) 0x48, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovs  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1144, Serial#: 5152
    public void cmovs(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0182((byte) 0x48, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovs  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1145, Serial#: 5160
    public void cmovs(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0183((byte) 0x48, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovs  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1146, Serial#: 5159
    public void cmovs(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0184((byte) 0x48, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovs  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1147, Serial#: 5156
    public void cmovs(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0185((byte) 0x48, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovs  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1148, Serial#: 5163
    public void cmovs(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0186((byte) 0x48, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovs  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1149, Serial#: 5155
    public void cmovs(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0187((byte) 0x48, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovs  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1150, Serial#: 5158
    public void rip_cmovs(AMD64GeneralRegister64 destination, int rel32) {
        assemble0188((byte) 0x48, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovs  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1151, Serial#: 5162
    public void cmovs(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0189((byte) 0x48, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovs  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1152, Serial#: 5157
    public void m_cmovs(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0190((byte) 0x48, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovs  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1153, Serial#: 5161
    public void cmovs(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0191((byte) 0x48, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>imm8</i>
     */
    // Template#: 1154, Serial#: 2269
    public void cmp_AL(byte imm8) {
        assemble0001((byte) 0x3C, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 1155, Serial#: 368
    public void cmpb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0002((byte) 0x80, (byte) 0x07, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 1156, Serial#: 656
    public void cmpl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0002((byte) 0x83, (byte) 0x07, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 1157, Serial#: 728
    public void cmpq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0003((byte) 0x83, (byte) 0x07, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 1158, Serial#: 800
    public void cmpw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0004((byte) 0x83, (byte) 0x07, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 1159, Serial#: 2233
    public void cmp(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0005((byte) 0x39, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 1160, Serial#: 2215
    public void cmp(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0006((byte) 0x39, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 1161, Serial#: 2224
    public void cmp(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0007((byte) 0x39, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 1162, Serial#: 2206
    public void cmp(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0008((byte) 0x38, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 1163, Serial#: 440
    public void cmpl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0009((byte) 0x81, (byte) 0x07, disp8, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 1164, Serial#: 512
    public void cmpq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0010((byte) 0x81, (byte) 0x07, disp8, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 1165, Serial#: 584
    public void cmpw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0011((byte) 0x81, (byte) 0x07, disp8, base, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpb  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 1166, Serial#: 367
    public void cmpb(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0012((byte) 0x80, (byte) 0x07, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpl  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 1167, Serial#: 655
    public void cmpl(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0012((byte) 0x83, (byte) 0x07, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpq  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 1168, Serial#: 727
    public void cmpq(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0013((byte) 0x83, (byte) 0x07, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpw  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 1169, Serial#: 799
    public void cmpw(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0014((byte) 0x83, (byte) 0x07, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 1170, Serial#: 2232
    public void cmp(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0015((byte) 0x39, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 1171, Serial#: 2214
    public void cmp(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0016((byte) 0x39, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 1172, Serial#: 2223
    public void cmp(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0017((byte) 0x39, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 1173, Serial#: 2205
    public void cmp(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0018((byte) 0x38, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpl  }<i>disp8</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 1174, Serial#: 439
    public void cmpl(byte disp8, AMD64IndirectRegister64 destination, int imm32) {
        assemble0019((byte) 0x81, (byte) 0x07, disp8, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpq  }<i>disp8</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 1175, Serial#: 511
    public void cmpq(byte disp8, AMD64IndirectRegister64 destination, int imm32) {
        assemble0020((byte) 0x81, (byte) 0x07, disp8, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpw  }<i>disp8</i>, <i>destination</i>, <i>imm16</i>
     */
    // Template#: 1176, Serial#: 583
    public void cmpw(byte disp8, AMD64IndirectRegister64 destination, short imm16) {
        assemble0021((byte) 0x81, (byte) 0x07, disp8, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpb  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 1177, Serial#: 350
    public void cmpb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0022((byte) 0x80, (byte) 0x07, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpl  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 1178, Serial#: 638
    public void cmpl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0022((byte) 0x83, (byte) 0x07, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpq  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 1179, Serial#: 710
    public void cmpq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0023((byte) 0x83, (byte) 0x07, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpw  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 1180, Serial#: 782
    public void cmpw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0024((byte) 0x83, (byte) 0x07, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 1181, Serial#: 2229
    public void cmp(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0025((byte) 0x39, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 1182, Serial#: 2211
    public void cmp(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0026((byte) 0x39, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 1183, Serial#: 2220
    public void cmp(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0027((byte) 0x39, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 1184, Serial#: 2202
    public void cmp(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0028((byte) 0x38, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpl  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 1185, Serial#: 422
    public void cmpl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0029((byte) 0x81, (byte) 0x07, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpq  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 1186, Serial#: 494
    public void cmpq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0030((byte) 0x81, (byte) 0x07, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpw  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 1187, Serial#: 566
    public void cmpw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0031((byte) 0x81, (byte) 0x07, base, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 1188, Serial#: 824
    public void cmpw(AMD64GeneralRegister16 destination, byte imm8) {
        assemble0032((byte) 0x83, (byte) 0x07, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1189, Serial#: 2266
    public void cmp(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0033((byte) 0x3B, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1190, Serial#: 2265
    public void cmp(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0034((byte) 0x3B, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1191, Serial#: 2262
    public void cmp(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0035((byte) 0x3B, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1192, Serial#: 2236
    public void cmp(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0036((byte) 0x39, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1193, Serial#: 2261
    public void cmp(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        assemble0037((byte) 0x3B, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1194, Serial#: 2264
    public void rip_cmp(AMD64GeneralRegister16 destination, int rel32) {
        assemble0038((byte) 0x3B, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1195, Serial#: 2268
    public void cmp(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0039((byte) 0x3B, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1196, Serial#: 2263
    public void m_cmp(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0040((byte) 0x3B, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1197, Serial#: 2267
    public void cmp(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0041((byte) 0x3B, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpw  }<i>destination</i>, <i>imm16</i>
     */
    // Template#: 1198, Serial#: 608
    public void cmpw(AMD64GeneralRegister16 destination, short imm16) {
        assemble0042((byte) 0x81, (byte) 0x07, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpl  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 1199, Serial#: 680
    public void cmpl(AMD64GeneralRegister32 destination, byte imm8) {
        assemble0043((byte) 0x83, (byte) 0x07, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1200, Serial#: 2250
    public void cmp(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0044((byte) 0x3B, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1201, Serial#: 2249
    public void cmp(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0045((byte) 0x3B, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1202, Serial#: 2246
    public void cmp(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0046((byte) 0x3B, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1203, Serial#: 2218
    public void cmp(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0047((byte) 0x39, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1204, Serial#: 2245
    public void cmp(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0048((byte) 0x3B, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpl  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 1205, Serial#: 464
    public void cmpl(AMD64GeneralRegister32 destination, int imm32) {
        assemble0050((byte) 0x81, (byte) 0x07, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1206, Serial#: 2248
    public void rip_cmp(AMD64GeneralRegister32 destination, int rel32) {
        assemble0049((byte) 0x3B, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1207, Serial#: 2252
    public void cmp(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0051((byte) 0x3B, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1208, Serial#: 2247
    public void m_cmp(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0052((byte) 0x3B, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1209, Serial#: 2251
    public void cmp(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0053((byte) 0x3B, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 1210, Serial#: 752
    public void cmpq(AMD64GeneralRegister64 destination, byte imm8) {
        assemble0054((byte) 0x83, (byte) 0x07, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1211, Serial#: 2258
    public void cmp(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0055((byte) 0x3B, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1212, Serial#: 2257
    public void cmp(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0056((byte) 0x3B, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1213, Serial#: 2254
    public void cmp(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0057((byte) 0x3B, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1214, Serial#: 2227
    public void cmp(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0058((byte) 0x39, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1215, Serial#: 2253
    public void cmp(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0059((byte) 0x3B, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpq  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 1216, Serial#: 536
    public void cmpq(AMD64GeneralRegister64 destination, int imm32) {
        assemble0061((byte) 0x81, (byte) 0x07, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1217, Serial#: 2256
    public void rip_cmp(AMD64GeneralRegister64 destination, int rel32) {
        assemble0060((byte) 0x3B, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1218, Serial#: 2260
    public void cmp(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0062((byte) 0x3B, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1219, Serial#: 2255
    public void m_cmp(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0063((byte) 0x3B, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1220, Serial#: 2259
    public void cmp(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0064((byte) 0x3B, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpb  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 1221, Serial#: 392
    public void cmpb(AMD64GeneralRegister8 destination, byte imm8) {
        assemble0065((byte) 0x80, (byte) 0x07, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1222, Serial#: 2242
    public void cmp(AMD64GeneralRegister8 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0066((byte) 0x3A, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1223, Serial#: 2241
    public void cmp(AMD64GeneralRegister8 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0067((byte) 0x3A, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1224, Serial#: 2238
    public void cmp(AMD64GeneralRegister8 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0068((byte) 0x3A, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1225, Serial#: 2209
    public void cmp(AMD64GeneralRegister8 destination, AMD64GeneralRegister8 source) {
        assemble0069((byte) 0x38, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1226, Serial#: 2237
    public void cmp(AMD64GeneralRegister8 destination, AMD64IndirectRegister64 source) {
        assemble0070((byte) 0x3A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1227, Serial#: 2240
    public void rip_cmp(AMD64GeneralRegister8 destination, int rel32) {
        assemble0071((byte) 0x3A, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1228, Serial#: 2244
    public void cmp(AMD64GeneralRegister8 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0072((byte) 0x3A, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1229, Serial#: 2239
    public void m_cmp(AMD64GeneralRegister8 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0073((byte) 0x3A, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1230, Serial#: 2243
    public void cmp(AMD64GeneralRegister8 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0074((byte) 0x3A, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpb  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 1231, Serial#: 349
    public void cmpb(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0075((byte) 0x80, (byte) 0x07, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpl  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 1232, Serial#: 637
    public void cmpl(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0075((byte) 0x83, (byte) 0x07, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 1233, Serial#: 709
    public void cmpq(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0076((byte) 0x83, (byte) 0x07, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 1234, Serial#: 781
    public void cmpw(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0077((byte) 0x83, (byte) 0x07, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1235, Serial#: 2228
    public void cmp(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0078((byte) 0x39, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1236, Serial#: 2210
    public void cmp(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0079((byte) 0x39, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1237, Serial#: 2219
    public void cmp(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0080((byte) 0x39, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1238, Serial#: 2201
    public void cmp(AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0081((byte) 0x38, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpl  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 1239, Serial#: 421
    public void cmpl(AMD64IndirectRegister64 destination, int imm32) {
        assemble0082((byte) 0x81, (byte) 0x07, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpq  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 1240, Serial#: 493
    public void cmpq(AMD64IndirectRegister64 destination, int imm32) {
        assemble0083((byte) 0x81, (byte) 0x07, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpw  }<i>destination</i>, <i>imm16</i>
     */
    // Template#: 1241, Serial#: 565
    public void cmpw(AMD64IndirectRegister64 destination, short imm16) {
        assemble0084((byte) 0x81, (byte) 0x07, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>imm32</i>
     */
    // Template#: 1242, Serial#: 2270
    public void cmp_EAX(int imm32) {
        assemble0085((byte) 0x3D, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>imm32</i>
     */
    // Template#: 1243, Serial#: 2271
    public void cmp_RAX(int imm32) {
        assemble0086((byte) 0x3D, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpb  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 1244, Serial#: 352
    public void rip_cmpb(int rel32, byte imm8) {
        assemble0087((byte) 0x80, (byte) 0x07, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpl  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 1245, Serial#: 640
    public void rip_cmpl(int rel32, byte imm8) {
        assemble0087((byte) 0x83, (byte) 0x07, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpq  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 1246, Serial#: 712
    public void rip_cmpq(int rel32, byte imm8) {
        assemble0088((byte) 0x83, (byte) 0x07, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpw  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 1247, Serial#: 784
    public void rip_cmpw(int rel32, byte imm8) {
        assemble0089((byte) 0x83, (byte) 0x07, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 1248, Serial#: 384
    public void cmpb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0090((byte) 0x80, (byte) 0x07, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 1249, Serial#: 672
    public void cmpl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0090((byte) 0x83, (byte) 0x07, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 1250, Serial#: 744
    public void cmpq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0091((byte) 0x83, (byte) 0x07, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 1251, Serial#: 816
    public void cmpw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0092((byte) 0x83, (byte) 0x07, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 1252, Serial#: 2235
    public void cmp(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0093((byte) 0x39, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 1253, Serial#: 2217
    public void cmp(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0094((byte) 0x39, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 1254, Serial#: 2226
    public void cmp(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0095((byte) 0x39, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 1255, Serial#: 2208
    public void cmp(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0096((byte) 0x38, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 1256, Serial#: 456
    public void cmpl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0097((byte) 0x81, (byte) 0x07, disp32, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 1257, Serial#: 528
    public void cmpq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0098((byte) 0x81, (byte) 0x07, disp32, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 1258, Serial#: 600
    public void cmpw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0099((byte) 0x81, (byte) 0x07, disp32, base, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 1259, Serial#: 2231
    public void rip_cmp(int rel32, AMD64GeneralRegister16 source) {
        assemble0100((byte) 0x39, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 1260, Serial#: 2213
    public void rip_cmp(int rel32, AMD64GeneralRegister32 source) {
        assemble0101((byte) 0x39, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 1261, Serial#: 2222
    public void rip_cmp(int rel32, AMD64GeneralRegister64 source) {
        assemble0102((byte) 0x39, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 1262, Serial#: 2204
    public void rip_cmp(int rel32, AMD64GeneralRegister8 source) {
        assemble0103((byte) 0x38, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpb  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 1263, Serial#: 351
    public void m_cmpb(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0104((byte) 0x80, (byte) 0x07, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpl  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 1264, Serial#: 639
    public void m_cmpl(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0104((byte) 0x83, (byte) 0x07, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpq  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 1265, Serial#: 711
    public void m_cmpq(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0105((byte) 0x83, (byte) 0x07, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpw  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 1266, Serial#: 783
    public void m_cmpw(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0106((byte) 0x83, (byte) 0x07, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 1267, Serial#: 2230
    public void m_cmp(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0107((byte) 0x39, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 1268, Serial#: 2212
    public void m_cmp(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0108((byte) 0x39, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 1269, Serial#: 2221
    public void m_cmp(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0109((byte) 0x39, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 1270, Serial#: 2203
    public void m_cmp(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0110((byte) 0x38, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpl  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 1271, Serial#: 423
    public void m_cmpl(int m32, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0111((byte) 0x81, (byte) 0x07, m32, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpq  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 1272, Serial#: 495
    public void m_cmpq(int m32, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0112((byte) 0x81, (byte) 0x07, m32, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpw  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 1273, Serial#: 567
    public void m_cmpw(int m32, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0113((byte) 0x81, (byte) 0x07, m32, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpb  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 1274, Serial#: 383
    public void cmpb(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0114((byte) 0x80, (byte) 0x07, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpl  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 1275, Serial#: 671
    public void cmpl(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0114((byte) 0x83, (byte) 0x07, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpq  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 1276, Serial#: 743
    public void cmpq(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0115((byte) 0x83, (byte) 0x07, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpw  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 1277, Serial#: 815
    public void cmpw(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0116((byte) 0x83, (byte) 0x07, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 1278, Serial#: 2234
    public void cmp(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0117((byte) 0x39, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 1279, Serial#: 2216
    public void cmp(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0118((byte) 0x39, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 1280, Serial#: 2225
    public void cmp(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0119((byte) 0x39, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 1281, Serial#: 2207
    public void cmp(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0120((byte) 0x38, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpl  }<i>disp32</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 1282, Serial#: 455
    public void cmpl(int disp32, AMD64IndirectRegister64 destination, int imm32) {
        assemble0121((byte) 0x81, (byte) 0x07, disp32, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpq  }<i>disp32</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 1283, Serial#: 527
    public void cmpq(int disp32, AMD64IndirectRegister64 destination, int imm32) {
        assemble0122((byte) 0x81, (byte) 0x07, disp32, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpw  }<i>disp32</i>, <i>destination</i>, <i>imm16</i>
     */
    // Template#: 1284, Serial#: 599
    public void cmpw(int disp32, AMD64IndirectRegister64 destination, short imm16) {
        assemble0123((byte) 0x81, (byte) 0x07, disp32, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpl  }<i>rel32</i>, <i>imm32</i>
     */
    // Template#: 1285, Serial#: 424
    public void rip_cmpl(int rel32, int imm32) {
        assemble0124((byte) 0x81, (byte) 0x07, rel32, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpq  }<i>rel32</i>, <i>imm32</i>
     */
    // Template#: 1286, Serial#: 496
    public void rip_cmpq(int rel32, int imm32) {
        assemble0125((byte) 0x81, (byte) 0x07, rel32, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpw  }<i>rel32</i>, <i>imm16</i>
     */
    // Template#: 1287, Serial#: 568
    public void rip_cmpw(int rel32, short imm16) {
        assemble0126((byte) 0x81, (byte) 0x07, rel32, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>imm16</i>
     */
    // Template#: 1288, Serial#: 2272
    public void cmp_AX(short imm16) {
        assemble0127((byte) 0x3D, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmppd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1289, Serial#: 4424
    public void cmppd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison) {
        assemble0253((byte) 0xC2, destination, disp8, base, index, scale, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmppd  }<i>destination</i>, <i>disp8</i>, <i>source</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1290, Serial#: 4423
    public void cmppd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison) {
        assemble0254((byte) 0xC2, destination, disp8, source, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmppd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1291, Serial#: 4420
    public void cmppd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison) {
        assemble0255((byte) 0xC2, destination, base, index, scale, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmppd  }<i>destination</i>, <i>source</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1292, Serial#: 4419
    public void cmppd(AMD64XMMRegister destination, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison) {
        assemble0256((byte) 0xC2, destination, source, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmppd  }<i>destination</i>, <i>source</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1293, Serial#: 4427
    public void cmppd(AMD64XMMRegister destination, AMD64XMMRegister source, AMD64XMMComparison amd64xmmcomparison) {
        assemble0257((byte) 0xC2, destination, source, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmppd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1294, Serial#: 4426
    public void cmppd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison) {
        assemble0258((byte) 0xC2, destination, disp32, base, index, scale, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmppd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1295, Serial#: 4421
    public void m_cmppd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison) {
        assemble0259((byte) 0xC2, destination, m32, index, scale, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmppd  }<i>destination</i>, <i>disp32</i>, <i>source</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1296, Serial#: 4425
    public void cmppd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison) {
        assemble0260((byte) 0xC2, destination, disp32, source, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmppd  }<i>destination</i>, <i>rel32</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1297, Serial#: 4422
    public void rip_cmppd(AMD64XMMRegister destination, int rel32, AMD64XMMComparison amd64xmmcomparison) {
        assemble0261((byte) 0xC2, destination, rel32, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpps  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1298, Serial#: 4372
    public void cmpps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison) {
        assemble0262((byte) 0xC2, destination, disp8, base, index, scale, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpps  }<i>destination</i>, <i>disp8</i>, <i>source</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1299, Serial#: 4371
    public void cmpps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison) {
        assemble0263((byte) 0xC2, destination, disp8, source, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpps  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1300, Serial#: 4368
    public void cmpps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison) {
        assemble0264((byte) 0xC2, destination, base, index, scale, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpps  }<i>destination</i>, <i>source</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1301, Serial#: 4367
    public void cmpps(AMD64XMMRegister destination, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison) {
        assemble0265((byte) 0xC2, destination, source, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpps  }<i>destination</i>, <i>source</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1302, Serial#: 4375
    public void cmpps(AMD64XMMRegister destination, AMD64XMMRegister source, AMD64XMMComparison amd64xmmcomparison) {
        assemble0266((byte) 0xC2, destination, source, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpps  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1303, Serial#: 4374
    public void cmpps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison) {
        assemble0267((byte) 0xC2, destination, disp32, base, index, scale, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpps  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1304, Serial#: 4369
    public void m_cmpps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison) {
        assemble0268((byte) 0xC2, destination, m32, index, scale, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpps  }<i>destination</i>, <i>disp32</i>, <i>source</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1305, Serial#: 4373
    public void cmpps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison) {
        assemble0269((byte) 0xC2, destination, disp32, source, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpps  }<i>destination</i>, <i>rel32</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1306, Serial#: 4370
    public void rip_cmpps(AMD64XMMRegister destination, int rel32, AMD64XMMComparison amd64xmmcomparison) {
        assemble0270((byte) 0xC2, destination, rel32, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpsb  }
     */
    // Template#: 1307, Serial#: 913
    public void cmpsb() {
        assemble0146((byte) 0xA6);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpsl  }
     */
    // Template#: 1308, Serial#: 914
    public void cmpsl() {
        assemble0146((byte) 0xA7);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpsq  }
     */
    // Template#: 1309, Serial#: 915
    public void cmpsq() {
        assemble0243((byte) 0xA7);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpsw  }
     */
    // Template#: 1310, Serial#: 916
    public void cmpsw() {
        assemble0271((byte) 0xA7);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpsd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1311, Serial#: 4452
    public void cmpsd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison) {
        assemble0272((byte) 0xC2, destination, disp8, base, index, scale, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpsd  }<i>destination</i>, <i>disp8</i>, <i>source</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1312, Serial#: 4451
    public void cmpsd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison) {
        assemble0273((byte) 0xC2, destination, disp8, source, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpsd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1313, Serial#: 4448
    public void cmpsd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison) {
        assemble0274((byte) 0xC2, destination, base, index, scale, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpsd  }<i>destination</i>, <i>source</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1314, Serial#: 4447
    public void cmpsd(AMD64XMMRegister destination, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison) {
        assemble0275((byte) 0xC2, destination, source, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpsd  }<i>destination</i>, <i>source</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1315, Serial#: 4455
    public void cmpsd(AMD64XMMRegister destination, AMD64XMMRegister source, AMD64XMMComparison amd64xmmcomparison) {
        assemble0276((byte) 0xC2, destination, source, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpsd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1316, Serial#: 4454
    public void cmpsd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison) {
        assemble0277((byte) 0xC2, destination, disp32, base, index, scale, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpsd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1317, Serial#: 4449
    public void m_cmpsd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison) {
        assemble0278((byte) 0xC2, destination, m32, index, scale, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpsd  }<i>destination</i>, <i>disp32</i>, <i>source</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1318, Serial#: 4453
    public void cmpsd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison) {
        assemble0279((byte) 0xC2, destination, disp32, source, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpsd  }<i>destination</i>, <i>rel32</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1319, Serial#: 4450
    public void rip_cmpsd(AMD64XMMRegister destination, int rel32, AMD64XMMComparison amd64xmmcomparison) {
        assemble0280((byte) 0xC2, destination, rel32, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpss  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1320, Serial#: 4461
    public void cmpss(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison) {
        assemble0281((byte) 0xC2, destination, disp8, base, index, scale, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpss  }<i>destination</i>, <i>disp8</i>, <i>source</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1321, Serial#: 4460
    public void cmpss(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison) {
        assemble0282((byte) 0xC2, destination, disp8, source, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpss  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1322, Serial#: 4457
    public void cmpss(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison) {
        assemble0283((byte) 0xC2, destination, base, index, scale, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpss  }<i>destination</i>, <i>source</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1323, Serial#: 4456
    public void cmpss(AMD64XMMRegister destination, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison) {
        assemble0284((byte) 0xC2, destination, source, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpss  }<i>destination</i>, <i>source</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1324, Serial#: 4464
    public void cmpss(AMD64XMMRegister destination, AMD64XMMRegister source, AMD64XMMComparison amd64xmmcomparison) {
        assemble0285((byte) 0xC2, destination, source, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpss  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1325, Serial#: 4463
    public void cmpss(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison) {
        assemble0286((byte) 0xC2, destination, disp32, base, index, scale, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpss  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1326, Serial#: 4458
    public void m_cmpss(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison) {
        assemble0287((byte) 0xC2, destination, m32, index, scale, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpss  }<i>destination</i>, <i>disp32</i>, <i>source</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1327, Serial#: 4462
    public void cmpss(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison) {
        assemble0288((byte) 0xC2, destination, disp32, source, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpss  }<i>destination</i>, <i>rel32</i>, <i>amd64xmmcomparison</i>
     */
    // Template#: 1328, Serial#: 4459
    public void rip_cmpss(AMD64XMMRegister destination, int rel32, AMD64XMMComparison amd64xmmcomparison) {
        assemble0289((byte) 0xC2, destination, rel32, amd64xmmcomparison);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 1329, Serial#: 4255
    public void cmpxchg(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0195((byte) 0xB1, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 1330, Serial#: 4237
    public void cmpxchg(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0196((byte) 0xB1, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 1331, Serial#: 4246
    public void cmpxchg(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0197((byte) 0xB1, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 1332, Serial#: 4228
    public void cmpxchg(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0290((byte) 0xB0, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 1333, Serial#: 4254
    public void cmpxchg(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0199((byte) 0xB1, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 1334, Serial#: 4236
    public void cmpxchg(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0200((byte) 0xB1, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 1335, Serial#: 4245
    public void cmpxchg(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0201((byte) 0xB1, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 1336, Serial#: 4227
    public void cmpxchg(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0291((byte) 0xB0, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 1337, Serial#: 4251
    public void cmpxchg(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0203((byte) 0xB1, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 1338, Serial#: 4233
    public void cmpxchg(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0204((byte) 0xB1, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 1339, Serial#: 4242
    public void cmpxchg(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0205((byte) 0xB1, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 1340, Serial#: 4224
    public void cmpxchg(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0292((byte) 0xB0, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1341, Serial#: 4258
    public void cmpxchg(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0207((byte) 0xB1, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1342, Serial#: 4240
    public void cmpxchg(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0209((byte) 0xB1, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1343, Serial#: 4249
    public void cmpxchg(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0211((byte) 0xB1, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1344, Serial#: 4231
    public void cmpxchg(AMD64GeneralRegister8 destination, AMD64GeneralRegister8 source) {
        assemble0293((byte) 0xB0, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1345, Serial#: 4250
    public void cmpxchg(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0213((byte) 0xB1, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1346, Serial#: 4232
    public void cmpxchg(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0214((byte) 0xB1, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1347, Serial#: 4241
    public void cmpxchg(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0215((byte) 0xB1, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1348, Serial#: 4223
    public void cmpxchg(AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0294((byte) 0xB0, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 1349, Serial#: 4257
    public void cmpxchg(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0218((byte) 0xB1, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 1350, Serial#: 4239
    public void cmpxchg(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0219((byte) 0xB1, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 1351, Serial#: 4248
    public void cmpxchg(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0220((byte) 0xB1, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 1352, Serial#: 4230
    public void cmpxchg(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0295((byte) 0xB0, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 1353, Serial#: 4253
    public void rip_cmpxchg(int rel32, AMD64GeneralRegister16 source) {
        assemble0221((byte) 0xB1, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 1354, Serial#: 4235
    public void rip_cmpxchg(int rel32, AMD64GeneralRegister32 source) {
        assemble0222((byte) 0xB1, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 1355, Serial#: 4244
    public void rip_cmpxchg(int rel32, AMD64GeneralRegister64 source) {
        assemble0223((byte) 0xB1, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 1356, Serial#: 4226
    public void rip_cmpxchg(int rel32, AMD64GeneralRegister8 source) {
        assemble0296((byte) 0xB0, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 1357, Serial#: 4252
    public void m_cmpxchg(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0225((byte) 0xB1, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 1358, Serial#: 4234
    public void m_cmpxchg(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0226((byte) 0xB1, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 1359, Serial#: 4243
    public void m_cmpxchg(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0227((byte) 0xB1, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 1360, Serial#: 4225
    public void m_cmpxchg(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0297((byte) 0xB0, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 1361, Serial#: 4256
    public void cmpxchg(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0229((byte) 0xB1, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 1362, Serial#: 4238
    public void cmpxchg(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0230((byte) 0xB1, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 1363, Serial#: 4247
    public void cmpxchg(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0231((byte) 0xB1, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 1364, Serial#: 4229
    public void cmpxchg(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0298((byte) 0xB0, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg16b  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1365, Serial#: 4416
    public void cmpxchg16b(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0244((byte) 0xC7, (byte) 0x01, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg16b  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1366, Serial#: 4415
    public void cmpxchg16b(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0245((byte) 0xC7, (byte) 0x01, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg16b  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1367, Serial#: 4412
    public void cmpxchg16b(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0246((byte) 0xC7, (byte) 0x01, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg16b  }<i>destination</i>
     */
    // Template#: 1368, Serial#: 4411
    public void cmpxchg16b(AMD64IndirectRegister64 destination) {
        assemble0247((byte) 0xC7, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg16b  }<i>rel32</i>
     */
    // Template#: 1369, Serial#: 4414
    public void rip_cmpxchg16b(int rel32) {
        assemble0248((byte) 0xC7, (byte) 0x01, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg16b  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1370, Serial#: 4418
    public void cmpxchg16b(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0249((byte) 0xC7, (byte) 0x01, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg16b  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1371, Serial#: 4413
    public void m_cmpxchg16b(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0250((byte) 0xC7, (byte) 0x01, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg16b  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 1372, Serial#: 4417
    public void cmpxchg16b(int disp32, AMD64IndirectRegister64 destination) {
        assemble0251((byte) 0xC7, (byte) 0x01, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code comisd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1373, Serial#: 5034
    public void comisd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x2F, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code comisd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1374, Serial#: 5033
    public void comisd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x2F, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code comisd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1375, Serial#: 5030
    public void comisd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x2F, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code comisd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1376, Serial#: 5029
    public void comisd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x2F, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code comisd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1377, Serial#: 5037
    public void comisd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x2F, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code comisd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1378, Serial#: 5032
    public void rip_comisd(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x2F, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code comisd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1379, Serial#: 5036
    public void comisd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x2F, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code comisd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1380, Serial#: 5031
    public void m_comisd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x2F, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code comisd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1381, Serial#: 5035
    public void comisd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x2F, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code comiss  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1382, Serial#: 4964
    public void comiss(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0137((byte) 0x2F, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code comiss  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1383, Serial#: 4963
    public void comiss(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0138((byte) 0x2F, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code comiss  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1384, Serial#: 4960
    public void comiss(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0139((byte) 0x2F, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code comiss  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1385, Serial#: 4959
    public void comiss(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0140((byte) 0x2F, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code comiss  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1386, Serial#: 4967
    public void comiss(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0141((byte) 0x2F, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code comiss  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1387, Serial#: 4962
    public void rip_comiss(AMD64XMMRegister destination, int rel32) {
        assemble0142((byte) 0x2F, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code comiss  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1388, Serial#: 4966
    public void comiss(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0143((byte) 0x2F, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code comiss  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1389, Serial#: 4961
    public void m_comiss(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0144((byte) 0x2F, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code comiss  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1390, Serial#: 4965
    public void comiss(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0145((byte) 0x2F, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cpuid  }
     */
    // Template#: 1391, Serial#: 4141
    public void cpuid() {
        assemble0252((byte) 0xA2);
    }

    /**
     * Pseudo-external assembler syntax: {@code cqo  }
     */
    // Template#: 1392, Serial#: 2467
    public void cqo() {
        assemble0243((byte) 0x99);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtdq2pd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1393, Serial#: 4724
    public void cvtdq2pd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0156((byte) 0xE6, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtdq2pd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1394, Serial#: 4723
    public void cvtdq2pd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0157((byte) 0xE6, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtdq2pd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1395, Serial#: 4720
    public void cvtdq2pd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0158((byte) 0xE6, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtdq2pd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1396, Serial#: 4719
    public void cvtdq2pd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0159((byte) 0xE6, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtdq2pd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1397, Serial#: 4727
    public void cvtdq2pd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0160((byte) 0xE6, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtdq2pd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1398, Serial#: 4722
    public void rip_cvtdq2pd(AMD64XMMRegister destination, int rel32) {
        assemble0161((byte) 0xE6, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtdq2pd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1399, Serial#: 4726
    public void cvtdq2pd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0162((byte) 0xE6, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtdq2pd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1400, Serial#: 4721
    public void m_cvtdq2pd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0163((byte) 0xE6, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtdq2pd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1401, Serial#: 4725
    public void cvtdq2pd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0164((byte) 0xE6, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtdq2ps  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1402, Serial#: 5394
    public void cvtdq2ps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0137((byte) 0x5B, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtdq2ps  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1403, Serial#: 5393
    public void cvtdq2ps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0138((byte) 0x5B, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtdq2ps  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1404, Serial#: 5390
    public void cvtdq2ps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0139((byte) 0x5B, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtdq2ps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1405, Serial#: 5389
    public void cvtdq2ps(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0140((byte) 0x5B, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtdq2ps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1406, Serial#: 5397
    public void cvtdq2ps(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0141((byte) 0x5B, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtdq2ps  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1407, Serial#: 5392
    public void rip_cvtdq2ps(AMD64XMMRegister destination, int rel32) {
        assemble0142((byte) 0x5B, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtdq2ps  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1408, Serial#: 5396
    public void cvtdq2ps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0143((byte) 0x5B, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtdq2ps  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1409, Serial#: 5391
    public void m_cvtdq2ps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0144((byte) 0x5B, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtdq2ps  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1410, Serial#: 5395
    public void cvtdq2ps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0145((byte) 0x5B, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpd2dq  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1411, Serial#: 4715
    public void cvtpd2dq(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0147((byte) 0xE6, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpd2dq  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1412, Serial#: 4714
    public void cvtpd2dq(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0148((byte) 0xE6, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpd2dq  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1413, Serial#: 4711
    public void cvtpd2dq(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0149((byte) 0xE6, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpd2dq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1414, Serial#: 4710
    public void cvtpd2dq(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0150((byte) 0xE6, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpd2dq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1415, Serial#: 4718
    public void cvtpd2dq(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0151((byte) 0xE6, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpd2dq  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1416, Serial#: 4713
    public void rip_cvtpd2dq(AMD64XMMRegister destination, int rel32) {
        assemble0152((byte) 0xE6, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpd2dq  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1417, Serial#: 4717
    public void cvtpd2dq(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0153((byte) 0xE6, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpd2dq  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1418, Serial#: 4712
    public void m_cvtpd2dq(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0154((byte) 0xE6, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpd2dq  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1419, Serial#: 4716
    public void cvtpd2dq(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0155((byte) 0xE6, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpd2pi  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1420, Serial#: 5016
    public void cvtpd2pi(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0299((byte) 0x2D, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpd2pi  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1421, Serial#: 5015
    public void cvtpd2pi(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0300((byte) 0x2D, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpd2pi  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1422, Serial#: 5012
    public void cvtpd2pi(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0301((byte) 0x2D, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpd2pi  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1423, Serial#: 5011
    public void cvtpd2pi(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0302((byte) 0x2D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpd2pi  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1424, Serial#: 5019
    public void cvtpd2pi(MMXRegister destination, AMD64XMMRegister source) {
        assemble0303((byte) 0x2D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpd2pi  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1425, Serial#: 5014
    public void rip_cvtpd2pi(MMXRegister destination, int rel32) {
        assemble0304((byte) 0x2D, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpd2pi  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1426, Serial#: 5018
    public void cvtpd2pi(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0305((byte) 0x2D, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpd2pi  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1427, Serial#: 5013
    public void m_cvtpd2pi(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0306((byte) 0x2D, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpd2pi  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1428, Serial#: 5017
    public void cvtpd2pi(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0307((byte) 0x2D, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpd2ps  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1429, Serial#: 5457
    public void cvtpd2ps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x5A, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpd2ps  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1430, Serial#: 5456
    public void cvtpd2ps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x5A, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpd2ps  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1431, Serial#: 5453
    public void cvtpd2ps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x5A, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpd2ps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1432, Serial#: 5452
    public void cvtpd2ps(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x5A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpd2ps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1433, Serial#: 5460
    public void cvtpd2ps(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x5A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpd2ps  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1434, Serial#: 5455
    public void rip_cvtpd2ps(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x5A, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpd2ps  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1435, Serial#: 5459
    public void cvtpd2ps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x5A, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpd2ps  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1436, Serial#: 5454
    public void m_cvtpd2ps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x5A, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpd2ps  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1437, Serial#: 5458
    public void cvtpd2ps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x5A, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpi2pd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1438, Serial#: 4990
    public void cvtpi2pd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x2A, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpi2pd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1439, Serial#: 4989
    public void cvtpi2pd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x2A, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpi2pd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1440, Serial#: 4986
    public void cvtpi2pd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x2A, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpi2pd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1441, Serial#: 4985
    public void cvtpi2pd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x2A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpi2pd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1442, Serial#: 4993
    public void cvtpi2pd(AMD64XMMRegister destination, MMXRegister source) {
        assemble0308((byte) 0x2A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpi2pd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1443, Serial#: 4988
    public void rip_cvtpi2pd(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x2A, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpi2pd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1444, Serial#: 4992
    public void cvtpi2pd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x2A, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpi2pd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1445, Serial#: 4987
    public void m_cvtpi2pd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x2A, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpi2pd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1446, Serial#: 4991
    public void cvtpi2pd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x2A, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpi2ps  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1447, Serial#: 4920
    public void cvtpi2ps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0137((byte) 0x2A, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpi2ps  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1448, Serial#: 4919
    public void cvtpi2ps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0138((byte) 0x2A, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpi2ps  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1449, Serial#: 4916
    public void cvtpi2ps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0139((byte) 0x2A, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpi2ps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1450, Serial#: 4915
    public void cvtpi2ps(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0140((byte) 0x2A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpi2ps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1451, Serial#: 4923
    public void cvtpi2ps(AMD64XMMRegister destination, MMXRegister source) {
        assemble0309((byte) 0x2A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpi2ps  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1452, Serial#: 4918
    public void rip_cvtpi2ps(AMD64XMMRegister destination, int rel32) {
        assemble0142((byte) 0x2A, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpi2ps  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1453, Serial#: 4922
    public void cvtpi2ps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0143((byte) 0x2A, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpi2ps  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1454, Serial#: 4917
    public void m_cvtpi2ps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0144((byte) 0x2A, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpi2ps  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1455, Serial#: 4921
    public void cvtpi2ps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0145((byte) 0x2A, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtps2dq  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1456, Serial#: 5466
    public void cvtps2dq(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x5B, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtps2dq  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1457, Serial#: 5465
    public void cvtps2dq(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x5B, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtps2dq  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1458, Serial#: 5462
    public void cvtps2dq(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x5B, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtps2dq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1459, Serial#: 5461
    public void cvtps2dq(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x5B, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtps2dq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1460, Serial#: 5469
    public void cvtps2dq(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x5B, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtps2dq  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1461, Serial#: 5464
    public void rip_cvtps2dq(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x5B, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtps2dq  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1462, Serial#: 5468
    public void cvtps2dq(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x5B, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtps2dq  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1463, Serial#: 5463
    public void m_cvtps2dq(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x5B, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtps2dq  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1464, Serial#: 5467
    public void cvtps2dq(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x5B, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtps2pd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1465, Serial#: 5385
    public void cvtps2pd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0137((byte) 0x5A, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtps2pd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1466, Serial#: 5384
    public void cvtps2pd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0138((byte) 0x5A, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtps2pd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1467, Serial#: 5381
    public void cvtps2pd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0139((byte) 0x5A, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtps2pd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1468, Serial#: 5380
    public void cvtps2pd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0140((byte) 0x5A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtps2pd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1469, Serial#: 5388
    public void cvtps2pd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0141((byte) 0x5A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtps2pd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1470, Serial#: 5383
    public void rip_cvtps2pd(AMD64XMMRegister destination, int rel32) {
        assemble0142((byte) 0x5A, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtps2pd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1471, Serial#: 5387
    public void cvtps2pd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0143((byte) 0x5A, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtps2pd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1472, Serial#: 5382
    public void m_cvtps2pd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0144((byte) 0x5A, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtps2pd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1473, Serial#: 5386
    public void cvtps2pd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0145((byte) 0x5A, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtps2pi  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1474, Serial#: 4946
    public void cvtps2pi(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0x2D, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtps2pi  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1475, Serial#: 4945
    public void cvtps2pi(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0x2D, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtps2pi  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1476, Serial#: 4942
    public void cvtps2pi(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0x2D, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtps2pi  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1477, Serial#: 4941
    public void cvtps2pi(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0x2D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtps2pi  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1478, Serial#: 4949
    public void cvtps2pi(MMXRegister destination, AMD64XMMRegister source) {
        assemble0314((byte) 0x2D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtps2pi  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1479, Serial#: 4944
    public void rip_cvtps2pi(MMXRegister destination, int rel32) {
        assemble0315((byte) 0x2D, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtps2pi  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1480, Serial#: 4948
    public void cvtps2pi(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0x2D, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtps2pi  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1481, Serial#: 4943
    public void m_cvtps2pi(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0x2D, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtps2pi  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1482, Serial#: 4947
    public void cvtps2pi(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0x2D, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsd2si  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1483, Serial#: 5079
    public void cvtsd2si(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0319((byte) 0x2D, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsd2si  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1484, Serial#: 5078
    public void cvtsd2si(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0320((byte) 0x2D, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsd2si  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1485, Serial#: 5075
    public void cvtsd2si(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0321((byte) 0x2D, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsd2si  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1486, Serial#: 5074
    public void cvtsd2si(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0322((byte) 0x2D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsd2si  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1487, Serial#: 5082
    public void cvtsd2si(AMD64GeneralRegister32 destination, AMD64XMMRegister source) {
        assemble0323((byte) 0x2D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsd2si  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1488, Serial#: 5077
    public void rip_cvtsd2si(AMD64GeneralRegister32 destination, int rel32) {
        assemble0324((byte) 0x2D, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsd2si  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1489, Serial#: 5081
    public void cvtsd2si(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0325((byte) 0x2D, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsd2si  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1490, Serial#: 5076
    public void m_cvtsd2si(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0326((byte) 0x2D, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsd2si  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1491, Serial#: 5080
    public void cvtsd2si(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0327((byte) 0x2D, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsd2si  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1492, Serial#: 5088
    public void cvtsd2si(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0328((byte) 0x2D, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsd2si  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1493, Serial#: 5087
    public void cvtsd2si(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0329((byte) 0x2D, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsd2si  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1494, Serial#: 5084
    public void cvtsd2si(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0330((byte) 0x2D, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsd2si  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1495, Serial#: 5083
    public void cvtsd2si(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0331((byte) 0x2D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsd2si  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1496, Serial#: 5091
    public void cvtsd2si(AMD64GeneralRegister64 destination, AMD64XMMRegister source) {
        assemble0332((byte) 0x2D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsd2si  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1497, Serial#: 5086
    public void rip_cvtsd2si(AMD64GeneralRegister64 destination, int rel32) {
        assemble0333((byte) 0x2D, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsd2si  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1498, Serial#: 5090
    public void cvtsd2si(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0334((byte) 0x2D, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsd2si  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1499, Serial#: 5085
    public void m_cvtsd2si(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0335((byte) 0x2D, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsd2si  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1500, Serial#: 5089
    public void cvtsd2si(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0336((byte) 0x2D, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsd2ss  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1501, Serial#: 5529
    public void cvtsd2ss(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0147((byte) 0x5A, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsd2ss  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1502, Serial#: 5528
    public void cvtsd2ss(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0148((byte) 0x5A, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsd2ss  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1503, Serial#: 5525
    public void cvtsd2ss(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0149((byte) 0x5A, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsd2ss  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1504, Serial#: 5524
    public void cvtsd2ss(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0150((byte) 0x5A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsd2ss  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1505, Serial#: 5532
    public void cvtsd2ss(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0151((byte) 0x5A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsd2ss  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1506, Serial#: 5527
    public void rip_cvtsd2ss(AMD64XMMRegister destination, int rel32) {
        assemble0152((byte) 0x5A, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsd2ss  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1507, Serial#: 5531
    public void cvtsd2ss(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0153((byte) 0x5A, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsd2ss  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1508, Serial#: 5526
    public void m_cvtsd2ss(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0154((byte) 0x5A, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsd2ss  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1509, Serial#: 5530
    public void cvtsd2ss(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0155((byte) 0x5A, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2sdl  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1510, Serial#: 5043
    public void cvtsi2sdl(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0147((byte) 0x2A, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2sdq  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1511, Serial#: 5052
    public void cvtsi2sdq(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0337((byte) 0x2A, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2sdl  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1512, Serial#: 5042
    public void cvtsi2sdl(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0148((byte) 0x2A, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2sdq  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1513, Serial#: 5051
    public void cvtsi2sdq(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0338((byte) 0x2A, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2sdl  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1514, Serial#: 5039
    public void cvtsi2sdl(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0149((byte) 0x2A, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2sdq  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1515, Serial#: 5048
    public void cvtsi2sdq(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0339((byte) 0x2A, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2sdl  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1516, Serial#: 5046
    public void cvtsi2sdl(AMD64XMMRegister destination, AMD64GeneralRegister32 source) {
        assemble0340((byte) 0x2A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2sdq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1517, Serial#: 5055
    public void cvtsi2sdq(AMD64XMMRegister destination, AMD64GeneralRegister64 source) {
        assemble0341((byte) 0x2A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2sdl  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1518, Serial#: 5038
    public void cvtsi2sdl(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0150((byte) 0x2A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2sdq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1519, Serial#: 5047
    public void cvtsi2sdq(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0342((byte) 0x2A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2sdl  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1520, Serial#: 5041
    public void rip_cvtsi2sdl(AMD64XMMRegister destination, int rel32) {
        assemble0152((byte) 0x2A, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2sdq  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1521, Serial#: 5050
    public void rip_cvtsi2sdq(AMD64XMMRegister destination, int rel32) {
        assemble0343((byte) 0x2A, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2sdl  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1522, Serial#: 5045
    public void cvtsi2sdl(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0153((byte) 0x2A, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2sdq  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1523, Serial#: 5054
    public void cvtsi2sdq(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0344((byte) 0x2A, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2sdl  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1524, Serial#: 5040
    public void m_cvtsi2sdl(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0154((byte) 0x2A, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2sdq  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1525, Serial#: 5049
    public void m_cvtsi2sdq(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0345((byte) 0x2A, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2sdl  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1526, Serial#: 5044
    public void cvtsi2sdl(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0155((byte) 0x2A, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2sdq  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1527, Serial#: 5053
    public void cvtsi2sdq(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0346((byte) 0x2A, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2ssl  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1528, Serial#: 5097
    public void cvtsi2ssl(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0156((byte) 0x2A, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2ssq  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1529, Serial#: 5106
    public void cvtsi2ssq(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0347((byte) 0x2A, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2ssl  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1530, Serial#: 5096
    public void cvtsi2ssl(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0157((byte) 0x2A, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2ssq  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1531, Serial#: 5105
    public void cvtsi2ssq(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0348((byte) 0x2A, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2ssl  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1532, Serial#: 5093
    public void cvtsi2ssl(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0158((byte) 0x2A, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2ssq  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1533, Serial#: 5102
    public void cvtsi2ssq(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0349((byte) 0x2A, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2ssl  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1534, Serial#: 5100
    public void cvtsi2ssl(AMD64XMMRegister destination, AMD64GeneralRegister32 source) {
        assemble0350((byte) 0x2A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2ssq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1535, Serial#: 5109
    public void cvtsi2ssq(AMD64XMMRegister destination, AMD64GeneralRegister64 source) {
        assemble0351((byte) 0x2A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2ssl  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1536, Serial#: 5092
    public void cvtsi2ssl(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0159((byte) 0x2A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2ssq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1537, Serial#: 5101
    public void cvtsi2ssq(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0352((byte) 0x2A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2ssl  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1538, Serial#: 5095
    public void rip_cvtsi2ssl(AMD64XMMRegister destination, int rel32) {
        assemble0161((byte) 0x2A, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2ssq  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1539, Serial#: 5104
    public void rip_cvtsi2ssq(AMD64XMMRegister destination, int rel32) {
        assemble0353((byte) 0x2A, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2ssl  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1540, Serial#: 5099
    public void cvtsi2ssl(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0162((byte) 0x2A, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2ssq  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1541, Serial#: 5108
    public void cvtsi2ssq(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0354((byte) 0x2A, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2ssl  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1542, Serial#: 5094
    public void m_cvtsi2ssl(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0163((byte) 0x2A, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2ssq  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1543, Serial#: 5103
    public void m_cvtsi2ssq(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0355((byte) 0x2A, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2ssl  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1544, Serial#: 5098
    public void cvtsi2ssl(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0164((byte) 0x2A, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2ssq  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1545, Serial#: 5107
    public void cvtsi2ssq(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0356((byte) 0x2A, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtss2sd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1546, Serial#: 5592
    public void cvtss2sd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0156((byte) 0x5A, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtss2sd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1547, Serial#: 5591
    public void cvtss2sd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0157((byte) 0x5A, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtss2sd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1548, Serial#: 5588
    public void cvtss2sd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0158((byte) 0x5A, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtss2sd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1549, Serial#: 5587
    public void cvtss2sd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0159((byte) 0x5A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtss2sd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1550, Serial#: 5595
    public void cvtss2sd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0160((byte) 0x5A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtss2sd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1551, Serial#: 5590
    public void rip_cvtss2sd(AMD64XMMRegister destination, int rel32) {
        assemble0161((byte) 0x5A, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtss2sd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1552, Serial#: 5594
    public void cvtss2sd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0162((byte) 0x5A, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtss2sd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1553, Serial#: 5589
    public void m_cvtss2sd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0163((byte) 0x5A, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtss2sd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1554, Serial#: 5593
    public void cvtss2sd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0164((byte) 0x5A, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtss2si  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1555, Serial#: 5133
    public void cvtss2si(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0357((byte) 0x2D, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtss2si  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1556, Serial#: 5132
    public void cvtss2si(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0358((byte) 0x2D, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtss2si  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1557, Serial#: 5129
    public void cvtss2si(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0359((byte) 0x2D, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtss2si  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1558, Serial#: 5128
    public void cvtss2si(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0360((byte) 0x2D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtss2si  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1559, Serial#: 5136
    public void cvtss2si(AMD64GeneralRegister32 destination, AMD64XMMRegister source) {
        assemble0361((byte) 0x2D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtss2si  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1560, Serial#: 5131
    public void rip_cvtss2si(AMD64GeneralRegister32 destination, int rel32) {
        assemble0362((byte) 0x2D, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtss2si  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1561, Serial#: 5135
    public void cvtss2si(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0363((byte) 0x2D, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtss2si  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1562, Serial#: 5130
    public void m_cvtss2si(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0364((byte) 0x2D, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtss2si  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1563, Serial#: 5134
    public void cvtss2si(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0365((byte) 0x2D, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtss2si  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1564, Serial#: 5142
    public void cvtss2si(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0366((byte) 0x2D, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtss2si  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1565, Serial#: 5141
    public void cvtss2si(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0367((byte) 0x2D, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtss2si  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1566, Serial#: 5138
    public void cvtss2si(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0368((byte) 0x2D, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtss2si  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1567, Serial#: 5137
    public void cvtss2si(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0369((byte) 0x2D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtss2si  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1568, Serial#: 5145
    public void cvtss2si(AMD64GeneralRegister64 destination, AMD64XMMRegister source) {
        assemble0370((byte) 0x2D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtss2si  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1569, Serial#: 5140
    public void rip_cvtss2si(AMD64GeneralRegister64 destination, int rel32) {
        assemble0371((byte) 0x2D, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtss2si  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1570, Serial#: 5144
    public void cvtss2si(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0372((byte) 0x2D, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtss2si  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1571, Serial#: 5139
    public void m_cvtss2si(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0373((byte) 0x2D, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtss2si  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1572, Serial#: 5143
    public void cvtss2si(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0374((byte) 0x2D, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttpd2dq  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1573, Serial#: 4698
    public void cvttpd2dq(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xE6, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttpd2dq  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1574, Serial#: 4697
    public void cvttpd2dq(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xE6, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttpd2dq  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1575, Serial#: 4694
    public void cvttpd2dq(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xE6, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttpd2dq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1576, Serial#: 4693
    public void cvttpd2dq(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xE6, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttpd2dq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1577, Serial#: 4701
    public void cvttpd2dq(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xE6, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttpd2dq  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1578, Serial#: 4696
    public void rip_cvttpd2dq(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xE6, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttpd2dq  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1579, Serial#: 4700
    public void cvttpd2dq(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xE6, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttpd2dq  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1580, Serial#: 4695
    public void m_cvttpd2dq(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xE6, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttpd2dq  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1581, Serial#: 4699
    public void cvttpd2dq(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xE6, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttpd2pi  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1582, Serial#: 5007
    public void cvttpd2pi(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0299((byte) 0x2C, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttpd2pi  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1583, Serial#: 5006
    public void cvttpd2pi(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0300((byte) 0x2C, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttpd2pi  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1584, Serial#: 5003
    public void cvttpd2pi(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0301((byte) 0x2C, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttpd2pi  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1585, Serial#: 5002
    public void cvttpd2pi(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0302((byte) 0x2C, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttpd2pi  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1586, Serial#: 5010
    public void cvttpd2pi(MMXRegister destination, AMD64XMMRegister source) {
        assemble0303((byte) 0x2C, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttpd2pi  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1587, Serial#: 5005
    public void rip_cvttpd2pi(MMXRegister destination, int rel32) {
        assemble0304((byte) 0x2C, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttpd2pi  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1588, Serial#: 5009
    public void cvttpd2pi(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0305((byte) 0x2C, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttpd2pi  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1589, Serial#: 5004
    public void m_cvttpd2pi(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0306((byte) 0x2C, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttpd2pi  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1590, Serial#: 5008
    public void cvttpd2pi(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0307((byte) 0x2C, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttps2dq  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1591, Serial#: 5601
    public void cvttps2dq(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0156((byte) 0x5B, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttps2dq  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1592, Serial#: 5600
    public void cvttps2dq(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0157((byte) 0x5B, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttps2dq  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1593, Serial#: 5597
    public void cvttps2dq(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0158((byte) 0x5B, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttps2dq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1594, Serial#: 5596
    public void cvttps2dq(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0159((byte) 0x5B, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttps2dq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1595, Serial#: 5604
    public void cvttps2dq(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0160((byte) 0x5B, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttps2dq  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1596, Serial#: 5599
    public void rip_cvttps2dq(AMD64XMMRegister destination, int rel32) {
        assemble0161((byte) 0x5B, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttps2dq  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1597, Serial#: 5603
    public void cvttps2dq(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0162((byte) 0x5B, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttps2dq  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1598, Serial#: 5598
    public void m_cvttps2dq(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0163((byte) 0x5B, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttps2dq  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1599, Serial#: 5602
    public void cvttps2dq(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0164((byte) 0x5B, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttps2pi  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1600, Serial#: 4937
    public void cvttps2pi(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0x2C, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttps2pi  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1601, Serial#: 4936
    public void cvttps2pi(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0x2C, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttps2pi  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1602, Serial#: 4933
    public void cvttps2pi(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0x2C, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttps2pi  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1603, Serial#: 4932
    public void cvttps2pi(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0x2C, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttps2pi  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1604, Serial#: 4940
    public void cvttps2pi(MMXRegister destination, AMD64XMMRegister source) {
        assemble0314((byte) 0x2C, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttps2pi  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1605, Serial#: 4935
    public void rip_cvttps2pi(MMXRegister destination, int rel32) {
        assemble0315((byte) 0x2C, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttps2pi  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1606, Serial#: 4939
    public void cvttps2pi(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0x2C, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttps2pi  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1607, Serial#: 4934
    public void m_cvttps2pi(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0x2C, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttps2pi  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1608, Serial#: 4938
    public void cvttps2pi(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0x2C, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttsd2si  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1609, Serial#: 5061
    public void cvttsd2si(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0319((byte) 0x2C, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttsd2si  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1610, Serial#: 5060
    public void cvttsd2si(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0320((byte) 0x2C, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttsd2si  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1611, Serial#: 5057
    public void cvttsd2si(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0321((byte) 0x2C, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttsd2si  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1612, Serial#: 5056
    public void cvttsd2si(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0322((byte) 0x2C, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttsd2si  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1613, Serial#: 5064
    public void cvttsd2si(AMD64GeneralRegister32 destination, AMD64XMMRegister source) {
        assemble0323((byte) 0x2C, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttsd2si  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1614, Serial#: 5059
    public void rip_cvttsd2si(AMD64GeneralRegister32 destination, int rel32) {
        assemble0324((byte) 0x2C, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttsd2si  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1615, Serial#: 5063
    public void cvttsd2si(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0325((byte) 0x2C, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttsd2si  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1616, Serial#: 5058
    public void m_cvttsd2si(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0326((byte) 0x2C, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttsd2si  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1617, Serial#: 5062
    public void cvttsd2si(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0327((byte) 0x2C, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttsd2si  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1618, Serial#: 5070
    public void cvttsd2si(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0328((byte) 0x2C, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttsd2si  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1619, Serial#: 5069
    public void cvttsd2si(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0329((byte) 0x2C, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttsd2si  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1620, Serial#: 5066
    public void cvttsd2si(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0330((byte) 0x2C, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttsd2si  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1621, Serial#: 5065
    public void cvttsd2si(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0331((byte) 0x2C, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttsd2si  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1622, Serial#: 5073
    public void cvttsd2si(AMD64GeneralRegister64 destination, AMD64XMMRegister source) {
        assemble0332((byte) 0x2C, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttsd2si  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1623, Serial#: 5068
    public void rip_cvttsd2si(AMD64GeneralRegister64 destination, int rel32) {
        assemble0333((byte) 0x2C, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttsd2si  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1624, Serial#: 5072
    public void cvttsd2si(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0334((byte) 0x2C, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttsd2si  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1625, Serial#: 5067
    public void m_cvttsd2si(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0335((byte) 0x2C, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttsd2si  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1626, Serial#: 5071
    public void cvttsd2si(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0336((byte) 0x2C, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttss2si  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1627, Serial#: 5115
    public void cvttss2si(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0357((byte) 0x2C, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttss2si  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1628, Serial#: 5114
    public void cvttss2si(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0358((byte) 0x2C, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttss2si  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1629, Serial#: 5111
    public void cvttss2si(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0359((byte) 0x2C, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttss2si  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1630, Serial#: 5110
    public void cvttss2si(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0360((byte) 0x2C, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttss2si  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1631, Serial#: 5118
    public void cvttss2si(AMD64GeneralRegister32 destination, AMD64XMMRegister source) {
        assemble0361((byte) 0x2C, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttss2si  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1632, Serial#: 5113
    public void rip_cvttss2si(AMD64GeneralRegister32 destination, int rel32) {
        assemble0362((byte) 0x2C, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttss2si  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1633, Serial#: 5117
    public void cvttss2si(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0363((byte) 0x2C, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttss2si  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1634, Serial#: 5112
    public void m_cvttss2si(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0364((byte) 0x2C, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttss2si  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1635, Serial#: 5116
    public void cvttss2si(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0365((byte) 0x2C, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttss2si  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1636, Serial#: 5124
    public void cvttss2si(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0366((byte) 0x2C, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttss2si  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1637, Serial#: 5123
    public void cvttss2si(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0367((byte) 0x2C, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttss2si  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1638, Serial#: 5120
    public void cvttss2si(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0368((byte) 0x2C, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttss2si  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1639, Serial#: 5119
    public void cvttss2si(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0369((byte) 0x2C, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttss2si  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1640, Serial#: 5127
    public void cvttss2si(AMD64GeneralRegister64 destination, AMD64XMMRegister source) {
        assemble0370((byte) 0x2C, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttss2si  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1641, Serial#: 5122
    public void rip_cvttss2si(AMD64GeneralRegister64 destination, int rel32) {
        assemble0371((byte) 0x2C, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttss2si  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1642, Serial#: 5126
    public void cvttss2si(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0372((byte) 0x2C, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttss2si  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1643, Serial#: 5121
    public void m_cvttss2si(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0373((byte) 0x2C, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttss2si  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1644, Serial#: 5125
    public void cvttss2si(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0374((byte) 0x2C, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code cwde  }
     */
    // Template#: 1645, Serial#: 2464
    public void cwde() {
        assemble0146((byte) 0x98);
    }

    /**
     * Pseudo-external assembler syntax: {@code das  }
     */
    // Template#: 1646, Serial#: 2200
    public void das() {
        assemble0146((byte) 0x2F);
    }

    /**
     * Pseudo-external assembler syntax: {@code decb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1647, Serial#: 2985
    public void decb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xFE, (byte) 0x01, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code decl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1648, Serial#: 3003
    public void decl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xFF, (byte) 0x01, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code decq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1649, Serial#: 3021
    public void decq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0375((byte) 0xFF, (byte) 0x01, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code decw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1650, Serial#: 3039
    public void decw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0376((byte) 0xFF, (byte) 0x01, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code decb  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1651, Serial#: 2984
    public void decb(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xFE, (byte) 0x01, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code decl  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1652, Serial#: 3002
    public void decl(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xFF, (byte) 0x01, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code decq  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1653, Serial#: 3020
    public void decq(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0377((byte) 0xFF, (byte) 0x01, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code decw  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1654, Serial#: 3038
    public void decw(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0378((byte) 0xFF, (byte) 0x01, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code decb  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1655, Serial#: 2979
    public void decb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xFE, (byte) 0x01, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code decl  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1656, Serial#: 2997
    public void decl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xFF, (byte) 0x01, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code decq  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1657, Serial#: 3015
    public void decq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0379((byte) 0xFF, (byte) 0x01, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code decw  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1658, Serial#: 3033
    public void decw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0380((byte) 0xFF, (byte) 0x01, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code decw  }<i>destination</i>
     */
    // Template#: 1659, Serial#: 3045
    public void decw(AMD64GeneralRegister16 destination) {
        assemble0235((byte) 0xFF, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code decl  }<i>destination</i>
     */
    // Template#: 1660, Serial#: 3009
    public void decl(AMD64GeneralRegister32 destination) {
        assemble0381((byte) 0xFF, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code decq  }<i>destination</i>
     */
    // Template#: 1661, Serial#: 3027
    public void decq(AMD64GeneralRegister64 destination) {
        assemble0382((byte) 0xFF, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code decb  }<i>destination</i>
     */
    // Template#: 1662, Serial#: 2991
    public void decb(AMD64GeneralRegister8 destination) {
        assemble0383((byte) 0xFE, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code decb  }<i>destination</i>
     */
    // Template#: 1663, Serial#: 2978
    public void decb(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xFE, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code decl  }<i>destination</i>
     */
    // Template#: 1664, Serial#: 2996
    public void decl(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xFF, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code decq  }<i>destination</i>
     */
    // Template#: 1665, Serial#: 3014
    public void decq(AMD64IndirectRegister64 destination) {
        assemble0384((byte) 0xFF, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code decw  }<i>destination</i>
     */
    // Template#: 1666, Serial#: 3032
    public void decw(AMD64IndirectRegister64 destination) {
        assemble0385((byte) 0xFF, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code decb  }<i>rel32</i>
     */
    // Template#: 1667, Serial#: 2981
    public void rip_decb(int rel32) {
        assemble0239((byte) 0xFE, (byte) 0x01, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code decl  }<i>rel32</i>
     */
    // Template#: 1668, Serial#: 2999
    public void rip_decl(int rel32) {
        assemble0239((byte) 0xFF, (byte) 0x01, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code decq  }<i>rel32</i>
     */
    // Template#: 1669, Serial#: 3017
    public void rip_decq(int rel32) {
        assemble0386((byte) 0xFF, (byte) 0x01, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code decw  }<i>rel32</i>
     */
    // Template#: 1670, Serial#: 3035
    public void rip_decw(int rel32) {
        assemble0387((byte) 0xFF, (byte) 0x01, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code decb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1671, Serial#: 2989
    public void decb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xFE, (byte) 0x01, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code decl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1672, Serial#: 3007
    public void decl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xFF, (byte) 0x01, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code decq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1673, Serial#: 3025
    public void decq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0388((byte) 0xFF, (byte) 0x01, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code decw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1674, Serial#: 3043
    public void decw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0389((byte) 0xFF, (byte) 0x01, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code decb  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1675, Serial#: 2980
    public void m_decb(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xFE, (byte) 0x01, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code decl  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1676, Serial#: 2998
    public void m_decl(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xFF, (byte) 0x01, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code decq  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1677, Serial#: 3016
    public void m_decq(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0390((byte) 0xFF, (byte) 0x01, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code decw  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1678, Serial#: 3034
    public void m_decw(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0391((byte) 0xFF, (byte) 0x01, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code decb  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 1679, Serial#: 2988
    public void decb(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xFE, (byte) 0x01, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code decl  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 1680, Serial#: 3006
    public void decl(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xFF, (byte) 0x01, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code decq  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 1681, Serial#: 3024
    public void decq(int disp32, AMD64IndirectRegister64 destination) {
        assemble0392((byte) 0xFF, (byte) 0x01, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code decw  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 1682, Serial#: 3042
    public void decw(int disp32, AMD64IndirectRegister64 destination) {
        assemble0393((byte) 0xFF, (byte) 0x01, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code divb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1683, Serial#: 1770
    public void divb___AL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xF6, (byte) 0x06, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code divl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1684, Serial#: 1833
    public void divl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xF7, (byte) 0x06, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code divq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1685, Serial#: 1896
    public void divq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0375((byte) 0xF7, (byte) 0x06, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code divw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1686, Serial#: 1959
    public void divw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0376((byte) 0xF7, (byte) 0x06, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code divb  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1687, Serial#: 1769
    public void divb___AL(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xF6, (byte) 0x06, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code divl  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1688, Serial#: 1832
    public void divl(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xF7, (byte) 0x06, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code divq  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1689, Serial#: 1895
    public void divq(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0377((byte) 0xF7, (byte) 0x06, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code divw  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1690, Serial#: 1958
    public void divw(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0378((byte) 0xF7, (byte) 0x06, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code divb  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1691, Serial#: 1752
    public void divb___AL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xF6, (byte) 0x06, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code divl  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1692, Serial#: 1815
    public void divl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xF7, (byte) 0x06, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code divq  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1693, Serial#: 1878
    public void divq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0379((byte) 0xF7, (byte) 0x06, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code divw  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1694, Serial#: 1941
    public void divw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0380((byte) 0xF7, (byte) 0x06, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code divw  }<i>destination</i>
     */
    // Template#: 1695, Serial#: 1981
    public void divw(AMD64GeneralRegister16 destination) {
        assemble0235((byte) 0xF7, (byte) 0x06, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code divl  }<i>destination</i>
     */
    // Template#: 1696, Serial#: 1855
    public void divl(AMD64GeneralRegister32 destination) {
        assemble0381((byte) 0xF7, (byte) 0x06, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code divq  }<i>destination</i>
     */
    // Template#: 1697, Serial#: 1918
    public void divq(AMD64GeneralRegister64 destination) {
        assemble0382((byte) 0xF7, (byte) 0x06, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code divb  }<i>destination</i>
     */
    // Template#: 1698, Serial#: 1792
    public void divb___AL(AMD64GeneralRegister8 destination) {
        assemble0383((byte) 0xF6, (byte) 0x06, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code divb  }<i>destination</i>
     */
    // Template#: 1699, Serial#: 1751
    public void divb___AL(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xF6, (byte) 0x06, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code divl  }<i>destination</i>
     */
    // Template#: 1700, Serial#: 1814
    public void divl(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xF7, (byte) 0x06, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code divq  }<i>destination</i>
     */
    // Template#: 1701, Serial#: 1877
    public void divq(AMD64IndirectRegister64 destination) {
        assemble0384((byte) 0xF7, (byte) 0x06, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code divw  }<i>destination</i>
     */
    // Template#: 1702, Serial#: 1940
    public void divw(AMD64IndirectRegister64 destination) {
        assemble0385((byte) 0xF7, (byte) 0x06, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code divb  }<i>rel32</i>
     */
    // Template#: 1703, Serial#: 1754
    public void rip_divb___AL(int rel32) {
        assemble0239((byte) 0xF6, (byte) 0x06, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code divl  }<i>rel32</i>
     */
    // Template#: 1704, Serial#: 1817
    public void rip_divl(int rel32) {
        assemble0239((byte) 0xF7, (byte) 0x06, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code divq  }<i>rel32</i>
     */
    // Template#: 1705, Serial#: 1880
    public void rip_divq(int rel32) {
        assemble0386((byte) 0xF7, (byte) 0x06, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code divw  }<i>rel32</i>
     */
    // Template#: 1706, Serial#: 1943
    public void rip_divw(int rel32) {
        assemble0387((byte) 0xF7, (byte) 0x06, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code divb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1707, Serial#: 1784
    public void divb___AL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xF6, (byte) 0x06, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code divl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1708, Serial#: 1847
    public void divl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xF7, (byte) 0x06, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code divq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1709, Serial#: 1910
    public void divq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0388((byte) 0xF7, (byte) 0x06, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code divw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1710, Serial#: 1973
    public void divw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0389((byte) 0xF7, (byte) 0x06, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code divb  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1711, Serial#: 1753
    public void m_divb___AL(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xF6, (byte) 0x06, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code divl  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1712, Serial#: 1816
    public void m_divl(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xF7, (byte) 0x06, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code divq  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1713, Serial#: 1879
    public void m_divq(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0390((byte) 0xF7, (byte) 0x06, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code divw  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1714, Serial#: 1942
    public void m_divw(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0391((byte) 0xF7, (byte) 0x06, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code divb  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 1715, Serial#: 1783
    public void divb___AL(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xF6, (byte) 0x06, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code divl  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 1716, Serial#: 1846
    public void divl(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xF7, (byte) 0x06, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code divq  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 1717, Serial#: 1909
    public void divq(int disp32, AMD64IndirectRegister64 destination) {
        assemble0392((byte) 0xF7, (byte) 0x06, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code divw  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 1718, Serial#: 1972
    public void divw(int disp32, AMD64IndirectRegister64 destination) {
        assemble0393((byte) 0xF7, (byte) 0x06, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code divpd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1719, Serial#: 5493
    public void divpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x5E, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code divpd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1720, Serial#: 5492
    public void divpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x5E, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code divpd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1721, Serial#: 5489
    public void divpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x5E, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code divpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1722, Serial#: 5488
    public void divpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x5E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code divpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1723, Serial#: 5496
    public void divpd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x5E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code divpd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1724, Serial#: 5491
    public void rip_divpd(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x5E, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code divpd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1725, Serial#: 5495
    public void divpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x5E, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code divpd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1726, Serial#: 5490
    public void m_divpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x5E, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code divpd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1727, Serial#: 5494
    public void divpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x5E, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code divps  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1728, Serial#: 5421
    public void divps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0137((byte) 0x5E, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code divps  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1729, Serial#: 5420
    public void divps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0138((byte) 0x5E, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code divps  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1730, Serial#: 5417
    public void divps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0139((byte) 0x5E, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code divps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1731, Serial#: 5416
    public void divps(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0140((byte) 0x5E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code divps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1732, Serial#: 5424
    public void divps(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0141((byte) 0x5E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code divps  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1733, Serial#: 5419
    public void rip_divps(AMD64XMMRegister destination, int rel32) {
        assemble0142((byte) 0x5E, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code divps  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1734, Serial#: 5423
    public void divps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0143((byte) 0x5E, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code divps  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1735, Serial#: 5418
    public void m_divps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0144((byte) 0x5E, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code divps  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1736, Serial#: 5422
    public void divps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0145((byte) 0x5E, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code divsd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1737, Serial#: 5556
    public void divsd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0147((byte) 0x5E, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code divsd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1738, Serial#: 5555
    public void divsd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0148((byte) 0x5E, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code divsd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1739, Serial#: 5552
    public void divsd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0149((byte) 0x5E, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code divsd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1740, Serial#: 5551
    public void divsd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0150((byte) 0x5E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code divsd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1741, Serial#: 5559
    public void divsd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0151((byte) 0x5E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code divsd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1742, Serial#: 5554
    public void rip_divsd(AMD64XMMRegister destination, int rel32) {
        assemble0152((byte) 0x5E, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code divsd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1743, Serial#: 5558
    public void divsd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0153((byte) 0x5E, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code divsd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1744, Serial#: 5553
    public void m_divsd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0154((byte) 0x5E, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code divsd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1745, Serial#: 5557
    public void divsd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0155((byte) 0x5E, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code divss  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1746, Serial#: 5628
    public void divss(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0156((byte) 0x5E, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code divss  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 1747, Serial#: 5627
    public void divss(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0157((byte) 0x5E, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code divss  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1748, Serial#: 5624
    public void divss(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0158((byte) 0x5E, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code divss  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1749, Serial#: 5623
    public void divss(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0159((byte) 0x5E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code divss  }<i>destination</i>, <i>source</i>
     */
    // Template#: 1750, Serial#: 5631
    public void divss(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0160((byte) 0x5E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code divss  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 1751, Serial#: 5626
    public void rip_divss(AMD64XMMRegister destination, int rel32) {
        assemble0161((byte) 0x5E, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code divss  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1752, Serial#: 5630
    public void divss(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0162((byte) 0x5E, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code divss  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1753, Serial#: 5625
    public void m_divss(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0163((byte) 0x5E, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code divss  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 1754, Serial#: 5629
    public void divss(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0164((byte) 0x5E, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code emms  }
     */
    // Template#: 1755, Serial#: 3994
    public void emms() {
        assemble0252((byte) 0x77);
    }

    /**
     * Pseudo-external assembler syntax: {@code enter  }<i>imm16</i>, <i>imm8</i>
     */
    // Template#: 1756, Serial#: 2494
    public void enter(short imm16, byte imm8) {
        assemble0394((byte) 0xC8, imm16, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code f2xm1  }
     */
    // Template#: 1757, Serial#: 6741
    public void f2xm1() {
        assemble0395((byte) 0xF0);
    }

    /**
     * Pseudo-external assembler syntax: {@code fabs  }
     */
    // Template#: 1758, Serial#: 6731
    public void fabs() {
        assemble0395((byte) 0xE1);
    }

    /**
     * Pseudo-external assembler syntax: {@code fadds  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1759, Serial#: 2534
    public void fadds(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD8, (byte) 0x00, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code faddl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1760, Serial#: 2758
    public void faddl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDC, (byte) 0x00, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fadds  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1761, Serial#: 2533
    public void fadds(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD8, (byte) 0x00, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code faddl  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1762, Serial#: 2757
    public void faddl(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDC, (byte) 0x00, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fadds  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1763, Serial#: 2502
    public void fadds(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD8, (byte) 0x00, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code faddl  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1764, Serial#: 2726
    public void faddl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDC, (byte) 0x00, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fadds  }<i>destination</i>
     */
    // Template#: 1765, Serial#: 2501
    public void fadds(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD8, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code faddl  }<i>destination</i>
     */
    // Template#: 1766, Serial#: 2725
    public void faddl(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDC, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fadd  }<i>st_i</i>
     */
    // Template#: 1767, Serial#: 6718
    public void fadd_ST(FPStackRegister st_i) {
        assemble0396((byte) 0xC0, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fadd  }<i>st_i</i>
     */
    // Template#: 1768, Serial#: 6770
    public void fadd___ST(FPStackRegister st_i) {
        assemble0397((byte) 0xC0, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fadds  }<i>rel32</i>
     */
    // Template#: 1769, Serial#: 2504
    public void rip_fadds(int rel32) {
        assemble0239((byte) 0xD8, (byte) 0x00, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code faddl  }<i>rel32</i>
     */
    // Template#: 1770, Serial#: 2728
    public void rip_faddl(int rel32) {
        assemble0239((byte) 0xDC, (byte) 0x00, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fadds  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1771, Serial#: 2550
    public void fadds(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD8, (byte) 0x00, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code faddl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1772, Serial#: 2774
    public void faddl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDC, (byte) 0x00, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fadds  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1773, Serial#: 2503
    public void m_fadds(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD8, (byte) 0x00, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code faddl  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1774, Serial#: 2727
    public void m_faddl(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDC, (byte) 0x00, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fadds  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 1775, Serial#: 2549
    public void fadds(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD8, (byte) 0x00, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code faddl  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 1776, Serial#: 2773
    public void faddl(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDC, (byte) 0x00, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code faddp  }<i>st_i</i>
     */
    // Template#: 1777, Serial#: 6784
    public void faddp___ST(FPStackRegister st_i) {
        assemble0398((byte) 0xC0, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fbld  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1778, Serial#: 2936
    public void fbld(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDF, (byte) 0x04, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fbld  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1779, Serial#: 2935
    public void fbld(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDF, (byte) 0x04, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fbld  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1780, Serial#: 2914
    public void fbld(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDF, (byte) 0x04, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fbld  }<i>destination</i>
     */
    // Template#: 1781, Serial#: 2913
    public void fbld(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDF, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fbld  }<i>rel32</i>
     */
    // Template#: 1782, Serial#: 2916
    public void rip_fbld(int rel32) {
        assemble0239((byte) 0xDF, (byte) 0x04, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fbld  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1783, Serial#: 2950
    public void fbld(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDF, (byte) 0x04, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fbld  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1784, Serial#: 2915
    public void m_fbld(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDF, (byte) 0x04, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fbld  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 1785, Serial#: 2949
    public void fbld(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDF, (byte) 0x04, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fbstp  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1786, Serial#: 2940
    public void fbstp(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDF, (byte) 0x06, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fbstp  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1787, Serial#: 2939
    public void fbstp(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDF, (byte) 0x06, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fbstp  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1788, Serial#: 2922
    public void fbstp(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDF, (byte) 0x06, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fbstp  }<i>destination</i>
     */
    // Template#: 1789, Serial#: 2921
    public void fbstp(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDF, (byte) 0x06, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fbstp  }<i>rel32</i>
     */
    // Template#: 1790, Serial#: 2924
    public void rip_fbstp(int rel32) {
        assemble0239((byte) 0xDF, (byte) 0x06, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fbstp  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1791, Serial#: 2954
    public void fbstp(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDF, (byte) 0x06, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fbstp  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1792, Serial#: 2923
    public void m_fbstp(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDF, (byte) 0x06, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fbstp  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 1793, Serial#: 2953
    public void fbstp(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDF, (byte) 0x06, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fchs  }
     */
    // Template#: 1794, Serial#: 6730
    public void fchs() {
        assemble0395((byte) 0xE0);
    }

    /**
     * Pseudo-external assembler syntax: {@code fclex  }
     */
    // Template#: 1795, Serial#: 6766
    public void fclex() {
        assemble0399((byte) 0xE2);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcmovb  }<i>st_i</i>
     */
    // Template#: 1796, Serial#: 6757
    public void fcmovb_ST(FPStackRegister st_i) {
        assemble0400((byte) 0xC0, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcmovbe  }<i>st_i</i>
     */
    // Template#: 1797, Serial#: 6759
    public void fcmovbe_ST(FPStackRegister st_i) {
        assemble0400((byte) 0xD0, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcmove  }<i>st_i</i>
     */
    // Template#: 1798, Serial#: 6758
    public void fcmove_ST(FPStackRegister st_i) {
        assemble0400((byte) 0xC8, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcmovnb  }<i>st_i</i>
     */
    // Template#: 1799, Serial#: 6762
    public void fcmovnb_ST(FPStackRegister st_i) {
        assemble0401((byte) 0xC0, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcmovnbe  }<i>st_i</i>
     */
    // Template#: 1800, Serial#: 6764
    public void fcmovnbe_ST(FPStackRegister st_i) {
        assemble0401((byte) 0xD0, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcmovne  }<i>st_i</i>
     */
    // Template#: 1801, Serial#: 6763
    public void fcmovne_ST(FPStackRegister st_i) {
        assemble0401((byte) 0xC8, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcmovnu  }<i>st_i</i>
     */
    // Template#: 1802, Serial#: 6765
    public void fcmovnu_ST(FPStackRegister st_i) {
        assemble0401((byte) 0xD8, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcmovu  }<i>st_i</i>
     */
    // Template#: 1803, Serial#: 6760
    public void fcmovu_ST(FPStackRegister st_i) {
        assemble0400((byte) 0xD8, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcoms  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1804, Serial#: 2538
    public void fcoms(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD8, (byte) 0x02, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcoml  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1805, Serial#: 2762
    public void fcoml(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDC, (byte) 0x02, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcoms  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1806, Serial#: 2537
    public void fcoms(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD8, (byte) 0x02, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcoml  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1807, Serial#: 2761
    public void fcoml(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDC, (byte) 0x02, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcoms  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1808, Serial#: 2510
    public void fcoms(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD8, (byte) 0x02, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcoml  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1809, Serial#: 2734
    public void fcoml(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDC, (byte) 0x02, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcoms  }<i>destination</i>
     */
    // Template#: 1810, Serial#: 2509
    public void fcoms(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD8, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcoml  }<i>destination</i>
     */
    // Template#: 1811, Serial#: 2733
    public void fcoml(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDC, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcom  }<i>st_i</i>
     */
    // Template#: 1812, Serial#: 6720
    public void fcom(FPStackRegister st_i) {
        assemble0396((byte) 0xD0, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcoms  }<i>rel32</i>
     */
    // Template#: 1813, Serial#: 2512
    public void rip_fcoms(int rel32) {
        assemble0239((byte) 0xD8, (byte) 0x02, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcoml  }<i>rel32</i>
     */
    // Template#: 1814, Serial#: 2736
    public void rip_fcoml(int rel32) {
        assemble0239((byte) 0xDC, (byte) 0x02, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcoms  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1815, Serial#: 2554
    public void fcoms(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD8, (byte) 0x02, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcoml  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1816, Serial#: 2778
    public void fcoml(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDC, (byte) 0x02, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcoms  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1817, Serial#: 2511
    public void m_fcoms(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD8, (byte) 0x02, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcoml  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1818, Serial#: 2735
    public void m_fcoml(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDC, (byte) 0x02, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcoms  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 1819, Serial#: 2553
    public void fcoms(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD8, (byte) 0x02, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcoml  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 1820, Serial#: 2777
    public void fcoml(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDC, (byte) 0x02, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcom2  }<i>st_i</i>
     */
    // Template#: 1821, Serial#: 6772
    public void fcom2(FPStackRegister st_i) {
        assemble0397((byte) 0xD0, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcomi  }<i>st_i</i>
     */
    // Template#: 1822, Serial#: 6769
    public void fcomi_ST(FPStackRegister st_i) {
        assemble0401((byte) 0xF0, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcomip  }<i>st_i</i>
     */
    // Template#: 1823, Serial#: 6798
    public void fcomip_ST(FPStackRegister st_i) {
        assemble0402((byte) 0xF0, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcomps  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1824, Serial#: 2540
    public void fcomps(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD8, (byte) 0x03, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcompl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1825, Serial#: 2764
    public void fcompl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDC, (byte) 0x03, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcomps  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1826, Serial#: 2539
    public void fcomps(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD8, (byte) 0x03, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcompl  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1827, Serial#: 2763
    public void fcompl(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDC, (byte) 0x03, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcomps  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1828, Serial#: 2514
    public void fcomps(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD8, (byte) 0x03, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcompl  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1829, Serial#: 2738
    public void fcompl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDC, (byte) 0x03, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcomps  }<i>destination</i>
     */
    // Template#: 1830, Serial#: 2513
    public void fcomps(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD8, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcompl  }<i>destination</i>
     */
    // Template#: 1831, Serial#: 2737
    public void fcompl(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDC, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcomp  }<i>st_i</i>
     */
    // Template#: 1832, Serial#: 6721
    public void fcomp(FPStackRegister st_i) {
        assemble0396((byte) 0xD8, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcomps  }<i>rel32</i>
     */
    // Template#: 1833, Serial#: 2516
    public void rip_fcomps(int rel32) {
        assemble0239((byte) 0xD8, (byte) 0x03, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcompl  }<i>rel32</i>
     */
    // Template#: 1834, Serial#: 2740
    public void rip_fcompl(int rel32) {
        assemble0239((byte) 0xDC, (byte) 0x03, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcomps  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1835, Serial#: 2556
    public void fcomps(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD8, (byte) 0x03, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcompl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1836, Serial#: 2780
    public void fcompl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDC, (byte) 0x03, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcomps  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1837, Serial#: 2515
    public void m_fcomps(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD8, (byte) 0x03, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcompl  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1838, Serial#: 2739
    public void m_fcompl(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDC, (byte) 0x03, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcomps  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 1839, Serial#: 2555
    public void fcomps(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD8, (byte) 0x03, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcompl  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 1840, Serial#: 2779
    public void fcompl(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDC, (byte) 0x03, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcomp3  }<i>st_i</i>
     */
    // Template#: 1841, Serial#: 6773
    public void fcomp3(FPStackRegister st_i) {
        assemble0397((byte) 0xD8, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcomp5  }<i>st_i</i>
     */
    // Template#: 1842, Serial#: 6786
    public void fcomp5___ST(FPStackRegister st_i) {
        assemble0398((byte) 0xD0, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcompp  }
     */
    // Template#: 1843, Serial#: 6787
    public void fcompp() {
        assemble0403((byte) 0xD9);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcos  }
     */
    // Template#: 1844, Serial#: 6756
    public void fcos() {
        assemble0395((byte) 0xFF);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdecstp  }
     */
    // Template#: 1845, Serial#: 6747
    public void fdecstp() {
        assemble0395((byte) 0xF6);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivs  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1846, Serial#: 2546
    public void fdivs(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD8, (byte) 0x06, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1847, Serial#: 2770
    public void fdivl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDC, (byte) 0x06, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivs  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1848, Serial#: 2545
    public void fdivs(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD8, (byte) 0x06, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivl  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1849, Serial#: 2769
    public void fdivl(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDC, (byte) 0x06, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivs  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1850, Serial#: 2526
    public void fdivs(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD8, (byte) 0x06, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivl  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1851, Serial#: 2750
    public void fdivl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDC, (byte) 0x06, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivs  }<i>destination</i>
     */
    // Template#: 1852, Serial#: 2525
    public void fdivs(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD8, (byte) 0x06, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivl  }<i>destination</i>
     */
    // Template#: 1853, Serial#: 2749
    public void fdivl(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDC, (byte) 0x06, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdiv  }<i>st_i</i>
     */
    // Template#: 1854, Serial#: 6724
    public void fdiv_ST(FPStackRegister st_i) {
        assemble0396((byte) 0xF0, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdiv  }<i>st_i</i>
     */
    // Template#: 1855, Serial#: 6776
    public void fdiv___ST(FPStackRegister st_i) {
        assemble0397((byte) 0xF0, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivs  }<i>rel32</i>
     */
    // Template#: 1856, Serial#: 2528
    public void rip_fdivs(int rel32) {
        assemble0239((byte) 0xD8, (byte) 0x06, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivl  }<i>rel32</i>
     */
    // Template#: 1857, Serial#: 2752
    public void rip_fdivl(int rel32) {
        assemble0239((byte) 0xDC, (byte) 0x06, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivs  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1858, Serial#: 2562
    public void fdivs(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD8, (byte) 0x06, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1859, Serial#: 2786
    public void fdivl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDC, (byte) 0x06, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivs  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1860, Serial#: 2527
    public void m_fdivs(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD8, (byte) 0x06, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivl  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1861, Serial#: 2751
    public void m_fdivl(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDC, (byte) 0x06, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivs  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 1862, Serial#: 2561
    public void fdivs(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD8, (byte) 0x06, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivl  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 1863, Serial#: 2785
    public void fdivl(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDC, (byte) 0x06, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivrp  }<i>st_i</i>
     */
    // Template#: 1864, Serial#: 6791
    public void fdivp___ST(FPStackRegister st_i) {
        assemble0398((byte) 0xF8, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivrs  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1865, Serial#: 2548
    public void fdivrs(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD8, (byte) 0x07, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivrl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1866, Serial#: 2772
    public void fdivrl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDC, (byte) 0x07, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivrs  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1867, Serial#: 2547
    public void fdivrs(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD8, (byte) 0x07, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivrl  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1868, Serial#: 2771
    public void fdivrl(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDC, (byte) 0x07, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivrs  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1869, Serial#: 2530
    public void fdivrs(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD8, (byte) 0x07, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivrl  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1870, Serial#: 2754
    public void fdivrl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDC, (byte) 0x07, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivrs  }<i>destination</i>
     */
    // Template#: 1871, Serial#: 2529
    public void fdivrs(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD8, (byte) 0x07, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivrl  }<i>destination</i>
     */
    // Template#: 1872, Serial#: 2753
    public void fdivrl(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDC, (byte) 0x07, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivr  }<i>st_i</i>
     */
    // Template#: 1873, Serial#: 6725
    public void fdivr_ST(FPStackRegister st_i) {
        assemble0396((byte) 0xF8, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivr  }<i>st_i</i>
     */
    // Template#: 1874, Serial#: 6777
    public void fdivr___ST(FPStackRegister st_i) {
        assemble0397((byte) 0xF8, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivrs  }<i>rel32</i>
     */
    // Template#: 1875, Serial#: 2532
    public void rip_fdivrs(int rel32) {
        assemble0239((byte) 0xD8, (byte) 0x07, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivrl  }<i>rel32</i>
     */
    // Template#: 1876, Serial#: 2756
    public void rip_fdivrl(int rel32) {
        assemble0239((byte) 0xDC, (byte) 0x07, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivrs  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1877, Serial#: 2564
    public void fdivrs(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD8, (byte) 0x07, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivrl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1878, Serial#: 2788
    public void fdivrl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDC, (byte) 0x07, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivrs  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1879, Serial#: 2531
    public void m_fdivrs(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD8, (byte) 0x07, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivrl  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1880, Serial#: 2755
    public void m_fdivrl(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDC, (byte) 0x07, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivrs  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 1881, Serial#: 2563
    public void fdivrs(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD8, (byte) 0x07, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivrl  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 1882, Serial#: 2787
    public void fdivrl(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDC, (byte) 0x07, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivp  }<i>st_i</i>
     */
    // Template#: 1883, Serial#: 6790
    public void fdivrp___ST(FPStackRegister st_i) {
        assemble0398((byte) 0xF0, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code femms  }
     */
    // Template#: 1884, Serial#: 4865
    public void femms() {
        assemble0252((byte) 0x0E);
    }

    /**
     * Pseudo-external assembler syntax: {@code ffree  }<i>st_i</i>
     */
    // Template#: 1885, Serial#: 6778
    public void ffree(FPStackRegister st_i) {
        assemble0404((byte) 0xC0, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code ffreep  }<i>st_i</i>
     */
    // Template#: 1886, Serial#: 6792
    public void ffreep(FPStackRegister st_i) {
        assemble0402((byte) 0xC0, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fiaddl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1887, Serial#: 2654
    public void fiaddl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDA, (byte) 0x00, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fiadds  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1888, Serial#: 2870
    public void fiadds(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDE, (byte) 0x00, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fiaddl  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1889, Serial#: 2653
    public void fiaddl(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDA, (byte) 0x00, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fiadds  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1890, Serial#: 2869
    public void fiadds(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDE, (byte) 0x00, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fiaddl  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1891, Serial#: 2622
    public void fiaddl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDA, (byte) 0x00, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fiadds  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1892, Serial#: 2838
    public void fiadds(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDE, (byte) 0x00, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fiaddl  }<i>destination</i>
     */
    // Template#: 1893, Serial#: 2621
    public void fiaddl(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDA, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fiadds  }<i>destination</i>
     */
    // Template#: 1894, Serial#: 2837
    public void fiadds(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDE, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fiaddl  }<i>rel32</i>
     */
    // Template#: 1895, Serial#: 2624
    public void rip_fiaddl(int rel32) {
        assemble0239((byte) 0xDA, (byte) 0x00, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fiadds  }<i>rel32</i>
     */
    // Template#: 1896, Serial#: 2840
    public void rip_fiadds(int rel32) {
        assemble0239((byte) 0xDE, (byte) 0x00, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fiaddl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1897, Serial#: 2670
    public void fiaddl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDA, (byte) 0x00, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fiadds  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1898, Serial#: 2886
    public void fiadds(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDE, (byte) 0x00, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fiaddl  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1899, Serial#: 2623
    public void m_fiaddl(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDA, (byte) 0x00, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fiadds  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1900, Serial#: 2839
    public void m_fiadds(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDE, (byte) 0x00, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fiaddl  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 1901, Serial#: 2669
    public void fiaddl(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDA, (byte) 0x00, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fiadds  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 1902, Serial#: 2885
    public void fiadds(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDE, (byte) 0x00, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficoml  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1903, Serial#: 2658
    public void ficoml(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDA, (byte) 0x02, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficoms  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1904, Serial#: 2874
    public void ficoms(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDE, (byte) 0x02, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficoml  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1905, Serial#: 2657
    public void ficoml(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDA, (byte) 0x02, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficoms  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1906, Serial#: 2873
    public void ficoms(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDE, (byte) 0x02, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficoml  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1907, Serial#: 2630
    public void ficoml(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDA, (byte) 0x02, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficoms  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1908, Serial#: 2846
    public void ficoms(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDE, (byte) 0x02, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficoml  }<i>destination</i>
     */
    // Template#: 1909, Serial#: 2629
    public void ficoml(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDA, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficoms  }<i>destination</i>
     */
    // Template#: 1910, Serial#: 2845
    public void ficoms(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDE, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficoml  }<i>rel32</i>
     */
    // Template#: 1911, Serial#: 2632
    public void rip_ficoml(int rel32) {
        assemble0239((byte) 0xDA, (byte) 0x02, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficoms  }<i>rel32</i>
     */
    // Template#: 1912, Serial#: 2848
    public void rip_ficoms(int rel32) {
        assemble0239((byte) 0xDE, (byte) 0x02, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficoml  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1913, Serial#: 2674
    public void ficoml(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDA, (byte) 0x02, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficoms  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1914, Serial#: 2890
    public void ficoms(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDE, (byte) 0x02, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficoml  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1915, Serial#: 2631
    public void m_ficoml(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDA, (byte) 0x02, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficoms  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1916, Serial#: 2847
    public void m_ficoms(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDE, (byte) 0x02, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficoml  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 1917, Serial#: 2673
    public void ficoml(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDA, (byte) 0x02, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficoms  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 1918, Serial#: 2889
    public void ficoms(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDE, (byte) 0x02, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficompl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1919, Serial#: 2660
    public void ficompl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDA, (byte) 0x03, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficomps  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1920, Serial#: 2876
    public void ficomps(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDE, (byte) 0x03, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficompl  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1921, Serial#: 2659
    public void ficompl(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDA, (byte) 0x03, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficomps  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1922, Serial#: 2875
    public void ficomps(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDE, (byte) 0x03, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficompl  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1923, Serial#: 2634
    public void ficompl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDA, (byte) 0x03, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficomps  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1924, Serial#: 2850
    public void ficomps(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDE, (byte) 0x03, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficompl  }<i>destination</i>
     */
    // Template#: 1925, Serial#: 2633
    public void ficompl(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDA, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficomps  }<i>destination</i>
     */
    // Template#: 1926, Serial#: 2849
    public void ficomps(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDE, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficompl  }<i>rel32</i>
     */
    // Template#: 1927, Serial#: 2636
    public void rip_ficompl(int rel32) {
        assemble0239((byte) 0xDA, (byte) 0x03, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficomps  }<i>rel32</i>
     */
    // Template#: 1928, Serial#: 2852
    public void rip_ficomps(int rel32) {
        assemble0239((byte) 0xDE, (byte) 0x03, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficompl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1929, Serial#: 2676
    public void ficompl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDA, (byte) 0x03, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficomps  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1930, Serial#: 2892
    public void ficomps(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDE, (byte) 0x03, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficompl  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1931, Serial#: 2635
    public void m_ficompl(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDA, (byte) 0x03, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficomps  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1932, Serial#: 2851
    public void m_ficomps(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDE, (byte) 0x03, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficompl  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 1933, Serial#: 2675
    public void ficompl(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDA, (byte) 0x03, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficomps  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 1934, Serial#: 2891
    public void ficomps(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDE, (byte) 0x03, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1935, Serial#: 2666
    public void fidivl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDA, (byte) 0x06, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivs  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1936, Serial#: 2882
    public void fidivs(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDE, (byte) 0x06, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivl  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1937, Serial#: 2665
    public void fidivl(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDA, (byte) 0x06, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivs  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1938, Serial#: 2881
    public void fidivs(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDE, (byte) 0x06, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivl  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1939, Serial#: 2646
    public void fidivl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDA, (byte) 0x06, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivs  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1940, Serial#: 2862
    public void fidivs(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDE, (byte) 0x06, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivl  }<i>destination</i>
     */
    // Template#: 1941, Serial#: 2645
    public void fidivl(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDA, (byte) 0x06, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivs  }<i>destination</i>
     */
    // Template#: 1942, Serial#: 2861
    public void fidivs(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDE, (byte) 0x06, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivl  }<i>rel32</i>
     */
    // Template#: 1943, Serial#: 2648
    public void rip_fidivl(int rel32) {
        assemble0239((byte) 0xDA, (byte) 0x06, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivs  }<i>rel32</i>
     */
    // Template#: 1944, Serial#: 2864
    public void rip_fidivs(int rel32) {
        assemble0239((byte) 0xDE, (byte) 0x06, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1945, Serial#: 2682
    public void fidivl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDA, (byte) 0x06, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivs  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1946, Serial#: 2898
    public void fidivs(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDE, (byte) 0x06, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivl  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1947, Serial#: 2647
    public void m_fidivl(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDA, (byte) 0x06, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivs  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1948, Serial#: 2863
    public void m_fidivs(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDE, (byte) 0x06, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivl  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 1949, Serial#: 2681
    public void fidivl(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDA, (byte) 0x06, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivs  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 1950, Serial#: 2897
    public void fidivs(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDE, (byte) 0x06, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivrl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1951, Serial#: 2668
    public void fidivrl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDA, (byte) 0x07, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivrs  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1952, Serial#: 2884
    public void fidivrs(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDE, (byte) 0x07, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivrl  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1953, Serial#: 2667
    public void fidivrl(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDA, (byte) 0x07, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivrs  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1954, Serial#: 2883
    public void fidivrs(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDE, (byte) 0x07, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivrl  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1955, Serial#: 2650
    public void fidivrl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDA, (byte) 0x07, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivrs  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1956, Serial#: 2866
    public void fidivrs(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDE, (byte) 0x07, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivrl  }<i>destination</i>
     */
    // Template#: 1957, Serial#: 2649
    public void fidivrl(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDA, (byte) 0x07, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivrs  }<i>destination</i>
     */
    // Template#: 1958, Serial#: 2865
    public void fidivrs(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDE, (byte) 0x07, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivrl  }<i>rel32</i>
     */
    // Template#: 1959, Serial#: 2652
    public void rip_fidivrl(int rel32) {
        assemble0239((byte) 0xDA, (byte) 0x07, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivrs  }<i>rel32</i>
     */
    // Template#: 1960, Serial#: 2868
    public void rip_fidivrs(int rel32) {
        assemble0239((byte) 0xDE, (byte) 0x07, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivrl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1961, Serial#: 2684
    public void fidivrl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDA, (byte) 0x07, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivrs  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1962, Serial#: 2900
    public void fidivrs(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDE, (byte) 0x07, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivrl  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1963, Serial#: 2651
    public void m_fidivrl(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDA, (byte) 0x07, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivrs  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1964, Serial#: 2867
    public void m_fidivrs(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDE, (byte) 0x07, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivrl  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 1965, Serial#: 2683
    public void fidivrl(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDA, (byte) 0x07, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivrs  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 1966, Serial#: 2899
    public void fidivrs(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDE, (byte) 0x07, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fildl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1967, Serial#: 2706
    public void fildl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDB, (byte) 0x00, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code filds  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1968, Serial#: 2930
    public void filds(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDF, (byte) 0x00, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fildq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1969, Serial#: 2938
    public void fildq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDF, (byte) 0x05, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fildl  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1970, Serial#: 2705
    public void fildl(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDB, (byte) 0x00, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code filds  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1971, Serial#: 2929
    public void filds(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDF, (byte) 0x00, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fildq  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1972, Serial#: 2937
    public void fildq(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDF, (byte) 0x05, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fildl  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1973, Serial#: 2686
    public void fildl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDB, (byte) 0x00, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code filds  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1974, Serial#: 2902
    public void filds(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDF, (byte) 0x00, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fildq  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1975, Serial#: 2918
    public void fildq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDF, (byte) 0x05, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fildl  }<i>destination</i>
     */
    // Template#: 1976, Serial#: 2685
    public void fildl(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDB, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code filds  }<i>destination</i>
     */
    // Template#: 1977, Serial#: 2901
    public void filds(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDF, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fildq  }<i>destination</i>
     */
    // Template#: 1978, Serial#: 2917
    public void fildq(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDF, (byte) 0x05, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fildl  }<i>rel32</i>
     */
    // Template#: 1979, Serial#: 2688
    public void rip_fildl(int rel32) {
        assemble0239((byte) 0xDB, (byte) 0x00, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code filds  }<i>rel32</i>
     */
    // Template#: 1980, Serial#: 2904
    public void rip_filds(int rel32) {
        assemble0239((byte) 0xDF, (byte) 0x00, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fildq  }<i>rel32</i>
     */
    // Template#: 1981, Serial#: 2920
    public void rip_fildq(int rel32) {
        assemble0239((byte) 0xDF, (byte) 0x05, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fildl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1982, Serial#: 2716
    public void fildl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDB, (byte) 0x00, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code filds  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1983, Serial#: 2944
    public void filds(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDF, (byte) 0x00, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fildq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1984, Serial#: 2952
    public void fildq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDF, (byte) 0x05, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fildl  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1985, Serial#: 2687
    public void m_fildl(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDB, (byte) 0x00, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code filds  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1986, Serial#: 2903
    public void m_filds(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDF, (byte) 0x00, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fildq  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1987, Serial#: 2919
    public void m_fildq(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDF, (byte) 0x05, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fildl  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 1988, Serial#: 2715
    public void fildl(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDB, (byte) 0x00, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code filds  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 1989, Serial#: 2943
    public void filds(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDF, (byte) 0x00, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fildq  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 1990, Serial#: 2951
    public void fildq(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDF, (byte) 0x05, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fimull  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1991, Serial#: 2656
    public void fimull(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDA, (byte) 0x01, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fimuls  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1992, Serial#: 2872
    public void fimuls(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDE, (byte) 0x01, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fimull  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1993, Serial#: 2655
    public void fimull(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDA, (byte) 0x01, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fimuls  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 1994, Serial#: 2871
    public void fimuls(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDE, (byte) 0x01, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fimull  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1995, Serial#: 2626
    public void fimull(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDA, (byte) 0x01, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fimuls  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 1996, Serial#: 2842
    public void fimuls(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDE, (byte) 0x01, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fimull  }<i>destination</i>
     */
    // Template#: 1997, Serial#: 2625
    public void fimull(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDA, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fimuls  }<i>destination</i>
     */
    // Template#: 1998, Serial#: 2841
    public void fimuls(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDE, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fimull  }<i>rel32</i>
     */
    // Template#: 1999, Serial#: 2628
    public void rip_fimull(int rel32) {
        assemble0239((byte) 0xDA, (byte) 0x01, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fimuls  }<i>rel32</i>
     */
    // Template#: 2000, Serial#: 2844
    public void rip_fimuls(int rel32) {
        assemble0239((byte) 0xDE, (byte) 0x01, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fimull  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2001, Serial#: 2672
    public void fimull(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDA, (byte) 0x01, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fimuls  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2002, Serial#: 2888
    public void fimuls(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDE, (byte) 0x01, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fimull  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2003, Serial#: 2627
    public void m_fimull(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDA, (byte) 0x01, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fimuls  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2004, Serial#: 2843
    public void m_fimuls(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDE, (byte) 0x01, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fimull  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2005, Serial#: 2671
    public void fimull(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDA, (byte) 0x01, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fimuls  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2006, Serial#: 2887
    public void fimuls(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDE, (byte) 0x01, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fincstp  }
     */
    // Template#: 2007, Serial#: 6748
    public void fincstp() {
        assemble0395((byte) 0xF7);
    }

    /**
     * Pseudo-external assembler syntax: {@code finit  }
     */
    // Template#: 2008, Serial#: 6767
    public void finit() {
        assemble0399((byte) 0xE3);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2009, Serial#: 2708
    public void fistl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDB, (byte) 0x02, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fists  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2010, Serial#: 2932
    public void fists(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDF, (byte) 0x02, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistl  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2011, Serial#: 2707
    public void fistl(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDB, (byte) 0x02, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fists  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2012, Serial#: 2931
    public void fists(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDF, (byte) 0x02, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistl  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2013, Serial#: 2690
    public void fistl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDB, (byte) 0x02, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fists  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2014, Serial#: 2906
    public void fists(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDF, (byte) 0x02, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistl  }<i>destination</i>
     */
    // Template#: 2015, Serial#: 2689
    public void fistl(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDB, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fists  }<i>destination</i>
     */
    // Template#: 2016, Serial#: 2905
    public void fists(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDF, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistl  }<i>rel32</i>
     */
    // Template#: 2017, Serial#: 2692
    public void rip_fistl(int rel32) {
        assemble0239((byte) 0xDB, (byte) 0x02, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fists  }<i>rel32</i>
     */
    // Template#: 2018, Serial#: 2908
    public void rip_fists(int rel32) {
        assemble0239((byte) 0xDF, (byte) 0x02, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2019, Serial#: 2718
    public void fistl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDB, (byte) 0x02, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fists  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2020, Serial#: 2946
    public void fists(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDF, (byte) 0x02, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistl  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2021, Serial#: 2691
    public void m_fistl(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDB, (byte) 0x02, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fists  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2022, Serial#: 2907
    public void m_fists(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDF, (byte) 0x02, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistl  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2023, Serial#: 2717
    public void fistl(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDB, (byte) 0x02, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fists  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2024, Serial#: 2945
    public void fists(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDF, (byte) 0x02, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistpl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2025, Serial#: 2710
    public void fistpl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDB, (byte) 0x03, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistps  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2026, Serial#: 2934
    public void fistps(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDF, (byte) 0x03, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistpq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2027, Serial#: 2942
    public void fistpq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDF, (byte) 0x07, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistpl  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2028, Serial#: 2709
    public void fistpl(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDB, (byte) 0x03, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistps  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2029, Serial#: 2933
    public void fistps(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDF, (byte) 0x03, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistpq  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2030, Serial#: 2941
    public void fistpq(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDF, (byte) 0x07, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistpl  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2031, Serial#: 2694
    public void fistpl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDB, (byte) 0x03, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistps  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2032, Serial#: 2910
    public void fistps(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDF, (byte) 0x03, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistpq  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2033, Serial#: 2926
    public void fistpq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDF, (byte) 0x07, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistpl  }<i>destination</i>
     */
    // Template#: 2034, Serial#: 2693
    public void fistpl(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDB, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistps  }<i>destination</i>
     */
    // Template#: 2035, Serial#: 2909
    public void fistps(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDF, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistpq  }<i>destination</i>
     */
    // Template#: 2036, Serial#: 2925
    public void fistpq(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDF, (byte) 0x07, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistpl  }<i>rel32</i>
     */
    // Template#: 2037, Serial#: 2696
    public void rip_fistpl(int rel32) {
        assemble0239((byte) 0xDB, (byte) 0x03, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistps  }<i>rel32</i>
     */
    // Template#: 2038, Serial#: 2912
    public void rip_fistps(int rel32) {
        assemble0239((byte) 0xDF, (byte) 0x03, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistpq  }<i>rel32</i>
     */
    // Template#: 2039, Serial#: 2928
    public void rip_fistpq(int rel32) {
        assemble0239((byte) 0xDF, (byte) 0x07, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistpl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2040, Serial#: 2720
    public void fistpl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDB, (byte) 0x03, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistps  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2041, Serial#: 2948
    public void fistps(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDF, (byte) 0x03, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistpq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2042, Serial#: 2956
    public void fistpq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDF, (byte) 0x07, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistpl  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2043, Serial#: 2695
    public void m_fistpl(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDB, (byte) 0x03, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistps  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2044, Serial#: 2911
    public void m_fistps(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDF, (byte) 0x03, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistpq  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2045, Serial#: 2927
    public void m_fistpq(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDF, (byte) 0x07, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistpl  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2046, Serial#: 2719
    public void fistpl(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDB, (byte) 0x03, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistps  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2047, Serial#: 2947
    public void fistps(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDF, (byte) 0x03, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistpq  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2048, Serial#: 2955
    public void fistpq(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDF, (byte) 0x07, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2049, Serial#: 2662
    public void fisubl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDA, (byte) 0x04, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubs  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2050, Serial#: 2878
    public void fisubs(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDE, (byte) 0x04, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubl  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2051, Serial#: 2661
    public void fisubl(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDA, (byte) 0x04, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubs  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2052, Serial#: 2877
    public void fisubs(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDE, (byte) 0x04, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubl  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2053, Serial#: 2638
    public void fisubl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDA, (byte) 0x04, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubs  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2054, Serial#: 2854
    public void fisubs(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDE, (byte) 0x04, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubl  }<i>destination</i>
     */
    // Template#: 2055, Serial#: 2637
    public void fisubl(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDA, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubs  }<i>destination</i>
     */
    // Template#: 2056, Serial#: 2853
    public void fisubs(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDE, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubl  }<i>rel32</i>
     */
    // Template#: 2057, Serial#: 2640
    public void rip_fisubl(int rel32) {
        assemble0239((byte) 0xDA, (byte) 0x04, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubs  }<i>rel32</i>
     */
    // Template#: 2058, Serial#: 2856
    public void rip_fisubs(int rel32) {
        assemble0239((byte) 0xDE, (byte) 0x04, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2059, Serial#: 2678
    public void fisubl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDA, (byte) 0x04, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubs  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2060, Serial#: 2894
    public void fisubs(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDE, (byte) 0x04, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubl  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2061, Serial#: 2639
    public void m_fisubl(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDA, (byte) 0x04, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubs  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2062, Serial#: 2855
    public void m_fisubs(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDE, (byte) 0x04, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubl  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2063, Serial#: 2677
    public void fisubl(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDA, (byte) 0x04, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubs  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2064, Serial#: 2893
    public void fisubs(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDE, (byte) 0x04, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubrl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2065, Serial#: 2664
    public void fisubrl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDA, (byte) 0x05, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubrs  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2066, Serial#: 2880
    public void fisubrs(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDE, (byte) 0x05, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubrl  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2067, Serial#: 2663
    public void fisubrl(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDA, (byte) 0x05, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubrs  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2068, Serial#: 2879
    public void fisubrs(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDE, (byte) 0x05, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubrl  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2069, Serial#: 2642
    public void fisubrl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDA, (byte) 0x05, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubrs  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2070, Serial#: 2858
    public void fisubrs(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDE, (byte) 0x05, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubrl  }<i>destination</i>
     */
    // Template#: 2071, Serial#: 2641
    public void fisubrl(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDA, (byte) 0x05, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubrs  }<i>destination</i>
     */
    // Template#: 2072, Serial#: 2857
    public void fisubrs(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDE, (byte) 0x05, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubrl  }<i>rel32</i>
     */
    // Template#: 2073, Serial#: 2644
    public void rip_fisubrl(int rel32) {
        assemble0239((byte) 0xDA, (byte) 0x05, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubrs  }<i>rel32</i>
     */
    // Template#: 2074, Serial#: 2860
    public void rip_fisubrs(int rel32) {
        assemble0239((byte) 0xDE, (byte) 0x05, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubrl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2075, Serial#: 2680
    public void fisubrl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDA, (byte) 0x05, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubrs  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2076, Serial#: 2896
    public void fisubrs(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDE, (byte) 0x05, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubrl  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2077, Serial#: 2643
    public void m_fisubrl(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDA, (byte) 0x05, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubrs  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2078, Serial#: 2859
    public void m_fisubrs(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDE, (byte) 0x05, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubrl  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2079, Serial#: 2679
    public void fisubrl(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDA, (byte) 0x05, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubrs  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2080, Serial#: 2895
    public void fisubrs(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDE, (byte) 0x05, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code flds  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2081, Serial#: 2594
    public void flds(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD9, (byte) 0x00, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldt  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2082, Serial#: 2712
    public void fldt(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDB, (byte) 0x05, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2083, Serial#: 2814
    public void fldl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDD, (byte) 0x00, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code flds  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2084, Serial#: 2593
    public void flds(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD9, (byte) 0x00, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldt  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2085, Serial#: 2711
    public void fldt(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDB, (byte) 0x05, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldl  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2086, Serial#: 2813
    public void fldl(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDD, (byte) 0x00, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code flds  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2087, Serial#: 2566
    public void flds(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD9, (byte) 0x00, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldt  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2088, Serial#: 2698
    public void fldt(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDB, (byte) 0x05, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldl  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2089, Serial#: 2790
    public void fldl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDD, (byte) 0x00, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code flds  }<i>destination</i>
     */
    // Template#: 2090, Serial#: 2565
    public void flds(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD9, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldt  }<i>destination</i>
     */
    // Template#: 2091, Serial#: 2697
    public void fldt(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDB, (byte) 0x05, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldl  }<i>destination</i>
     */
    // Template#: 2092, Serial#: 2789
    public void fldl(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDD, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fld  }<i>st_i</i>
     */
    // Template#: 2093, Serial#: 6726
    public void fld(FPStackRegister st_i) {
        assemble0405((byte) 0xC0, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code flds  }<i>rel32</i>
     */
    // Template#: 2094, Serial#: 2568
    public void rip_flds(int rel32) {
        assemble0239((byte) 0xD9, (byte) 0x00, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldt  }<i>rel32</i>
     */
    // Template#: 2095, Serial#: 2700
    public void rip_fldt(int rel32) {
        assemble0239((byte) 0xDB, (byte) 0x05, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldl  }<i>rel32</i>
     */
    // Template#: 2096, Serial#: 2792
    public void rip_fldl(int rel32) {
        assemble0239((byte) 0xDD, (byte) 0x00, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code flds  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2097, Serial#: 2608
    public void flds(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD9, (byte) 0x00, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldt  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2098, Serial#: 2722
    public void fldt(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDB, (byte) 0x05, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2099, Serial#: 2826
    public void fldl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDD, (byte) 0x00, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code flds  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2100, Serial#: 2567
    public void m_flds(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD9, (byte) 0x00, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldt  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2101, Serial#: 2699
    public void m_fldt(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDB, (byte) 0x05, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldl  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2102, Serial#: 2791
    public void m_fldl(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDD, (byte) 0x00, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code flds  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2103, Serial#: 2607
    public void flds(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD9, (byte) 0x00, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldt  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2104, Serial#: 2721
    public void fldt(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDB, (byte) 0x05, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldl  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2105, Serial#: 2825
    public void fldl(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDD, (byte) 0x00, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fld1  }
     */
    // Template#: 2106, Serial#: 6734
    public void fld1() {
        assemble0395((byte) 0xE8);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldcw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2107, Serial#: 2602
    public void fldcw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD9, (byte) 0x05, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldcw  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2108, Serial#: 2601
    public void fldcw(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD9, (byte) 0x05, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldcw  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2109, Serial#: 2582
    public void fldcw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD9, (byte) 0x05, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldcw  }<i>destination</i>
     */
    // Template#: 2110, Serial#: 2581
    public void fldcw(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD9, (byte) 0x05, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldcw  }<i>rel32</i>
     */
    // Template#: 2111, Serial#: 2584
    public void rip_fldcw(int rel32) {
        assemble0239((byte) 0xD9, (byte) 0x05, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldcw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2112, Serial#: 2616
    public void fldcw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD9, (byte) 0x05, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldcw  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2113, Serial#: 2583
    public void m_fldcw(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD9, (byte) 0x05, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldcw  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2114, Serial#: 2615
    public void fldcw(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD9, (byte) 0x05, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldenv  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2115, Serial#: 2600
    public void fldenv(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD9, (byte) 0x04, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldenv  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2116, Serial#: 2599
    public void fldenv(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD9, (byte) 0x04, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldenv  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2117, Serial#: 2578
    public void fldenv(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD9, (byte) 0x04, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldenv  }<i>destination</i>
     */
    // Template#: 2118, Serial#: 2577
    public void fldenv(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD9, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldenv  }<i>rel32</i>
     */
    // Template#: 2119, Serial#: 2580
    public void rip_fldenv(int rel32) {
        assemble0239((byte) 0xD9, (byte) 0x04, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldenv  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2120, Serial#: 2614
    public void fldenv(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD9, (byte) 0x04, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldenv  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2121, Serial#: 2579
    public void m_fldenv(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD9, (byte) 0x04, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldenv  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2122, Serial#: 2613
    public void fldenv(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD9, (byte) 0x04, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldl2e  }
     */
    // Template#: 2123, Serial#: 6736
    public void fldl2e() {
        assemble0395((byte) 0xEA);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldl2t  }
     */
    // Template#: 2124, Serial#: 6735
    public void fldl2t() {
        assemble0395((byte) 0xE9);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldlg2  }
     */
    // Template#: 2125, Serial#: 6738
    public void fldlg2() {
        assemble0395((byte) 0xEC);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldln2  }
     */
    // Template#: 2126, Serial#: 6739
    public void fldln2() {
        assemble0395((byte) 0xED);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldpi  }
     */
    // Template#: 2127, Serial#: 6737
    public void fldpi() {
        assemble0395((byte) 0xEB);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldz  }
     */
    // Template#: 2128, Serial#: 6740
    public void fldz() {
        assemble0395((byte) 0xEE);
    }

    /**
     * Pseudo-external assembler syntax: {@code fmuls  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2129, Serial#: 2536
    public void fmuls(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD8, (byte) 0x01, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fmull  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2130, Serial#: 2760
    public void fmull(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDC, (byte) 0x01, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fmuls  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2131, Serial#: 2535
    public void fmuls(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD8, (byte) 0x01, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fmull  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2132, Serial#: 2759
    public void fmull(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDC, (byte) 0x01, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fmuls  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2133, Serial#: 2506
    public void fmuls(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD8, (byte) 0x01, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fmull  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2134, Serial#: 2730
    public void fmull(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDC, (byte) 0x01, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fmuls  }<i>destination</i>
     */
    // Template#: 2135, Serial#: 2505
    public void fmuls(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD8, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fmull  }<i>destination</i>
     */
    // Template#: 2136, Serial#: 2729
    public void fmull(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDC, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fmul  }<i>st_i</i>
     */
    // Template#: 2137, Serial#: 6719
    public void fmul_ST(FPStackRegister st_i) {
        assemble0396((byte) 0xC8, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fmul  }<i>st_i</i>
     */
    // Template#: 2138, Serial#: 6771
    public void fmul___ST(FPStackRegister st_i) {
        assemble0397((byte) 0xC8, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fmuls  }<i>rel32</i>
     */
    // Template#: 2139, Serial#: 2508
    public void rip_fmuls(int rel32) {
        assemble0239((byte) 0xD8, (byte) 0x01, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fmull  }<i>rel32</i>
     */
    // Template#: 2140, Serial#: 2732
    public void rip_fmull(int rel32) {
        assemble0239((byte) 0xDC, (byte) 0x01, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fmuls  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2141, Serial#: 2552
    public void fmuls(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD8, (byte) 0x01, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fmull  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2142, Serial#: 2776
    public void fmull(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDC, (byte) 0x01, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fmuls  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2143, Serial#: 2507
    public void m_fmuls(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD8, (byte) 0x01, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fmull  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2144, Serial#: 2731
    public void m_fmull(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDC, (byte) 0x01, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fmuls  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2145, Serial#: 2551
    public void fmuls(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD8, (byte) 0x01, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fmull  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2146, Serial#: 2775
    public void fmull(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDC, (byte) 0x01, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fmulp  }<i>st_i</i>
     */
    // Template#: 2147, Serial#: 6785
    public void fmulp___ST(FPStackRegister st_i) {
        assemble0398((byte) 0xC8, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fnop  }
     */
    // Template#: 2148, Serial#: 6728
    public void fnop() {
        assemble0395((byte) 0xD0);
    }

    /**
     * Pseudo-external assembler syntax: {@code fpatan  }
     */
    // Template#: 2149, Serial#: 6744
    public void fpatan() {
        assemble0395((byte) 0xF3);
    }

    /**
     * Pseudo-external assembler syntax: {@code fprem  }
     */
    // Template#: 2150, Serial#: 6749
    public void fprem() {
        assemble0395((byte) 0xF8);
    }

    /**
     * Pseudo-external assembler syntax: {@code fprem1  }
     */
    // Template#: 2151, Serial#: 6746
    public void fprem1() {
        assemble0395((byte) 0xF5);
    }

    /**
     * Pseudo-external assembler syntax: {@code fptan  }
     */
    // Template#: 2152, Serial#: 6743
    public void fptan() {
        assemble0395((byte) 0xF2);
    }

    /**
     * Pseudo-external assembler syntax: {@code frndint  }
     */
    // Template#: 2153, Serial#: 6753
    public void frndint() {
        assemble0395((byte) 0xFC);
    }

    /**
     * Pseudo-external assembler syntax: {@code frstor  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2154, Serial#: 2820
    public void frstor(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDD, (byte) 0x04, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code frstor  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2155, Serial#: 2819
    public void frstor(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDD, (byte) 0x04, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code frstor  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2156, Serial#: 2802
    public void frstor(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDD, (byte) 0x04, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code frstor  }<i>destination</i>
     */
    // Template#: 2157, Serial#: 2801
    public void frstor(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDD, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code frstor  }<i>rel32</i>
     */
    // Template#: 2158, Serial#: 2804
    public void rip_frstor(int rel32) {
        assemble0239((byte) 0xDD, (byte) 0x04, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code frstor  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2159, Serial#: 2832
    public void frstor(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDD, (byte) 0x04, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code frstor  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2160, Serial#: 2803
    public void m_frstor(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDD, (byte) 0x04, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code frstor  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2161, Serial#: 2831
    public void frstor(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDD, (byte) 0x04, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsave  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2162, Serial#: 2822
    public void fsave(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDD, (byte) 0x06, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsave  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2163, Serial#: 2821
    public void fsave(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDD, (byte) 0x06, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsave  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2164, Serial#: 2806
    public void fsave(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDD, (byte) 0x06, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsave  }<i>destination</i>
     */
    // Template#: 2165, Serial#: 2805
    public void fsave(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDD, (byte) 0x06, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsave  }<i>rel32</i>
     */
    // Template#: 2166, Serial#: 2808
    public void rip_fsave(int rel32) {
        assemble0239((byte) 0xDD, (byte) 0x06, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsave  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2167, Serial#: 2834
    public void fsave(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDD, (byte) 0x06, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsave  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2168, Serial#: 2807
    public void m_fsave(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDD, (byte) 0x06, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsave  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2169, Serial#: 2833
    public void fsave(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDD, (byte) 0x06, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fscale  }
     */
    // Template#: 2170, Serial#: 6754
    public void fscale() {
        assemble0395((byte) 0xFD);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsin  }
     */
    // Template#: 2171, Serial#: 6755
    public void fsin() {
        assemble0395((byte) 0xFE);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsincos  }
     */
    // Template#: 2172, Serial#: 6752
    public void fsincos() {
        assemble0395((byte) 0xFB);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsqrt  }
     */
    // Template#: 2173, Serial#: 6751
    public void fsqrt() {
        assemble0395((byte) 0xFA);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsts  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2174, Serial#: 2596
    public void fsts(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD9, (byte) 0x02, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2175, Serial#: 2816
    public void fstl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDD, (byte) 0x02, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsts  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2176, Serial#: 2595
    public void fsts(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD9, (byte) 0x02, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstl  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2177, Serial#: 2815
    public void fstl(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDD, (byte) 0x02, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsts  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2178, Serial#: 2570
    public void fsts(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD9, (byte) 0x02, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstl  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2179, Serial#: 2794
    public void fstl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDD, (byte) 0x02, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsts  }<i>destination</i>
     */
    // Template#: 2180, Serial#: 2569
    public void fsts(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD9, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstl  }<i>destination</i>
     */
    // Template#: 2181, Serial#: 2793
    public void fstl(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDD, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fst  }<i>st_i</i>
     */
    // Template#: 2182, Serial#: 6780
    public void fst(FPStackRegister st_i) {
        assemble0404((byte) 0xD0, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsts  }<i>rel32</i>
     */
    // Template#: 2183, Serial#: 2572
    public void rip_fsts(int rel32) {
        assemble0239((byte) 0xD9, (byte) 0x02, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstl  }<i>rel32</i>
     */
    // Template#: 2184, Serial#: 2796
    public void rip_fstl(int rel32) {
        assemble0239((byte) 0xDD, (byte) 0x02, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsts  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2185, Serial#: 2610
    public void fsts(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD9, (byte) 0x02, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2186, Serial#: 2828
    public void fstl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDD, (byte) 0x02, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsts  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2187, Serial#: 2571
    public void m_fsts(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD9, (byte) 0x02, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstl  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2188, Serial#: 2795
    public void m_fstl(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDD, (byte) 0x02, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsts  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2189, Serial#: 2609
    public void fsts(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD9, (byte) 0x02, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstl  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2190, Serial#: 2827
    public void fstl(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDD, (byte) 0x02, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstcw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2191, Serial#: 2606
    public void fstcw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD9, (byte) 0x07, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstcw  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2192, Serial#: 2605
    public void fstcw(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD9, (byte) 0x07, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstcw  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2193, Serial#: 2590
    public void fstcw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD9, (byte) 0x07, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstcw  }<i>destination</i>
     */
    // Template#: 2194, Serial#: 2589
    public void fstcw(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD9, (byte) 0x07, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstcw  }<i>rel32</i>
     */
    // Template#: 2195, Serial#: 2592
    public void rip_fstcw(int rel32) {
        assemble0239((byte) 0xD9, (byte) 0x07, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstcw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2196, Serial#: 2620
    public void fstcw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD9, (byte) 0x07, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstcw  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2197, Serial#: 2591
    public void m_fstcw(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD9, (byte) 0x07, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstcw  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2198, Serial#: 2619
    public void fstcw(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD9, (byte) 0x07, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstenv  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2199, Serial#: 2604
    public void fstenv(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD9, (byte) 0x06, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstenv  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2200, Serial#: 2603
    public void fstenv(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD9, (byte) 0x06, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstenv  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2201, Serial#: 2586
    public void fstenv(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD9, (byte) 0x06, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstenv  }<i>destination</i>
     */
    // Template#: 2202, Serial#: 2585
    public void fstenv(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD9, (byte) 0x06, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstenv  }<i>rel32</i>
     */
    // Template#: 2203, Serial#: 2588
    public void rip_fstenv(int rel32) {
        assemble0239((byte) 0xD9, (byte) 0x06, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstenv  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2204, Serial#: 2618
    public void fstenv(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD9, (byte) 0x06, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstenv  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2205, Serial#: 2587
    public void m_fstenv(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD9, (byte) 0x06, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstenv  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2206, Serial#: 2617
    public void fstenv(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD9, (byte) 0x06, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstps  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2207, Serial#: 2598
    public void fstps(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD9, (byte) 0x03, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstpt  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2208, Serial#: 2714
    public void fstpt(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDB, (byte) 0x07, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstpl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2209, Serial#: 2818
    public void fstpl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDD, (byte) 0x03, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstps  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2210, Serial#: 2597
    public void fstps(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD9, (byte) 0x03, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstpt  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2211, Serial#: 2713
    public void fstpt(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDB, (byte) 0x07, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstpl  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2212, Serial#: 2817
    public void fstpl(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDD, (byte) 0x03, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstps  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2213, Serial#: 2574
    public void fstps(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD9, (byte) 0x03, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstpt  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2214, Serial#: 2702
    public void fstpt(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDB, (byte) 0x07, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstpl  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2215, Serial#: 2798
    public void fstpl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDD, (byte) 0x03, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstps  }<i>destination</i>
     */
    // Template#: 2216, Serial#: 2573
    public void fstps(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD9, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstpt  }<i>destination</i>
     */
    // Template#: 2217, Serial#: 2701
    public void fstpt(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDB, (byte) 0x07, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstpl  }<i>destination</i>
     */
    // Template#: 2218, Serial#: 2797
    public void fstpl(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDD, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstp  }<i>st_i</i>
     */
    // Template#: 2219, Serial#: 6781
    public void fstp(FPStackRegister st_i) {
        assemble0404((byte) 0xD8, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstps  }<i>rel32</i>
     */
    // Template#: 2220, Serial#: 2576
    public void rip_fstps(int rel32) {
        assemble0239((byte) 0xD9, (byte) 0x03, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstpt  }<i>rel32</i>
     */
    // Template#: 2221, Serial#: 2704
    public void rip_fstpt(int rel32) {
        assemble0239((byte) 0xDB, (byte) 0x07, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstpl  }<i>rel32</i>
     */
    // Template#: 2222, Serial#: 2800
    public void rip_fstpl(int rel32) {
        assemble0239((byte) 0xDD, (byte) 0x03, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstps  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2223, Serial#: 2612
    public void fstps(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD9, (byte) 0x03, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstpt  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2224, Serial#: 2724
    public void fstpt(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDB, (byte) 0x07, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstpl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2225, Serial#: 2830
    public void fstpl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDD, (byte) 0x03, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstps  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2226, Serial#: 2575
    public void m_fstps(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD9, (byte) 0x03, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstpt  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2227, Serial#: 2703
    public void m_fstpt(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDB, (byte) 0x07, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstpl  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2228, Serial#: 2799
    public void m_fstpl(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDD, (byte) 0x03, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstps  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2229, Serial#: 2611
    public void fstps(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD9, (byte) 0x03, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstpt  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2230, Serial#: 2723
    public void fstpt(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDB, (byte) 0x07, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstpl  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2231, Serial#: 2829
    public void fstpl(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDD, (byte) 0x03, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstp1  }<i>st_i</i>
     */
    // Template#: 2232, Serial#: 6729
    public void fstp1(FPStackRegister st_i) {
        assemble0405((byte) 0xD8, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstp8  }<i>st_i</i>
     */
    // Template#: 2233, Serial#: 6794
    public void fstp8(FPStackRegister st_i) {
        assemble0402((byte) 0xD0, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstp9  }<i>st_i</i>
     */
    // Template#: 2234, Serial#: 6795
    public void fstp9(FPStackRegister st_i) {
        assemble0402((byte) 0xD8, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstsw  }
     */
    // Template#: 2235, Serial#: 6796
    public void fstsw_AX() {
        assemble0406((byte) 0xE0);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstsw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2236, Serial#: 2824
    public void fstsw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDD, (byte) 0x07, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstsw  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2237, Serial#: 2823
    public void fstsw(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDD, (byte) 0x07, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstsw  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2238, Serial#: 2810
    public void fstsw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDD, (byte) 0x07, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstsw  }<i>destination</i>
     */
    // Template#: 2239, Serial#: 2809
    public void fstsw(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDD, (byte) 0x07, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstsw  }<i>rel32</i>
     */
    // Template#: 2240, Serial#: 2812
    public void rip_fstsw(int rel32) {
        assemble0239((byte) 0xDD, (byte) 0x07, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstsw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2241, Serial#: 2836
    public void fstsw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDD, (byte) 0x07, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstsw  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2242, Serial#: 2811
    public void m_fstsw(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDD, (byte) 0x07, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstsw  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2243, Serial#: 2835
    public void fstsw(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDD, (byte) 0x07, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubs  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2244, Serial#: 2542
    public void fsubs(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD8, (byte) 0x04, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2245, Serial#: 2766
    public void fsubl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDC, (byte) 0x04, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubs  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2246, Serial#: 2541
    public void fsubs(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD8, (byte) 0x04, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubl  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2247, Serial#: 2765
    public void fsubl(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDC, (byte) 0x04, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubs  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2248, Serial#: 2518
    public void fsubs(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD8, (byte) 0x04, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubl  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2249, Serial#: 2742
    public void fsubl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDC, (byte) 0x04, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubs  }<i>destination</i>
     */
    // Template#: 2250, Serial#: 2517
    public void fsubs(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD8, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubl  }<i>destination</i>
     */
    // Template#: 2251, Serial#: 2741
    public void fsubl(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDC, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsub  }<i>st_i</i>
     */
    // Template#: 2252, Serial#: 6722
    public void fsub_ST(FPStackRegister st_i) {
        assemble0396((byte) 0xE0, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsub  }<i>st_i</i>
     */
    // Template#: 2253, Serial#: 6774
    public void fsub___ST(FPStackRegister st_i) {
        assemble0397((byte) 0xE0, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubs  }<i>rel32</i>
     */
    // Template#: 2254, Serial#: 2520
    public void rip_fsubs(int rel32) {
        assemble0239((byte) 0xD8, (byte) 0x04, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubl  }<i>rel32</i>
     */
    // Template#: 2255, Serial#: 2744
    public void rip_fsubl(int rel32) {
        assemble0239((byte) 0xDC, (byte) 0x04, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubs  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2256, Serial#: 2558
    public void fsubs(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD8, (byte) 0x04, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2257, Serial#: 2782
    public void fsubl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDC, (byte) 0x04, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubs  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2258, Serial#: 2519
    public void m_fsubs(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD8, (byte) 0x04, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubl  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2259, Serial#: 2743
    public void m_fsubl(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDC, (byte) 0x04, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubs  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2260, Serial#: 2557
    public void fsubs(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD8, (byte) 0x04, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubl  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2261, Serial#: 2781
    public void fsubl(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDC, (byte) 0x04, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubrp  }<i>st_i</i>
     */
    // Template#: 2262, Serial#: 6789
    public void fsubp___ST(FPStackRegister st_i) {
        assemble0398((byte) 0xE8, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubrs  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2263, Serial#: 2544
    public void fsubrs(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD8, (byte) 0x05, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubrl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2264, Serial#: 2768
    public void fsubrl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xDC, (byte) 0x05, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubrs  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2265, Serial#: 2543
    public void fsubrs(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD8, (byte) 0x05, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubrl  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2266, Serial#: 2767
    public void fsubrl(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xDC, (byte) 0x05, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubrs  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2267, Serial#: 2522
    public void fsubrs(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD8, (byte) 0x05, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubrl  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2268, Serial#: 2746
    public void fsubrl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xDC, (byte) 0x05, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubrs  }<i>destination</i>
     */
    // Template#: 2269, Serial#: 2521
    public void fsubrs(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD8, (byte) 0x05, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubrl  }<i>destination</i>
     */
    // Template#: 2270, Serial#: 2745
    public void fsubrl(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xDC, (byte) 0x05, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubr  }<i>st_i</i>
     */
    // Template#: 2271, Serial#: 6723
    public void fsubr_ST(FPStackRegister st_i) {
        assemble0396((byte) 0xE8, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubr  }<i>st_i</i>
     */
    // Template#: 2272, Serial#: 6775
    public void fsubr___ST(FPStackRegister st_i) {
        assemble0397((byte) 0xE8, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubrs  }<i>rel32</i>
     */
    // Template#: 2273, Serial#: 2524
    public void rip_fsubrs(int rel32) {
        assemble0239((byte) 0xD8, (byte) 0x05, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubrl  }<i>rel32</i>
     */
    // Template#: 2274, Serial#: 2748
    public void rip_fsubrl(int rel32) {
        assemble0239((byte) 0xDC, (byte) 0x05, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubrs  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2275, Serial#: 2560
    public void fsubrs(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD8, (byte) 0x05, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubrl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2276, Serial#: 2784
    public void fsubrl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xDC, (byte) 0x05, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubrs  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2277, Serial#: 2523
    public void m_fsubrs(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD8, (byte) 0x05, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubrl  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2278, Serial#: 2747
    public void m_fsubrl(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xDC, (byte) 0x05, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubrs  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2279, Serial#: 2559
    public void fsubrs(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD8, (byte) 0x05, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubrl  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2280, Serial#: 2783
    public void fsubrl(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xDC, (byte) 0x05, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubp  }<i>st_i</i>
     */
    // Template#: 2281, Serial#: 6788
    public void fsubrp___ST(FPStackRegister st_i) {
        assemble0398((byte) 0xE0, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code ftst  }
     */
    // Template#: 2282, Serial#: 6732
    public void ftst() {
        assemble0395((byte) 0xE4);
    }

    /**
     * Pseudo-external assembler syntax: {@code fucom  }<i>st_i</i>
     */
    // Template#: 2283, Serial#: 6782
    public void fucom(FPStackRegister st_i) {
        assemble0404((byte) 0xE0, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fucomi  }<i>st_i</i>
     */
    // Template#: 2284, Serial#: 6768
    public void fucomi_ST(FPStackRegister st_i) {
        assemble0401((byte) 0xE8, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fucomip  }<i>st_i</i>
     */
    // Template#: 2285, Serial#: 6797
    public void fucomip_ST(FPStackRegister st_i) {
        assemble0402((byte) 0xE8, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fucomp  }<i>st_i</i>
     */
    // Template#: 2286, Serial#: 6783
    public void fucomp(FPStackRegister st_i) {
        assemble0404((byte) 0xE8, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fucompp  }
     */
    // Template#: 2287, Serial#: 6761
    public void fucompp() {
        assemble0407((byte) 0xE9);
    }

    /**
     * Pseudo-external assembler syntax: {@code fwait  }
     */
    // Template#: 2288, Serial#: 2468
    public void fwait() {
        assemble0146((byte) 0x9B);
    }

    /**
     * Pseudo-external assembler syntax: {@code fxam  }
     */
    // Template#: 2289, Serial#: 6733
    public void fxam() {
        assemble0395((byte) 0xE5);
    }

    /**
     * Pseudo-external assembler syntax: {@code fxch  }<i>st_i</i>
     */
    // Template#: 2290, Serial#: 6727
    public void fxch(FPStackRegister st_i) {
        assemble0405((byte) 0xC8, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fxch4  }<i>st_i</i>
     */
    // Template#: 2291, Serial#: 6779
    public void fxch4(FPStackRegister st_i) {
        assemble0404((byte) 0xC8, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fxch7  }<i>st_i</i>
     */
    // Template#: 2292, Serial#: 6793
    public void fxch7(FPStackRegister st_i) {
        assemble0402((byte) 0xC8, st_i);
    }

    /**
     * Pseudo-external assembler syntax: {@code fxrstor  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2293, Serial#: 6085
    public void fxrstor(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0244((byte) 0xAE, (byte) 0x01, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fxrstor  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2294, Serial#: 6084
    public void fxrstor(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0245((byte) 0xAE, (byte) 0x01, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fxrstor  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2295, Serial#: 6067
    public void fxrstor(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0246((byte) 0xAE, (byte) 0x01, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fxrstor  }<i>destination</i>
     */
    // Template#: 2296, Serial#: 6066
    public void fxrstor(AMD64IndirectRegister64 destination) {
        assemble0247((byte) 0xAE, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fxrstor  }<i>rel32</i>
     */
    // Template#: 2297, Serial#: 6069
    public void rip_fxrstor(int rel32) {
        assemble0248((byte) 0xAE, (byte) 0x01, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fxrstor  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2298, Serial#: 6095
    public void fxrstor(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0249((byte) 0xAE, (byte) 0x01, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fxrstor  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2299, Serial#: 6068
    public void m_fxrstor(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0250((byte) 0xAE, (byte) 0x01, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fxrstor  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2300, Serial#: 6094
    public void fxrstor(int disp32, AMD64IndirectRegister64 destination) {
        assemble0251((byte) 0xAE, (byte) 0x01, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fxsave  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2301, Serial#: 6083
    public void fxsave(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0244((byte) 0xAE, (byte) 0x00, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fxsave  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2302, Serial#: 6082
    public void fxsave(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0245((byte) 0xAE, (byte) 0x00, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fxsave  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2303, Serial#: 6063
    public void fxsave(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0246((byte) 0xAE, (byte) 0x00, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fxsave  }<i>destination</i>
     */
    // Template#: 2304, Serial#: 6062
    public void fxsave(AMD64IndirectRegister64 destination) {
        assemble0247((byte) 0xAE, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fxsave  }<i>rel32</i>
     */
    // Template#: 2305, Serial#: 6065
    public void rip_fxsave(int rel32) {
        assemble0248((byte) 0xAE, (byte) 0x00, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code fxsave  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2306, Serial#: 6093
    public void fxsave(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0249((byte) 0xAE, (byte) 0x00, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fxsave  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2307, Serial#: 6064
    public void m_fxsave(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0250((byte) 0xAE, (byte) 0x00, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code fxsave  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2308, Serial#: 6092
    public void fxsave(int disp32, AMD64IndirectRegister64 destination) {
        assemble0251((byte) 0xAE, (byte) 0x00, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code fxtract  }
     */
    // Template#: 2309, Serial#: 6745
    public void fxtract() {
        assemble0395((byte) 0xF4);
    }

    /**
     * Pseudo-external assembler syntax: {@code fyl2x  }
     */
    // Template#: 2310, Serial#: 6742
    public void fyl2x() {
        assemble0395((byte) 0xF1);
    }

    /**
     * Pseudo-external assembler syntax: {@code fyl2xp1  }
     */
    // Template#: 2311, Serial#: 6750
    public void fyl2xp1() {
        assemble0395((byte) 0xF9);
    }

    /**
     * Pseudo-external assembler syntax: {@code haddpd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2312, Serial#: 5825
    public void haddpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x7C, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code haddpd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 2313, Serial#: 5824
    public void haddpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x7C, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code haddpd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2314, Serial#: 5821
    public void haddpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x7C, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code haddpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2315, Serial#: 5820
    public void haddpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x7C, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code haddpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2316, Serial#: 5828
    public void haddpd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x7C, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code haddpd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 2317, Serial#: 5823
    public void rip_haddpd(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x7C, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code haddpd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2318, Serial#: 5827
    public void haddpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x7C, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code haddpd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2319, Serial#: 5822
    public void m_haddpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x7C, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code haddpd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 2320, Serial#: 5826
    public void haddpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x7C, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code haddps  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2321, Serial#: 5869
    public void haddps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0147((byte) 0x7C, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code haddps  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 2322, Serial#: 5868
    public void haddps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0148((byte) 0x7C, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code haddps  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2323, Serial#: 5865
    public void haddps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0149((byte) 0x7C, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code haddps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2324, Serial#: 5864
    public void haddps(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0150((byte) 0x7C, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code haddps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2325, Serial#: 5872
    public void haddps(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0151((byte) 0x7C, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code haddps  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 2326, Serial#: 5867
    public void rip_haddps(AMD64XMMRegister destination, int rel32) {
        assemble0152((byte) 0x7C, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code haddps  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2327, Serial#: 5871
    public void haddps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0153((byte) 0x7C, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code haddps  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2328, Serial#: 5866
    public void m_haddps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0154((byte) 0x7C, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code haddps  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 2329, Serial#: 5870
    public void haddps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0155((byte) 0x7C, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code hlt  }
     */
    // Template#: 2330, Serial#: 1729
    public void hlt() {
        assemble0146((byte) 0xF4);
    }

    /**
     * Pseudo-external assembler syntax: {@code hsubpd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2331, Serial#: 5834
    public void hsubpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x7D, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code hsubpd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 2332, Serial#: 5833
    public void hsubpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x7D, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code hsubpd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2333, Serial#: 5830
    public void hsubpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x7D, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code hsubpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2334, Serial#: 5829
    public void hsubpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x7D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code hsubpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2335, Serial#: 5837
    public void hsubpd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x7D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code hsubpd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 2336, Serial#: 5832
    public void rip_hsubpd(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x7D, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code hsubpd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2337, Serial#: 5836
    public void hsubpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x7D, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code hsubpd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2338, Serial#: 5831
    public void m_hsubpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x7D, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code hsubpd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 2339, Serial#: 5835
    public void hsubpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x7D, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code hsubps  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2340, Serial#: 5878
    public void hsubps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0147((byte) 0x7D, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code hsubps  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 2341, Serial#: 5877
    public void hsubps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0148((byte) 0x7D, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code hsubps  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2342, Serial#: 5874
    public void hsubps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0149((byte) 0x7D, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code hsubps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2343, Serial#: 5873
    public void hsubps(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0150((byte) 0x7D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code hsubps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2344, Serial#: 5881
    public void hsubps(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0151((byte) 0x7D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code hsubps  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 2345, Serial#: 5876
    public void rip_hsubps(AMD64XMMRegister destination, int rel32) {
        assemble0152((byte) 0x7D, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code hsubps  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2346, Serial#: 5880
    public void hsubps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0153((byte) 0x7D, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code hsubps  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2347, Serial#: 5875
    public void m_hsubps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0154((byte) 0x7D, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code hsubps  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 2348, Serial#: 5879
    public void hsubps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0155((byte) 0x7D, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2349, Serial#: 1772
    public void idivb___AL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xF6, (byte) 0x07, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2350, Serial#: 1835
    public void idivl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xF7, (byte) 0x07, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2351, Serial#: 1898
    public void idivq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0375((byte) 0xF7, (byte) 0x07, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2352, Serial#: 1961
    public void idivw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0376((byte) 0xF7, (byte) 0x07, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivb  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2353, Serial#: 1771
    public void idivb___AL(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xF6, (byte) 0x07, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivl  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2354, Serial#: 1834
    public void idivl(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xF7, (byte) 0x07, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivq  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2355, Serial#: 1897
    public void idivq(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0377((byte) 0xF7, (byte) 0x07, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivw  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2356, Serial#: 1960
    public void idivw(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0378((byte) 0xF7, (byte) 0x07, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivb  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2357, Serial#: 1756
    public void idivb___AL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xF6, (byte) 0x07, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivl  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2358, Serial#: 1819
    public void idivl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xF7, (byte) 0x07, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivq  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2359, Serial#: 1882
    public void idivq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0379((byte) 0xF7, (byte) 0x07, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivw  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2360, Serial#: 1945
    public void idivw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0380((byte) 0xF7, (byte) 0x07, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivw  }<i>destination</i>
     */
    // Template#: 2361, Serial#: 1982
    public void idivw(AMD64GeneralRegister16 destination) {
        assemble0235((byte) 0xF7, (byte) 0x07, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivl  }<i>destination</i>
     */
    // Template#: 2362, Serial#: 1856
    public void idivl(AMD64GeneralRegister32 destination) {
        assemble0381((byte) 0xF7, (byte) 0x07, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivq  }<i>destination</i>
     */
    // Template#: 2363, Serial#: 1919
    public void idivq(AMD64GeneralRegister64 destination) {
        assemble0382((byte) 0xF7, (byte) 0x07, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivb  }<i>destination</i>
     */
    // Template#: 2364, Serial#: 1793
    public void idivb___AL(AMD64GeneralRegister8 destination) {
        assemble0383((byte) 0xF6, (byte) 0x07, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivb  }<i>destination</i>
     */
    // Template#: 2365, Serial#: 1755
    public void idivb___AL(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xF6, (byte) 0x07, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivl  }<i>destination</i>
     */
    // Template#: 2366, Serial#: 1818
    public void idivl(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xF7, (byte) 0x07, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivq  }<i>destination</i>
     */
    // Template#: 2367, Serial#: 1881
    public void idivq(AMD64IndirectRegister64 destination) {
        assemble0384((byte) 0xF7, (byte) 0x07, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivw  }<i>destination</i>
     */
    // Template#: 2368, Serial#: 1944
    public void idivw(AMD64IndirectRegister64 destination) {
        assemble0385((byte) 0xF7, (byte) 0x07, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivb  }<i>rel32</i>
     */
    // Template#: 2369, Serial#: 1758
    public void rip_idivb___AL(int rel32) {
        assemble0239((byte) 0xF6, (byte) 0x07, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivl  }<i>rel32</i>
     */
    // Template#: 2370, Serial#: 1821
    public void rip_idivl(int rel32) {
        assemble0239((byte) 0xF7, (byte) 0x07, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivq  }<i>rel32</i>
     */
    // Template#: 2371, Serial#: 1884
    public void rip_idivq(int rel32) {
        assemble0386((byte) 0xF7, (byte) 0x07, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivw  }<i>rel32</i>
     */
    // Template#: 2372, Serial#: 1947
    public void rip_idivw(int rel32) {
        assemble0387((byte) 0xF7, (byte) 0x07, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2373, Serial#: 1786
    public void idivb___AL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xF6, (byte) 0x07, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2374, Serial#: 1849
    public void idivl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xF7, (byte) 0x07, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2375, Serial#: 1912
    public void idivq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0388((byte) 0xF7, (byte) 0x07, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2376, Serial#: 1975
    public void idivw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0389((byte) 0xF7, (byte) 0x07, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivb  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2377, Serial#: 1757
    public void m_idivb___AL(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xF6, (byte) 0x07, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivl  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2378, Serial#: 1820
    public void m_idivl(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xF7, (byte) 0x07, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivq  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2379, Serial#: 1883
    public void m_idivq(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0390((byte) 0xF7, (byte) 0x07, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivw  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2380, Serial#: 1946
    public void m_idivw(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0391((byte) 0xF7, (byte) 0x07, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivb  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2381, Serial#: 1785
    public void idivb___AL(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xF6, (byte) 0x07, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivl  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2382, Serial#: 1848
    public void idivl(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xF7, (byte) 0x07, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivq  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2383, Serial#: 1911
    public void idivq(int disp32, AMD64IndirectRegister64 destination) {
        assemble0392((byte) 0xF7, (byte) 0x07, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivw  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2384, Serial#: 1974
    public void idivw(int disp32, AMD64IndirectRegister64 destination) {
        assemble0393((byte) 0xF7, (byte) 0x07, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code imulb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2385, Serial#: 1768
    public void imulb___AL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xF6, (byte) 0x05, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code imull  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2386, Serial#: 1831
    public void imull(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xF7, (byte) 0x05, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code imulq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2387, Serial#: 1894
    public void imulq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0375((byte) 0xF7, (byte) 0x05, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code imulw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2388, Serial#: 1957
    public void imulw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0376((byte) 0xF7, (byte) 0x05, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code imulb  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2389, Serial#: 1767
    public void imulb___AL(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xF6, (byte) 0x05, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code imull  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2390, Serial#: 1830
    public void imull(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xF7, (byte) 0x05, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code imulq  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2391, Serial#: 1893
    public void imulq(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0377((byte) 0xF7, (byte) 0x05, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code imulw  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2392, Serial#: 1956
    public void imulw(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0378((byte) 0xF7, (byte) 0x05, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code imulb  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2393, Serial#: 1748
    public void imulb___AL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xF6, (byte) 0x05, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code imull  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2394, Serial#: 1811
    public void imull(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xF7, (byte) 0x05, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code imulq  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2395, Serial#: 1874
    public void imulq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0379((byte) 0xF7, (byte) 0x05, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code imulw  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2396, Serial#: 1937
    public void imulw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0380((byte) 0xF7, (byte) 0x05, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code imulw  }<i>destination</i>
     */
    // Template#: 2397, Serial#: 1980
    public void imulw(AMD64GeneralRegister16 destination) {
        assemble0235((byte) 0xF7, (byte) 0x05, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2398, Serial#: 6128
    public void imul(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0165((byte) 0xAF, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 2399, Serial#: 2328
    public void imul(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0408((byte) 0x6B, destination, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 2400, Serial#: 2300
    public void imul(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0409((byte) 0x69, destination, disp8, base, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 2401, Serial#: 6127
    public void imul(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0166((byte) 0xAF, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp8</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 2402, Serial#: 2327
    public void imul(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source, byte imm8) {
        assemble0410((byte) 0x6B, destination, disp8, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp8</i>, <i>source</i>, <i>imm16</i>
     */
    // Template#: 2403, Serial#: 2299
    public void imul(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source, short imm16) {
        assemble0411((byte) 0x69, destination, disp8, source, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2404, Serial#: 6124
    public void imul(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0167((byte) 0xAF, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 2405, Serial#: 2324
    public void imul(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0412((byte) 0x6B, destination, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 2406, Serial#: 2296
    public void imul(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0413((byte) 0x69, destination, base, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2407, Serial#: 6131
    public void imul(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0168((byte) 0xAF, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 2408, Serial#: 2331
    public void imul(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source, byte imm8) {
        assemble0414((byte) 0x6B, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>source</i>, <i>imm16</i>
     */
    // Template#: 2409, Serial#: 2303
    public void imul(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source, short imm16) {
        assemble0415((byte) 0x69, destination, source, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2410, Serial#: 6123
    public void imul(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        assemble0169((byte) 0xAF, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 2411, Serial#: 2323
    public void imul(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source, byte imm8) {
        assemble0416((byte) 0x6B, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>source</i>, <i>imm16</i>
     */
    // Template#: 2412, Serial#: 2295
    public void imul(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source, short imm16) {
        assemble0417((byte) 0x69, destination, source, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 2413, Serial#: 6126
    public void rip_imul(AMD64GeneralRegister16 destination, int rel32) {
        assemble0170((byte) 0xAF, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>rel32</i>, <i>imm8</i>
     */
    // Template#: 2414, Serial#: 2326
    public void rip_imul(AMD64GeneralRegister16 destination, int rel32, byte imm8) {
        assemble0418((byte) 0x6B, destination, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2415, Serial#: 6130
    public void imul(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0171((byte) 0xAF, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 2416, Serial#: 2330
    public void imul(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0419((byte) 0x6B, destination, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 2417, Serial#: 2302
    public void imul(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0420((byte) 0x69, destination, disp32, base, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2418, Serial#: 6125
    public void m_imul(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0172((byte) 0xAF, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 2419, Serial#: 2325
    public void m_imul(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0421((byte) 0x6B, destination, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 2420, Serial#: 2297
    public void m_imul(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0422((byte) 0x69, destination, m32, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 2421, Serial#: 6129
    public void imul(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0173((byte) 0xAF, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp32</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 2422, Serial#: 2329
    public void imul(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source, byte imm8) {
        assemble0423((byte) 0x6B, destination, disp32, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp32</i>, <i>source</i>, <i>imm16</i>
     */
    // Template#: 2423, Serial#: 2301
    public void imul(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source, short imm16) {
        assemble0424((byte) 0x69, destination, disp32, source, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>rel32</i>, <i>imm16</i>
     */
    // Template#: 2424, Serial#: 2298
    public void rip_imul(AMD64GeneralRegister16 destination, int rel32, short imm16) {
        assemble0425((byte) 0x69, destination, rel32, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code imull  }<i>destination</i>
     */
    // Template#: 2425, Serial#: 1854
    public void imull(AMD64GeneralRegister32 destination) {
        assemble0381((byte) 0xF7, (byte) 0x05, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2426, Serial#: 6110
    public void imul(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0174((byte) 0xAF, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 2427, Serial#: 2310
    public void imul(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0426((byte) 0x6B, destination, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 2428, Serial#: 2282
    public void imul(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0427((byte) 0x69, destination, disp8, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 2429, Serial#: 6109
    public void imul(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0175((byte) 0xAF, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp8</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 2430, Serial#: 2309
    public void imul(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source, byte imm8) {
        assemble0428((byte) 0x6B, destination, disp8, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp8</i>, <i>source</i>, <i>imm32</i>
     */
    // Template#: 2431, Serial#: 2281
    public void imul(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source, int imm32) {
        assemble0429((byte) 0x69, destination, disp8, source, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2432, Serial#: 6106
    public void imul(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0176((byte) 0xAF, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 2433, Serial#: 2306
    public void imul(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0430((byte) 0x6B, destination, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 2434, Serial#: 2278
    public void imul(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0431((byte) 0x69, destination, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2435, Serial#: 6113
    public void imul(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0177((byte) 0xAF, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 2436, Serial#: 2313
    public void imul(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source, byte imm8) {
        assemble0432((byte) 0x6B, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>source</i>, <i>imm32</i>
     */
    // Template#: 2437, Serial#: 2285
    public void imul(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source, int imm32) {
        assemble0433((byte) 0x69, destination, source, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2438, Serial#: 6105
    public void imul(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0178((byte) 0xAF, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 2439, Serial#: 2305
    public void imul(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source, byte imm8) {
        assemble0434((byte) 0x6B, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>source</i>, <i>imm32</i>
     */
    // Template#: 2440, Serial#: 2277
    public void imul(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source, int imm32) {
        assemble0435((byte) 0x69, destination, source, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 2441, Serial#: 6108
    public void rip_imul(AMD64GeneralRegister32 destination, int rel32) {
        assemble0179((byte) 0xAF, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>rel32</i>, <i>imm8</i>
     */
    // Template#: 2442, Serial#: 2308
    public void rip_imul(AMD64GeneralRegister32 destination, int rel32, byte imm8) {
        assemble0436((byte) 0x6B, destination, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2443, Serial#: 6112
    public void imul(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0180((byte) 0xAF, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 2444, Serial#: 2312
    public void imul(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0437((byte) 0x6B, destination, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 2445, Serial#: 2284
    public void imul(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0438((byte) 0x69, destination, disp32, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2446, Serial#: 6107
    public void m_imul(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0181((byte) 0xAF, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 2447, Serial#: 2307
    public void m_imul(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0439((byte) 0x6B, destination, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 2448, Serial#: 2279
    public void m_imul(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0440((byte) 0x69, destination, m32, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 2449, Serial#: 6111
    public void imul(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0182((byte) 0xAF, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp32</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 2450, Serial#: 2311
    public void imul(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source, byte imm8) {
        assemble0441((byte) 0x6B, destination, disp32, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp32</i>, <i>source</i>, <i>imm32</i>
     */
    // Template#: 2451, Serial#: 2283
    public void imul(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source, int imm32) {
        assemble0442((byte) 0x69, destination, disp32, source, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>rel32</i>, <i>imm32</i>
     */
    // Template#: 2452, Serial#: 2280
    public void rip_imul(AMD64GeneralRegister32 destination, int rel32, int imm32) {
        assemble0443((byte) 0x69, destination, rel32, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code imulq  }<i>destination</i>
     */
    // Template#: 2453, Serial#: 1917
    public void imulq(AMD64GeneralRegister64 destination) {
        assemble0382((byte) 0xF7, (byte) 0x05, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2454, Serial#: 6119
    public void imul(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0183((byte) 0xAF, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 2455, Serial#: 2319
    public void imul(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0444((byte) 0x6B, destination, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 2456, Serial#: 2291
    public void imul(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0445((byte) 0x69, destination, disp8, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 2457, Serial#: 6118
    public void imul(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0184((byte) 0xAF, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp8</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 2458, Serial#: 2318
    public void imul(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source, byte imm8) {
        assemble0446((byte) 0x6B, destination, disp8, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp8</i>, <i>source</i>, <i>imm32</i>
     */
    // Template#: 2459, Serial#: 2290
    public void imul(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source, int imm32) {
        assemble0447((byte) 0x69, destination, disp8, source, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2460, Serial#: 6115
    public void imul(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0185((byte) 0xAF, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 2461, Serial#: 2315
    public void imul(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0448((byte) 0x6B, destination, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 2462, Serial#: 2287
    public void imul(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0449((byte) 0x69, destination, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2463, Serial#: 6122
    public void imul(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0186((byte) 0xAF, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 2464, Serial#: 2322
    public void imul(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source, byte imm8) {
        assemble0450((byte) 0x6B, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>source</i>, <i>imm32</i>
     */
    // Template#: 2465, Serial#: 2294
    public void imul(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source, int imm32) {
        assemble0451((byte) 0x69, destination, source, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2466, Serial#: 6114
    public void imul(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0187((byte) 0xAF, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 2467, Serial#: 2314
    public void imul(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source, byte imm8) {
        assemble0452((byte) 0x6B, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>source</i>, <i>imm32</i>
     */
    // Template#: 2468, Serial#: 2286
    public void imul(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source, int imm32) {
        assemble0453((byte) 0x69, destination, source, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 2469, Serial#: 6117
    public void rip_imul(AMD64GeneralRegister64 destination, int rel32) {
        assemble0188((byte) 0xAF, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>rel32</i>, <i>imm8</i>
     */
    // Template#: 2470, Serial#: 2317
    public void rip_imul(AMD64GeneralRegister64 destination, int rel32, byte imm8) {
        assemble0454((byte) 0x6B, destination, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2471, Serial#: 6121
    public void imul(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0189((byte) 0xAF, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 2472, Serial#: 2321
    public void imul(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0455((byte) 0x6B, destination, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 2473, Serial#: 2293
    public void imul(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0456((byte) 0x69, destination, disp32, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2474, Serial#: 6116
    public void m_imul(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0190((byte) 0xAF, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 2475, Serial#: 2316
    public void m_imul(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0457((byte) 0x6B, destination, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 2476, Serial#: 2288
    public void m_imul(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0458((byte) 0x69, destination, m32, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 2477, Serial#: 6120
    public void imul(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0191((byte) 0xAF, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp32</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 2478, Serial#: 2320
    public void imul(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source, byte imm8) {
        assemble0459((byte) 0x6B, destination, disp32, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>disp32</i>, <i>source</i>, <i>imm32</i>
     */
    // Template#: 2479, Serial#: 2292
    public void imul(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source, int imm32) {
        assemble0460((byte) 0x69, destination, disp32, source, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>rel32</i>, <i>imm32</i>
     */
    // Template#: 2480, Serial#: 2289
    public void rip_imul(AMD64GeneralRegister64 destination, int rel32, int imm32) {
        assemble0461((byte) 0x69, destination, rel32, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code imulb  }<i>destination</i>
     */
    // Template#: 2481, Serial#: 1791
    public void imulb___AL(AMD64GeneralRegister8 destination) {
        assemble0383((byte) 0xF6, (byte) 0x05, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code imulb  }<i>destination</i>
     */
    // Template#: 2482, Serial#: 1747
    public void imulb___AL(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xF6, (byte) 0x05, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code imull  }<i>destination</i>
     */
    // Template#: 2483, Serial#: 1810
    public void imull(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xF7, (byte) 0x05, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code imulq  }<i>destination</i>
     */
    // Template#: 2484, Serial#: 1873
    public void imulq(AMD64IndirectRegister64 destination) {
        assemble0384((byte) 0xF7, (byte) 0x05, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code imulw  }<i>destination</i>
     */
    // Template#: 2485, Serial#: 1936
    public void imulw(AMD64IndirectRegister64 destination) {
        assemble0385((byte) 0xF7, (byte) 0x05, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code imulb  }<i>rel32</i>
     */
    // Template#: 2486, Serial#: 1750
    public void rip_imulb___AL(int rel32) {
        assemble0239((byte) 0xF6, (byte) 0x05, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code imull  }<i>rel32</i>
     */
    // Template#: 2487, Serial#: 1813
    public void rip_imull(int rel32) {
        assemble0239((byte) 0xF7, (byte) 0x05, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code imulq  }<i>rel32</i>
     */
    // Template#: 2488, Serial#: 1876
    public void rip_imulq(int rel32) {
        assemble0386((byte) 0xF7, (byte) 0x05, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code imulw  }<i>rel32</i>
     */
    // Template#: 2489, Serial#: 1939
    public void rip_imulw(int rel32) {
        assemble0387((byte) 0xF7, (byte) 0x05, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code imulb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2490, Serial#: 1782
    public void imulb___AL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xF6, (byte) 0x05, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code imull  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2491, Serial#: 1845
    public void imull(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xF7, (byte) 0x05, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code imulq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2492, Serial#: 1908
    public void imulq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0388((byte) 0xF7, (byte) 0x05, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code imulw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2493, Serial#: 1971
    public void imulw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0389((byte) 0xF7, (byte) 0x05, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code imulb  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2494, Serial#: 1749
    public void m_imulb___AL(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xF6, (byte) 0x05, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code imull  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2495, Serial#: 1812
    public void m_imull(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xF7, (byte) 0x05, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code imulq  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2496, Serial#: 1875
    public void m_imulq(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0390((byte) 0xF7, (byte) 0x05, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code imulw  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2497, Serial#: 1938
    public void m_imulw(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0391((byte) 0xF7, (byte) 0x05, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code imulb  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2498, Serial#: 1781
    public void imulb___AL(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xF6, (byte) 0x05, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code imull  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2499, Serial#: 1844
    public void imull(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xF7, (byte) 0x05, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code imulq  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2500, Serial#: 1907
    public void imulq(int disp32, AMD64IndirectRegister64 destination) {
        assemble0392((byte) 0xF7, (byte) 0x05, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code imulw  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2501, Serial#: 1970
    public void imulw(int disp32, AMD64IndirectRegister64 destination) {
        assemble0393((byte) 0xF7, (byte) 0x05, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code in  }
     */
    // Template#: 2502, Serial#: 2960
    public void in_AL_DX() {
        assemble0146((byte) 0xEC);
    }

    /**
     * Pseudo-external assembler syntax: {@code in  }
     */
    // Template#: 2503, Serial#: 2961
    public void in_EAX_DX() {
        assemble0146((byte) 0xED);
    }

    /**
     * Pseudo-external assembler syntax: {@code in  }
     */
    // Template#: 2504, Serial#: 2962
    public void in_RAX_DX() {
        assemble0243((byte) 0xED);
    }

    /**
     * Pseudo-external assembler syntax: {@code in  }
     */
    // Template#: 2505, Serial#: 2963
    public void in_AX_DX() {
        assemble0271((byte) 0xED);
    }

    /**
     * Pseudo-external assembler syntax: {@code in  }<i>imm8</i>
     */
    // Template#: 2506, Serial#: 1717
    public void in_AL(byte imm8) {
        assemble0001((byte) 0xE4, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code in  }<i>imm8</i>
     */
    // Template#: 2507, Serial#: 1718
    public void in_EAX(byte imm8) {
        assemble0001((byte) 0xE5, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code in  }<i>imm8</i>
     */
    // Template#: 2508, Serial#: 1719
    public void in_RAX(byte imm8) {
        assemble0462((byte) 0xE5, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code in  }<i>imm8</i>
     */
    // Template#: 2509, Serial#: 1720
    public void in_AX(byte imm8) {
        assemble0463((byte) 0xE5, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code incb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2510, Serial#: 2983
    public void incb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xFE, (byte) 0x00, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code incl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2511, Serial#: 3001
    public void incl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xFF, (byte) 0x00, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code incq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2512, Serial#: 3019
    public void incq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0375((byte) 0xFF, (byte) 0x00, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code incw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2513, Serial#: 3037
    public void incw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0376((byte) 0xFF, (byte) 0x00, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code incb  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2514, Serial#: 2982
    public void incb(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xFE, (byte) 0x00, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code incl  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2515, Serial#: 3000
    public void incl(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xFF, (byte) 0x00, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code incq  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2516, Serial#: 3018
    public void incq(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0377((byte) 0xFF, (byte) 0x00, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code incw  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2517, Serial#: 3036
    public void incw(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0378((byte) 0xFF, (byte) 0x00, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code incb  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2518, Serial#: 2975
    public void incb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xFE, (byte) 0x00, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code incl  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2519, Serial#: 2993
    public void incl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xFF, (byte) 0x00, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code incq  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2520, Serial#: 3011
    public void incq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0379((byte) 0xFF, (byte) 0x00, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code incw  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2521, Serial#: 3029
    public void incw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0380((byte) 0xFF, (byte) 0x00, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code incw  }<i>destination</i>
     */
    // Template#: 2522, Serial#: 3044
    public void incw(AMD64GeneralRegister16 destination) {
        assemble0235((byte) 0xFF, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code incl  }<i>destination</i>
     */
    // Template#: 2523, Serial#: 3008
    public void incl(AMD64GeneralRegister32 destination) {
        assemble0381((byte) 0xFF, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code incq  }<i>destination</i>
     */
    // Template#: 2524, Serial#: 3026
    public void incq(AMD64GeneralRegister64 destination) {
        assemble0382((byte) 0xFF, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code incb  }<i>destination</i>
     */
    // Template#: 2525, Serial#: 2990
    public void incb(AMD64GeneralRegister8 destination) {
        assemble0383((byte) 0xFE, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code incb  }<i>destination</i>
     */
    // Template#: 2526, Serial#: 2974
    public void incb(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xFE, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code incl  }<i>destination</i>
     */
    // Template#: 2527, Serial#: 2992
    public void incl(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xFF, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code incq  }<i>destination</i>
     */
    // Template#: 2528, Serial#: 3010
    public void incq(AMD64IndirectRegister64 destination) {
        assemble0384((byte) 0xFF, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code incw  }<i>destination</i>
     */
    // Template#: 2529, Serial#: 3028
    public void incw(AMD64IndirectRegister64 destination) {
        assemble0385((byte) 0xFF, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code incb  }<i>rel32</i>
     */
    // Template#: 2530, Serial#: 2977
    public void rip_incb(int rel32) {
        assemble0239((byte) 0xFE, (byte) 0x00, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code incl  }<i>rel32</i>
     */
    // Template#: 2531, Serial#: 2995
    public void rip_incl(int rel32) {
        assemble0239((byte) 0xFF, (byte) 0x00, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code incq  }<i>rel32</i>
     */
    // Template#: 2532, Serial#: 3013
    public void rip_incq(int rel32) {
        assemble0386((byte) 0xFF, (byte) 0x00, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code incw  }<i>rel32</i>
     */
    // Template#: 2533, Serial#: 3031
    public void rip_incw(int rel32) {
        assemble0387((byte) 0xFF, (byte) 0x00, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code incb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2534, Serial#: 2987
    public void incb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xFE, (byte) 0x00, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code incl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2535, Serial#: 3005
    public void incl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xFF, (byte) 0x00, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code incq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2536, Serial#: 3023
    public void incq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0388((byte) 0xFF, (byte) 0x00, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code incw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2537, Serial#: 3041
    public void incw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0389((byte) 0xFF, (byte) 0x00, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code incb  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2538, Serial#: 2976
    public void m_incb(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xFE, (byte) 0x00, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code incl  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2539, Serial#: 2994
    public void m_incl(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xFF, (byte) 0x00, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code incq  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2540, Serial#: 3012
    public void m_incq(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0390((byte) 0xFF, (byte) 0x00, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code incw  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2541, Serial#: 3030
    public void m_incw(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0391((byte) 0xFF, (byte) 0x00, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code incb  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2542, Serial#: 2986
    public void incb(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xFE, (byte) 0x00, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code incl  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2543, Serial#: 3004
    public void incl(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xFF, (byte) 0x00, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code incq  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2544, Serial#: 3022
    public void incq(int disp32, AMD64IndirectRegister64 destination) {
        assemble0392((byte) 0xFF, (byte) 0x00, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code incw  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2545, Serial#: 3040
    public void incw(int disp32, AMD64IndirectRegister64 destination) {
        assemble0393((byte) 0xFF, (byte) 0x00, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code insb  }
     */
    // Template#: 2546, Serial#: 2332
    public void insb() {
        assemble0146((byte) 0x6C);
    }

    /**
     * Pseudo-external assembler syntax: {@code insl  }
     */
    // Template#: 2547, Serial#: 2333
    public void insl() {
        assemble0146((byte) 0x6D);
    }

    /**
     * Pseudo-external assembler syntax: {@code insw  }
     */
    // Template#: 2548, Serial#: 2334
    public void insw() {
        assemble0271((byte) 0x6D);
    }

    /**
     * Pseudo-external assembler syntax: {@code int  }
     */
    // Template#: 2549, Serial#: 1726
    public void int_1() {
        assemble0146((byte) 0xF1);
    }

    /**
     * Pseudo-external assembler syntax: {@code int  }
     */
    // Template#: 2550, Serial#: 2498
    public void int_3() {
        assemble0146((byte) 0xCC);
    }

    /**
     * Pseudo-external assembler syntax: {@code int  }<i>imm8</i>
     */
    // Template#: 2551, Serial#: 2499
    public void intb(byte imm8) {
        assemble0001((byte) 0xCD, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code invd  }
     */
    // Template#: 2552, Serial#: 4846
    public void invd() {
        assemble0252((byte) 0x08);
    }

    /**
     * Pseudo-external assembler syntax: {@code invlpg  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2553, Serial#: 3173
    public void invlpg(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0244((byte) 0x01, (byte) 0x07, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code invlpg  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2554, Serial#: 3172
    public void invlpg(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0245((byte) 0x01, (byte) 0x07, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code invlpg  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2555, Serial#: 3157
    public void invlpg(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0246((byte) 0x01, (byte) 0x07, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code invlpg  }<i>destination</i>
     */
    // Template#: 2556, Serial#: 3156
    public void invlpg(AMD64IndirectRegister64 destination) {
        assemble0247((byte) 0x01, (byte) 0x07, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code invlpg  }<i>rel32</i>
     */
    // Template#: 2557, Serial#: 3159
    public void rip_invlpg(int rel32) {
        assemble0248((byte) 0x01, (byte) 0x07, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code invlpg  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2558, Serial#: 3187
    public void invlpg(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0249((byte) 0x01, (byte) 0x07, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code invlpg  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2559, Serial#: 3158
    public void m_invlpg(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0250((byte) 0x01, (byte) 0x07, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code invlpg  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2560, Serial#: 3186
    public void invlpg(int disp32, AMD64IndirectRegister64 destination) {
        assemble0251((byte) 0x01, (byte) 0x07, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code iret  }
     */
    // Template#: 2561, Serial#: 2500
    public void iret() {
        assemble0146((byte) 0xCF);
    }

    /**
     * Pseudo-external assembler syntax: {@code jb  }<i>rel8</i>
     */
    // Template#: 2562, Serial#: 315
    public void jb(byte rel8) {
        assemble0464((byte) 0x72, rel8);
    }

    /**
     * Pseudo-external assembler syntax: {@code jb  }<i>rel32</i>
     */
    // Template#: 2563, Serial#: 4061
    public void jb(int rel32) {
        assemble0465((byte) 0x82, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code jbe  }<i>rel8</i>
     */
    // Template#: 2564, Serial#: 319
    public void jbe(byte rel8) {
        assemble0464((byte) 0x76, rel8);
    }

    /**
     * Pseudo-external assembler syntax: {@code jbe  }<i>rel32</i>
     */
    // Template#: 2565, Serial#: 4065
    public void jbe(int rel32) {
        assemble0465((byte) 0x86, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code jl  }<i>rel8</i>
     */
    // Template#: 2566, Serial#: 2342
    public void jl(byte rel8) {
        assemble0464((byte) 0x7C, rel8);
    }

    /**
     * Pseudo-external assembler syntax: {@code jl  }<i>rel32</i>
     */
    // Template#: 2567, Serial#: 5902
    public void jl(int rel32) {
        assemble0465((byte) 0x8C, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code jle  }<i>rel8</i>
     */
    // Template#: 2568, Serial#: 2344
    public void jle(byte rel8) {
        assemble0464((byte) 0x7E, rel8);
    }

    /**
     * Pseudo-external assembler syntax: {@code jle  }<i>rel32</i>
     */
    // Template#: 2569, Serial#: 5904
    public void jle(int rel32) {
        assemble0465((byte) 0x8E, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code jmp  }<i>rel8</i>
     */
    // Template#: 2570, Serial#: 2959
    public void jmp(byte rel8) {
        assemble0464((byte) 0xEB, rel8);
    }

    /**
     * Pseudo-external assembler syntax: {@code jmp  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2571, Serial#: 3061
    public void jmp(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xFF, (byte) 0x04, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code jmp  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2572, Serial#: 3060
    public void jmp(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xFF, (byte) 0x04, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code jmp  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2573, Serial#: 3051
    public void jmp(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xFF, (byte) 0x04, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code jmp  }<i>destination</i>
     */
    // Template#: 2574, Serial#: 3073
    public void jmp(AMD64GeneralRegister16 destination) {
        assemble0235((byte) 0xFF, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code jmp  }<i>destination</i>
     */
    // Template#: 2575, Serial#: 3071
    public void jmp(AMD64GeneralRegister64 destination) {
        assemble0236((byte) 0xFF, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code jmp  }<i>destination</i>
     */
    // Template#: 2576, Serial#: 3050
    public void jmp(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xFF, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code jmp  }<i>rel32</i>
     */
    // Template#: 2577, Serial#: 2958
    public void jmp(int rel32) {
        assemble0238((byte) 0xE9, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code jmp  }<i>rel32</i>
     */
    // Template#: 2578, Serial#: 3053
    public void rip_jmp(int rel32) {
        assemble0239((byte) 0xFF, (byte) 0x04, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code jmp  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2579, Serial#: 3067
    public void jmp(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xFF, (byte) 0x04, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code jmp  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2580, Serial#: 3052
    public void m_jmp(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xFF, (byte) 0x04, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code jmp  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2581, Serial#: 3066
    public void jmp(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xFF, (byte) 0x04, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code jnb  }<i>rel8</i>
     */
    // Template#: 2582, Serial#: 316
    public void jnb(byte rel8) {
        assemble0464((byte) 0x73, rel8);
    }

    /**
     * Pseudo-external assembler syntax: {@code jnb  }<i>rel32</i>
     */
    // Template#: 2583, Serial#: 4062
    public void jnb(int rel32) {
        assemble0465((byte) 0x83, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code jnbe  }<i>rel8</i>
     */
    // Template#: 2584, Serial#: 320
    public void jnbe(byte rel8) {
        assemble0464((byte) 0x77, rel8);
    }

    /**
     * Pseudo-external assembler syntax: {@code jnbe  }<i>rel32</i>
     */
    // Template#: 2585, Serial#: 4066
    public void jnbe(int rel32) {
        assemble0465((byte) 0x87, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code jnl  }<i>rel8</i>
     */
    // Template#: 2586, Serial#: 2343
    public void jnl(byte rel8) {
        assemble0464((byte) 0x7D, rel8);
    }

    /**
     * Pseudo-external assembler syntax: {@code jnl  }<i>rel32</i>
     */
    // Template#: 2587, Serial#: 5903
    public void jnl(int rel32) {
        assemble0465((byte) 0x8D, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code jnle  }<i>rel8</i>
     */
    // Template#: 2588, Serial#: 2345
    public void jnle(byte rel8) {
        assemble0464((byte) 0x7F, rel8);
    }

    /**
     * Pseudo-external assembler syntax: {@code jnle  }<i>rel32</i>
     */
    // Template#: 2589, Serial#: 5905
    public void jnle(int rel32) {
        assemble0465((byte) 0x8F, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code jno  }<i>rel8</i>
     */
    // Template#: 2590, Serial#: 314
    public void jno(byte rel8) {
        assemble0464((byte) 0x71, rel8);
    }

    /**
     * Pseudo-external assembler syntax: {@code jno  }<i>rel32</i>
     */
    // Template#: 2591, Serial#: 4060
    public void jno(int rel32) {
        assemble0465((byte) 0x81, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code jnp  }<i>rel8</i>
     */
    // Template#: 2592, Serial#: 2341
    public void jnp(byte rel8) {
        assemble0464((byte) 0x7B, rel8);
    }

    /**
     * Pseudo-external assembler syntax: {@code jnp  }<i>rel32</i>
     */
    // Template#: 2593, Serial#: 5901
    public void jnp(int rel32) {
        assemble0465((byte) 0x8B, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code jns  }<i>rel8</i>
     */
    // Template#: 2594, Serial#: 2339
    public void jns(byte rel8) {
        assemble0464((byte) 0x79, rel8);
    }

    /**
     * Pseudo-external assembler syntax: {@code jns  }<i>rel32</i>
     */
    // Template#: 2595, Serial#: 5899
    public void jns(int rel32) {
        assemble0465((byte) 0x89, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code jnz  }<i>rel8</i>
     */
    // Template#: 2596, Serial#: 318
    public void jnz(byte rel8) {
        assemble0464((byte) 0x75, rel8);
    }

    /**
     * Pseudo-external assembler syntax: {@code jnz  }<i>rel32</i>
     */
    // Template#: 2597, Serial#: 4064
    public void jnz(int rel32) {
        assemble0465((byte) 0x85, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code jo  }<i>rel8</i>
     */
    // Template#: 2598, Serial#: 313
    public void jo(byte rel8) {
        assemble0464((byte) 0x70, rel8);
    }

    /**
     * Pseudo-external assembler syntax: {@code jo  }<i>rel32</i>
     */
    // Template#: 2599, Serial#: 4059
    public void jo(int rel32) {
        assemble0465((byte) 0x80, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code jp  }<i>rel8</i>
     */
    // Template#: 2600, Serial#: 2340
    public void jp(byte rel8) {
        assemble0464((byte) 0x7A, rel8);
    }

    /**
     * Pseudo-external assembler syntax: {@code jp  }<i>rel32</i>
     */
    // Template#: 2601, Serial#: 5900
    public void jp(int rel32) {
        assemble0465((byte) 0x8A, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code jrcxz  }<i>rel8</i>
     */
    // Template#: 2602, Serial#: 1716
    public void jrcxz(byte rel8) {
        assemble0464((byte) 0xE3, rel8);
    }

    /**
     * Pseudo-external assembler syntax: {@code js  }<i>rel8</i>
     */
    // Template#: 2603, Serial#: 2338
    public void js(byte rel8) {
        assemble0464((byte) 0x78, rel8);
    }

    /**
     * Pseudo-external assembler syntax: {@code js  }<i>rel32</i>
     */
    // Template#: 2604, Serial#: 5898
    public void js(int rel32) {
        assemble0465((byte) 0x88, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code jz  }<i>rel8</i>
     */
    // Template#: 2605, Serial#: 317
    public void jz(byte rel8) {
        assemble0464((byte) 0x74, rel8);
    }

    /**
     * Pseudo-external assembler syntax: {@code jz  }<i>rel32</i>
     */
    // Template#: 2606, Serial#: 4063
    public void jz(int rel32) {
        assemble0465((byte) 0x84, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code lahf  }
     */
    // Template#: 2607, Serial#: 2474
    public void lahf() {
        assemble0146((byte) 0x9F);
    }

    /**
     * Pseudo-external assembler syntax: {@code lar  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2608, Serial#: 3216
    public void lar(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0165((byte) 0x02, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lar  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 2609, Serial#: 3215
    public void lar(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0166((byte) 0x02, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code lar  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2610, Serial#: 3212
    public void lar(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0167((byte) 0x02, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lar  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2611, Serial#: 3219
    public void lar(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0168((byte) 0x02, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code lar  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2612, Serial#: 3211
    public void lar(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        assemble0169((byte) 0x02, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code lar  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 2613, Serial#: 3214
    public void rip_lar(AMD64GeneralRegister16 destination, int rel32) {
        assemble0170((byte) 0x02, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code lar  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2614, Serial#: 3218
    public void lar(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0171((byte) 0x02, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lar  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2615, Serial#: 3213
    public void m_lar(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0172((byte) 0x02, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lar  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 2616, Serial#: 3217
    public void lar(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0173((byte) 0x02, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code lar  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2617, Serial#: 3198
    public void lar(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0174((byte) 0x02, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lar  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 2618, Serial#: 3197
    public void lar(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0175((byte) 0x02, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code lar  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2619, Serial#: 3194
    public void lar(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0176((byte) 0x02, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lar  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2620, Serial#: 3201
    public void lar(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0177((byte) 0x02, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code lar  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2621, Serial#: 3193
    public void lar(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0178((byte) 0x02, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code lar  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 2622, Serial#: 3196
    public void rip_lar(AMD64GeneralRegister32 destination, int rel32) {
        assemble0179((byte) 0x02, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code lar  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2623, Serial#: 3200
    public void lar(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0180((byte) 0x02, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lar  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2624, Serial#: 3195
    public void m_lar(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0181((byte) 0x02, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lar  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 2625, Serial#: 3199
    public void lar(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0182((byte) 0x02, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code lar  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2626, Serial#: 3207
    public void lar(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0183((byte) 0x02, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lar  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 2627, Serial#: 3206
    public void lar(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0184((byte) 0x02, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code lar  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2628, Serial#: 3203
    public void lar(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0185((byte) 0x02, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lar  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2629, Serial#: 3210
    public void lar(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0186((byte) 0x02, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code lar  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2630, Serial#: 3202
    public void lar(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0187((byte) 0x02, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code lar  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 2631, Serial#: 3205
    public void rip_lar(AMD64GeneralRegister64 destination, int rel32) {
        assemble0188((byte) 0x02, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code lar  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2632, Serial#: 3209
    public void lar(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0189((byte) 0x02, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lar  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2633, Serial#: 3204
    public void m_lar(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0190((byte) 0x02, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lar  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 2634, Serial#: 3208
    public void lar(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0191((byte) 0x02, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code lddqu  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2635, Serial#: 4843
    public void lddqu(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0147((byte) 0xF0, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lddqu  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 2636, Serial#: 4842
    public void lddqu(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0148((byte) 0xF0, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code lddqu  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2637, Serial#: 4839
    public void lddqu(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0149((byte) 0xF0, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lddqu  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2638, Serial#: 4838
    public void lddqu(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0150((byte) 0xF0, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code lddqu  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 2639, Serial#: 4841
    public void rip_lddqu(AMD64XMMRegister destination, int rel32) {
        assemble0152((byte) 0xF0, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code lddqu  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2640, Serial#: 4845
    public void lddqu(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0153((byte) 0xF0, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lddqu  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2641, Serial#: 4840
    public void m_lddqu(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0154((byte) 0xF0, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lddqu  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 2642, Serial#: 4844
    public void lddqu(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0155((byte) 0xF0, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code ldmxcsr  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2643, Serial#: 6087
    public void ldmxcsr(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0244((byte) 0xAE, (byte) 0x02, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code ldmxcsr  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2644, Serial#: 6086
    public void ldmxcsr(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0245((byte) 0xAE, (byte) 0x02, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code ldmxcsr  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2645, Serial#: 6071
    public void ldmxcsr(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0246((byte) 0xAE, (byte) 0x02, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code ldmxcsr  }<i>destination</i>
     */
    // Template#: 2646, Serial#: 6070
    public void ldmxcsr(AMD64IndirectRegister64 destination) {
        assemble0247((byte) 0xAE, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code ldmxcsr  }<i>rel32</i>
     */
    // Template#: 2647, Serial#: 6073
    public void rip_ldmxcsr(int rel32) {
        assemble0248((byte) 0xAE, (byte) 0x02, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code ldmxcsr  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2648, Serial#: 6097
    public void ldmxcsr(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0249((byte) 0xAE, (byte) 0x02, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code ldmxcsr  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2649, Serial#: 6072
    public void m_ldmxcsr(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0250((byte) 0xAE, (byte) 0x02, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code ldmxcsr  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2650, Serial#: 6096
    public void ldmxcsr(int disp32, AMD64IndirectRegister64 destination) {
        assemble0251((byte) 0xAE, (byte) 0x02, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code lea  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2651, Serial#: 2444
    public void lea(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0033((byte) 0x8D, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lea  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 2652, Serial#: 2443
    public void lea(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0034((byte) 0x8D, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code lea  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2653, Serial#: 2440
    public void lea(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0035((byte) 0x8D, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lea  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2654, Serial#: 2439
    public void lea(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        assemble0037((byte) 0x8D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code lea  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 2655, Serial#: 2442
    public void rip_lea(AMD64GeneralRegister16 destination, int rel32) {
        assemble0038((byte) 0x8D, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code lea  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2656, Serial#: 2446
    public void lea(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0039((byte) 0x8D, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lea  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2657, Serial#: 2441
    public void m_lea(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0040((byte) 0x8D, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lea  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 2658, Serial#: 2445
    public void lea(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0041((byte) 0x8D, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code lea  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2659, Serial#: 2428
    public void lea(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0044((byte) 0x8D, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lea  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 2660, Serial#: 2427
    public void lea(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0045((byte) 0x8D, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code lea  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2661, Serial#: 2424
    public void lea(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0046((byte) 0x8D, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lea  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2662, Serial#: 2423
    public void lea(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0048((byte) 0x8D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code lea  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 2663, Serial#: 2426
    public void rip_lea(AMD64GeneralRegister32 destination, int rel32) {
        assemble0049((byte) 0x8D, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code lea  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2664, Serial#: 2430
    public void lea(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0051((byte) 0x8D, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lea  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2665, Serial#: 2425
    public void m_lea(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0052((byte) 0x8D, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lea  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 2666, Serial#: 2429
    public void lea(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0053((byte) 0x8D, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code lea  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2667, Serial#: 2436
    public void lea(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0055((byte) 0x8D, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lea  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 2668, Serial#: 2435
    public void lea(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0056((byte) 0x8D, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code lea  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2669, Serial#: 2432
    public void lea(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0057((byte) 0x8D, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lea  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2670, Serial#: 2431
    public void lea(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0059((byte) 0x8D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code lea  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 2671, Serial#: 2434
    public void rip_lea(AMD64GeneralRegister64 destination, int rel32) {
        assemble0060((byte) 0x8D, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code lea  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2672, Serial#: 2438
    public void lea(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0062((byte) 0x8D, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lea  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2673, Serial#: 2433
    public void m_lea(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0063((byte) 0x8D, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lea  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 2674, Serial#: 2437
    public void lea(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0064((byte) 0x8D, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code leave  }
     */
    // Template#: 2675, Serial#: 2495
    public void leave() {
        assemble0146((byte) 0xC9);
    }

    /**
     * Pseudo-external assembler syntax: {@code lfence  }
     */
    // Template#: 2676, Serial#: 6102
    public void lfence() {
        assemble0466((byte) 0xAE, (byte) 0x05);
    }

    /**
     * Pseudo-external assembler syntax: {@code lgdt  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2677, Serial#: 3165
    public void lgdt(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0244((byte) 0x01, (byte) 0x02, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lgdt  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2678, Serial#: 3164
    public void lgdt(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0245((byte) 0x01, (byte) 0x02, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code lgdt  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2679, Serial#: 3141
    public void lgdt(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0246((byte) 0x01, (byte) 0x02, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lgdt  }<i>destination</i>
     */
    // Template#: 2680, Serial#: 3140
    public void lgdt(AMD64IndirectRegister64 destination) {
        assemble0247((byte) 0x01, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code lgdt  }<i>rel32</i>
     */
    // Template#: 2681, Serial#: 3143
    public void rip_lgdt(int rel32) {
        assemble0248((byte) 0x01, (byte) 0x02, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code lgdt  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2682, Serial#: 3179
    public void lgdt(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0249((byte) 0x01, (byte) 0x02, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lgdt  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2683, Serial#: 3142
    public void m_lgdt(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0250((byte) 0x01, (byte) 0x02, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lgdt  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2684, Serial#: 3178
    public void lgdt(int disp32, AMD64IndirectRegister64 destination) {
        assemble0251((byte) 0x01, (byte) 0x02, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code lidt  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2685, Serial#: 3167
    public void lidt(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0244((byte) 0x01, (byte) 0x03, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lidt  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2686, Serial#: 3166
    public void lidt(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0245((byte) 0x01, (byte) 0x03, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code lidt  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2687, Serial#: 3145
    public void lidt(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0246((byte) 0x01, (byte) 0x03, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lidt  }<i>destination</i>
     */
    // Template#: 2688, Serial#: 3144
    public void lidt(AMD64IndirectRegister64 destination) {
        assemble0247((byte) 0x01, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code lidt  }<i>rel32</i>
     */
    // Template#: 2689, Serial#: 3147
    public void rip_lidt(int rel32) {
        assemble0248((byte) 0x01, (byte) 0x03, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code lidt  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2690, Serial#: 3181
    public void lidt(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0249((byte) 0x01, (byte) 0x03, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lidt  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2691, Serial#: 3146
    public void m_lidt(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0250((byte) 0x01, (byte) 0x03, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lidt  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2692, Serial#: 3180
    public void lidt(int disp32, AMD64IndirectRegister64 destination) {
        assemble0251((byte) 0x01, (byte) 0x03, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code lldt  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2693, Serial#: 3103
    public void lldt(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0244((byte) 0x00, (byte) 0x02, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lldt  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2694, Serial#: 3102
    public void lldt(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0245((byte) 0x00, (byte) 0x02, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code lldt  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2695, Serial#: 3083
    public void lldt(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0246((byte) 0x00, (byte) 0x02, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lldt  }<i>destination</i>
     */
    // Template#: 2696, Serial#: 3122
    public void lldt(AMD64GeneralRegister16 destination) {
        assemble0467((byte) 0x00, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code lldt  }<i>destination</i>
     */
    // Template#: 2697, Serial#: 3082
    public void lldt(AMD64IndirectRegister64 destination) {
        assemble0247((byte) 0x00, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code lldt  }<i>rel32</i>
     */
    // Template#: 2698, Serial#: 3085
    public void rip_lldt(int rel32) {
        assemble0248((byte) 0x00, (byte) 0x02, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code lldt  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2699, Serial#: 3115
    public void lldt(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0249((byte) 0x00, (byte) 0x02, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lldt  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2700, Serial#: 3084
    public void m_lldt(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0250((byte) 0x00, (byte) 0x02, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lldt  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2701, Serial#: 3114
    public void lldt(int disp32, AMD64IndirectRegister64 destination) {
        assemble0251((byte) 0x00, (byte) 0x02, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code lmsw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2702, Serial#: 3171
    public void lmsw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0244((byte) 0x01, (byte) 0x06, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lmsw  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2703, Serial#: 3170
    public void lmsw(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0245((byte) 0x01, (byte) 0x06, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code lmsw  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2704, Serial#: 3153
    public void lmsw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0246((byte) 0x01, (byte) 0x06, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lmsw  }<i>destination</i>
     */
    // Template#: 2705, Serial#: 3188
    public void lmsw(AMD64GeneralRegister16 destination) {
        assemble0467((byte) 0x01, (byte) 0x06, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code lmsw  }<i>destination</i>
     */
    // Template#: 2706, Serial#: 3152
    public void lmsw(AMD64IndirectRegister64 destination) {
        assemble0247((byte) 0x01, (byte) 0x06, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code lmsw  }<i>rel32</i>
     */
    // Template#: 2707, Serial#: 3155
    public void rip_lmsw(int rel32) {
        assemble0248((byte) 0x01, (byte) 0x06, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code lmsw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2708, Serial#: 3185
    public void lmsw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0249((byte) 0x01, (byte) 0x06, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lmsw  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2709, Serial#: 3154
    public void m_lmsw(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0250((byte) 0x01, (byte) 0x06, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lmsw  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2710, Serial#: 3184
    public void lmsw(int disp32, AMD64IndirectRegister64 destination) {
        assemble0251((byte) 0x01, (byte) 0x06, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code lock  }
     */
    // Template#: 2711, Serial#: 1725
    public void lock() {
        assemble0146((byte) 0xF0);
    }

    /**
     * Pseudo-external assembler syntax: {@code lodsb  }
     */
    // Template#: 2712, Serial#: 2483
    public void lodsb() {
        assemble0146((byte) 0xAC);
    }

    /**
     * Pseudo-external assembler syntax: {@code lodsl  }
     */
    // Template#: 2713, Serial#: 2484
    public void lodsl() {
        assemble0146((byte) 0xAD);
    }

    /**
     * Pseudo-external assembler syntax: {@code lodsq  }
     */
    // Template#: 2714, Serial#: 2485
    public void lodsq() {
        assemble0243((byte) 0xAD);
    }

    /**
     * Pseudo-external assembler syntax: {@code lodsw  }
     */
    // Template#: 2715, Serial#: 2486
    public void lodsw() {
        assemble0271((byte) 0xAD);
    }

    /**
     * Pseudo-external assembler syntax: {@code loop  }<i>rel8</i>
     */
    // Template#: 2716, Serial#: 1715
    public void loop(byte rel8) {
        assemble0464((byte) 0xE2, rel8);
    }

    /**
     * Pseudo-external assembler syntax: {@code loope  }<i>rel8</i>
     */
    // Template#: 2717, Serial#: 1714
    public void loope(byte rel8) {
        assemble0464((byte) 0xE1, rel8);
    }

    /**
     * Pseudo-external assembler syntax: {@code loopne  }<i>rel8</i>
     */
    // Template#: 2718, Serial#: 1713
    public void loopne(byte rel8) {
        assemble0464((byte) 0xE0, rel8);
    }

    /**
     * Pseudo-external assembler syntax: {@code lsl  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2719, Serial#: 3243
    public void lsl(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0165((byte) 0x03, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lsl  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 2720, Serial#: 3242
    public void lsl(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0166((byte) 0x03, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code lsl  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2721, Serial#: 3239
    public void lsl(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0167((byte) 0x03, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lsl  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2722, Serial#: 3246
    public void lsl(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0168((byte) 0x03, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code lsl  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2723, Serial#: 3238
    public void lsl(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        assemble0169((byte) 0x03, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code lsl  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 2724, Serial#: 3241
    public void rip_lsl(AMD64GeneralRegister16 destination, int rel32) {
        assemble0170((byte) 0x03, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code lsl  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2725, Serial#: 3245
    public void lsl(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0171((byte) 0x03, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lsl  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2726, Serial#: 3240
    public void m_lsl(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0172((byte) 0x03, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lsl  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 2727, Serial#: 3244
    public void lsl(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0173((byte) 0x03, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code lsl  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2728, Serial#: 3225
    public void lsl(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0174((byte) 0x03, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lsl  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 2729, Serial#: 3224
    public void lsl(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0175((byte) 0x03, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code lsl  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2730, Serial#: 3221
    public void lsl(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0176((byte) 0x03, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lsl  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2731, Serial#: 3228
    public void lsl(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0177((byte) 0x03, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code lsl  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2732, Serial#: 3220
    public void lsl(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0178((byte) 0x03, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code lsl  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 2733, Serial#: 3223
    public void rip_lsl(AMD64GeneralRegister32 destination, int rel32) {
        assemble0179((byte) 0x03, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code lsl  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2734, Serial#: 3227
    public void lsl(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0180((byte) 0x03, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lsl  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2735, Serial#: 3222
    public void m_lsl(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0181((byte) 0x03, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lsl  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 2736, Serial#: 3226
    public void lsl(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0182((byte) 0x03, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code lsl  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2737, Serial#: 3234
    public void lsl(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0183((byte) 0x03, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lsl  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 2738, Serial#: 3233
    public void lsl(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0184((byte) 0x03, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code lsl  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2739, Serial#: 3230
    public void lsl(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0185((byte) 0x03, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lsl  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2740, Serial#: 3237
    public void lsl(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0186((byte) 0x03, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code lsl  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2741, Serial#: 3229
    public void lsl(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0187((byte) 0x03, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code lsl  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 2742, Serial#: 3232
    public void rip_lsl(AMD64GeneralRegister64 destination, int rel32) {
        assemble0188((byte) 0x03, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code lsl  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2743, Serial#: 3236
    public void lsl(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0189((byte) 0x03, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lsl  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2744, Serial#: 3231
    public void m_lsl(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0190((byte) 0x03, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code lsl  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 2745, Serial#: 3235
    public void lsl(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0191((byte) 0x03, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code ltr  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2746, Serial#: 3105
    public void ltr(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0244((byte) 0x00, (byte) 0x03, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code ltr  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 2747, Serial#: 3104
    public void ltr(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0245((byte) 0x00, (byte) 0x03, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code ltr  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2748, Serial#: 3087
    public void ltr(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0246((byte) 0x00, (byte) 0x03, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code ltr  }<i>destination</i>
     */
    // Template#: 2749, Serial#: 3123
    public void ltr(AMD64GeneralRegister16 destination) {
        assemble0467((byte) 0x00, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code ltr  }<i>destination</i>
     */
    // Template#: 2750, Serial#: 3086
    public void ltr(AMD64IndirectRegister64 destination) {
        assemble0247((byte) 0x00, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code ltr  }<i>rel32</i>
     */
    // Template#: 2751, Serial#: 3089
    public void rip_ltr(int rel32) {
        assemble0248((byte) 0x00, (byte) 0x03, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code ltr  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2752, Serial#: 3117
    public void ltr(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0249((byte) 0x00, (byte) 0x03, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code ltr  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2753, Serial#: 3088
    public void m_ltr(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0250((byte) 0x00, (byte) 0x03, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code ltr  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 2754, Serial#: 3116
    public void ltr(int disp32, AMD64IndirectRegister64 destination) {
        assemble0251((byte) 0x00, (byte) 0x03, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code maskmovdqu  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2755, Serial#: 4837
    public void maskmovdqu(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xF7, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code maskmovq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2756, Serial#: 4782
    public void maskmovq(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xF7, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxpd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2757, Serial#: 5502
    public void maxpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x5F, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxpd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 2758, Serial#: 5501
    public void maxpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x5F, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxpd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2759, Serial#: 5498
    public void maxpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x5F, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2760, Serial#: 5497
    public void maxpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x5F, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2761, Serial#: 5505
    public void maxpd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x5F, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxpd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 2762, Serial#: 5500
    public void rip_maxpd(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x5F, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxpd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2763, Serial#: 5504
    public void maxpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x5F, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxpd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2764, Serial#: 5499
    public void m_maxpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x5F, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxpd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 2765, Serial#: 5503
    public void maxpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x5F, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxps  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2766, Serial#: 5430
    public void maxps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0137((byte) 0x5F, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxps  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 2767, Serial#: 5429
    public void maxps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0138((byte) 0x5F, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxps  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2768, Serial#: 5426
    public void maxps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0139((byte) 0x5F, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2769, Serial#: 5425
    public void maxps(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0140((byte) 0x5F, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2770, Serial#: 5433
    public void maxps(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0141((byte) 0x5F, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxps  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 2771, Serial#: 5428
    public void rip_maxps(AMD64XMMRegister destination, int rel32) {
        assemble0142((byte) 0x5F, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxps  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2772, Serial#: 5432
    public void maxps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0143((byte) 0x5F, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxps  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2773, Serial#: 5427
    public void m_maxps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0144((byte) 0x5F, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxps  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 2774, Serial#: 5431
    public void maxps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0145((byte) 0x5F, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxsd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2775, Serial#: 5565
    public void maxsd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0147((byte) 0x5F, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxsd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 2776, Serial#: 5564
    public void maxsd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0148((byte) 0x5F, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxsd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2777, Serial#: 5561
    public void maxsd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0149((byte) 0x5F, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxsd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2778, Serial#: 5560
    public void maxsd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0150((byte) 0x5F, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxsd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2779, Serial#: 5568
    public void maxsd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0151((byte) 0x5F, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxsd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 2780, Serial#: 5563
    public void rip_maxsd(AMD64XMMRegister destination, int rel32) {
        assemble0152((byte) 0x5F, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxsd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2781, Serial#: 5567
    public void maxsd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0153((byte) 0x5F, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxsd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2782, Serial#: 5562
    public void m_maxsd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0154((byte) 0x5F, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxsd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 2783, Serial#: 5566
    public void maxsd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0155((byte) 0x5F, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxss  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2784, Serial#: 5637
    public void maxss(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0156((byte) 0x5F, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxss  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 2785, Serial#: 5636
    public void maxss(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0157((byte) 0x5F, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxss  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2786, Serial#: 5633
    public void maxss(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0158((byte) 0x5F, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxss  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2787, Serial#: 5632
    public void maxss(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0159((byte) 0x5F, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxss  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2788, Serial#: 5640
    public void maxss(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0160((byte) 0x5F, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxss  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 2789, Serial#: 5635
    public void rip_maxss(AMD64XMMRegister destination, int rel32) {
        assemble0161((byte) 0x5F, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxss  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2790, Serial#: 5639
    public void maxss(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0162((byte) 0x5F, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxss  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2791, Serial#: 5634
    public void m_maxss(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0163((byte) 0x5F, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxss  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 2792, Serial#: 5638
    public void maxss(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0164((byte) 0x5F, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mfence  }
     */
    // Template#: 2793, Serial#: 6103
    public void mfence() {
        assemble0466((byte) 0xAE, (byte) 0x06);
    }

    /**
     * Pseudo-external assembler syntax: {@code minpd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2794, Serial#: 5484
    public void minpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x5D, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code minpd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 2795, Serial#: 5483
    public void minpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x5D, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code minpd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2796, Serial#: 5480
    public void minpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x5D, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code minpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2797, Serial#: 5479
    public void minpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x5D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code minpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2798, Serial#: 5487
    public void minpd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x5D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code minpd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 2799, Serial#: 5482
    public void rip_minpd(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x5D, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code minpd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2800, Serial#: 5486
    public void minpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x5D, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code minpd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2801, Serial#: 5481
    public void m_minpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x5D, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code minpd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 2802, Serial#: 5485
    public void minpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x5D, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code minps  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2803, Serial#: 5412
    public void minps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0137((byte) 0x5D, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code minps  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 2804, Serial#: 5411
    public void minps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0138((byte) 0x5D, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code minps  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2805, Serial#: 5408
    public void minps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0139((byte) 0x5D, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code minps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2806, Serial#: 5407
    public void minps(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0140((byte) 0x5D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code minps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2807, Serial#: 5415
    public void minps(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0141((byte) 0x5D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code minps  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 2808, Serial#: 5410
    public void rip_minps(AMD64XMMRegister destination, int rel32) {
        assemble0142((byte) 0x5D, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code minps  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2809, Serial#: 5414
    public void minps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0143((byte) 0x5D, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code minps  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2810, Serial#: 5409
    public void m_minps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0144((byte) 0x5D, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code minps  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 2811, Serial#: 5413
    public void minps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0145((byte) 0x5D, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code minsd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2812, Serial#: 5547
    public void minsd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0147((byte) 0x5D, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code minsd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 2813, Serial#: 5546
    public void minsd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0148((byte) 0x5D, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code minsd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2814, Serial#: 5543
    public void minsd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0149((byte) 0x5D, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code minsd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2815, Serial#: 5542
    public void minsd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0150((byte) 0x5D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code minsd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2816, Serial#: 5550
    public void minsd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0151((byte) 0x5D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code minsd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 2817, Serial#: 5545
    public void rip_minsd(AMD64XMMRegister destination, int rel32) {
        assemble0152((byte) 0x5D, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code minsd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2818, Serial#: 5549
    public void minsd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0153((byte) 0x5D, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code minsd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2819, Serial#: 5544
    public void m_minsd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0154((byte) 0x5D, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code minsd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 2820, Serial#: 5548
    public void minsd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0155((byte) 0x5D, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code minss  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2821, Serial#: 5619
    public void minss(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0156((byte) 0x5D, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code minss  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 2822, Serial#: 5618
    public void minss(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0157((byte) 0x5D, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code minss  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2823, Serial#: 5615
    public void minss(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0158((byte) 0x5D, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code minss  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2824, Serial#: 5614
    public void minss(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0159((byte) 0x5D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code minss  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2825, Serial#: 5622
    public void minss(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0160((byte) 0x5D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code minss  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 2826, Serial#: 5617
    public void rip_minss(AMD64XMMRegister destination, int rel32) {
        assemble0161((byte) 0x5D, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code minss  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2827, Serial#: 5621
    public void minss(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0162((byte) 0x5D, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code minss  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2828, Serial#: 5616
    public void m_minss(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0163((byte) 0x5D, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code minss  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 2829, Serial#: 5620
    public void minss(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0164((byte) 0x5D, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 2830, Serial#: 1177
    public void movb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0469((byte) 0xC6, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 2831, Serial#: 2378
    public void mov(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0005((byte) 0x89, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 2832, Serial#: 2360
    public void mov(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0006((byte) 0x89, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 2833, Serial#: 2369
    public void mov(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0007((byte) 0x89, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 2834, Serial#: 2351
    public void mov(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0008((byte) 0x88, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 2835, Serial#: 2419
    public void mov(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, SegmentRegister source) {
        assemble0470((byte) 0x8C, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 2836, Serial#: 1186
    public void movl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0471((byte) 0xC7, disp8, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 2837, Serial#: 1195
    public void movq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0472((byte) 0xC7, disp8, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 2838, Serial#: 1204
    public void movw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0473((byte) 0xC7, disp8, base, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code movb  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 2839, Serial#: 1176
    public void movb(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0474((byte) 0xC6, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 2840, Serial#: 2377
    public void mov(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0015((byte) 0x89, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 2841, Serial#: 2359
    public void mov(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0016((byte) 0x89, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 2842, Serial#: 2368
    public void mov(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0017((byte) 0x89, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 2843, Serial#: 2350
    public void mov(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0018((byte) 0x88, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 2844, Serial#: 2418
    public void mov(byte disp8, AMD64IndirectRegister64 destination, SegmentRegister source) {
        assemble0475((byte) 0x8C, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movl  }<i>disp8</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 2845, Serial#: 1185
    public void movl(byte disp8, AMD64IndirectRegister64 destination, int imm32) {
        assemble0476((byte) 0xC7, disp8, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>disp8</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 2846, Serial#: 1194
    public void movq(byte disp8, AMD64IndirectRegister64 destination, int imm32) {
        assemble0477((byte) 0xC7, disp8, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movw  }<i>disp8</i>, <i>destination</i>, <i>imm16</i>
     */
    // Template#: 2847, Serial#: 1203
    public void movw(byte disp8, AMD64IndirectRegister64 destination, short imm16) {
        assemble0478((byte) 0xC7, disp8, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code movb  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 2848, Serial#: 1173
    public void movb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0479((byte) 0xC6, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 2849, Serial#: 2374
    public void mov(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0025((byte) 0x89, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 2850, Serial#: 2356
    public void mov(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0026((byte) 0x89, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 2851, Serial#: 2365
    public void mov(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0027((byte) 0x89, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 2852, Serial#: 2347
    public void mov(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0028((byte) 0x88, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 2853, Serial#: 2415
    public void mov(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, SegmentRegister source) {
        assemble0480((byte) 0x8C, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movl  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 2854, Serial#: 1182
    public void movl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0481((byte) 0xC7, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 2855, Serial#: 1191
    public void movq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0482((byte) 0xC7, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movw  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 2856, Serial#: 1200
    public void movw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0483((byte) 0xC7, base, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2857, Serial#: 2411
    public void mov(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0033((byte) 0x8B, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 2858, Serial#: 2410
    public void mov(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0034((byte) 0x8B, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2859, Serial#: 2407
    public void mov(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0035((byte) 0x8B, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2860, Serial#: 2381
    public void mov(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0036((byte) 0x89, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2861, Serial#: 2406
    public void mov(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        assemble0037((byte) 0x8B, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2862, Serial#: 2422
    public void mov(AMD64GeneralRegister16 destination, SegmentRegister source) {
        assemble0484((byte) 0x8C, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 2863, Serial#: 2409
    public void rip_mov(AMD64GeneralRegister16 destination, int rel32) {
        assemble0038((byte) 0x8B, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2864, Serial#: 2413
    public void mov(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0039((byte) 0x8B, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2865, Serial#: 2408
    public void m_mov(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0040((byte) 0x8B, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 2866, Serial#: 2412
    public void mov(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0041((byte) 0x8B, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movw  }<i>destination</i>, <i>imm16</i>
     */
    // Template#: 2867, Serial#: 1207
    public void movw(AMD64GeneralRegister16 destination, short imm16) {
        assemble0485((byte) 0xC7, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>register</i>, <i>imm16</i>
     */
    // Template#: 2868, Serial#: 2493
    public void mov(AMD64GeneralRegister16 register, short imm16) {
        assemble0486((byte) 0xB8, register, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2869, Serial#: 2395
    public void mov(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0044((byte) 0x8B, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 2870, Serial#: 2394
    public void mov(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0045((byte) 0x8B, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2871, Serial#: 2391
    public void mov(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0046((byte) 0x8B, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2872, Serial#: 2363
    public void mov(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0047((byte) 0x89, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2873, Serial#: 2390
    public void mov(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0048((byte) 0x8B, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movl  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 2874, Serial#: 1189
    public void movl(AMD64GeneralRegister32 destination, int imm32) {
        assemble0487((byte) 0xC7, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 2875, Serial#: 2393
    public void rip_mov(AMD64GeneralRegister32 destination, int rel32) {
        assemble0049((byte) 0x8B, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>register</i>, <i>imm32</i>
     */
    // Template#: 2876, Serial#: 2491
    public void mov(AMD64GeneralRegister32 register, int imm32) {
        assemble0488((byte) 0xB8, register, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2877, Serial#: 2397
    public void mov(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0051((byte) 0x8B, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2878, Serial#: 2392
    public void m_mov(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0052((byte) 0x8B, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 2879, Serial#: 2396
    public void mov(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0053((byte) 0x8B, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2880, Serial#: 2403
    public void mov(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0055((byte) 0x8B, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 2881, Serial#: 2402
    public void mov(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0056((byte) 0x8B, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2882, Serial#: 2399
    public void mov(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0057((byte) 0x8B, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2883, Serial#: 2372
    public void mov(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0058((byte) 0x89, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2884, Serial#: 2398
    public void mov(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0059((byte) 0x8B, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2885, Serial#: 3436
    public void mov(AMD64GeneralRegister64 destination, ControlRegister source) {
        assemble0489((byte) 0x20, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2886, Serial#: 3437
    public void mov(AMD64GeneralRegister64 destination, DebugRegister source) {
        assemble0490((byte) 0x21, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 2887, Serial#: 1198
    public void movq(AMD64GeneralRegister64 destination, int imm32) {
        assemble0491((byte) 0xC7, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 2888, Serial#: 2401
    public void rip_mov(AMD64GeneralRegister64 destination, int rel32) {
        assemble0060((byte) 0x8B, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2889, Serial#: 2405
    public void mov(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0062((byte) 0x8B, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2890, Serial#: 2400
    public void m_mov(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0063((byte) 0x8B, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 2891, Serial#: 2404
    public void mov(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0064((byte) 0x8B, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>register</i>, <i>imm64</i>
     */
    // Template#: 2892, Serial#: 2492
    public void mov(AMD64GeneralRegister64 register, long imm64) {
        assemble0492((byte) 0xB8, register, imm64);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>register</i>, <i>imm8</i>
     */
    // Template#: 2893, Serial#: 917
    public void mov(AMD64GeneralRegister8 register, byte imm8) {
        assemble0493((byte) 0xB0, register, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code movb  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 2894, Serial#: 1180
    public void movb(AMD64GeneralRegister8 destination, byte imm8) {
        assemble0494((byte) 0xC6, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2895, Serial#: 2387
    public void mov(AMD64GeneralRegister8 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0066((byte) 0x8A, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 2896, Serial#: 2386
    public void mov(AMD64GeneralRegister8 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0067((byte) 0x8A, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2897, Serial#: 2383
    public void mov(AMD64GeneralRegister8 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0068((byte) 0x8A, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2898, Serial#: 2354
    public void mov(AMD64GeneralRegister8 destination, AMD64GeneralRegister8 source) {
        assemble0069((byte) 0x88, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2899, Serial#: 2382
    public void mov(AMD64GeneralRegister8 destination, AMD64IndirectRegister64 source) {
        assemble0070((byte) 0x8A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 2900, Serial#: 2385
    public void rip_mov(AMD64GeneralRegister8 destination, int rel32) {
        assemble0071((byte) 0x8A, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2901, Serial#: 2389
    public void mov(AMD64GeneralRegister8 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0072((byte) 0x8A, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2902, Serial#: 2384
    public void m_mov(AMD64GeneralRegister8 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0073((byte) 0x8A, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 2903, Serial#: 2388
    public void mov(AMD64GeneralRegister8 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0074((byte) 0x8A, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movb  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 2904, Serial#: 1172
    public void movb(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0495((byte) 0xC6, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2905, Serial#: 2373
    public void mov(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0078((byte) 0x89, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2906, Serial#: 2355
    public void mov(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0079((byte) 0x89, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2907, Serial#: 2364
    public void mov(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0080((byte) 0x89, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2908, Serial#: 2346
    public void mov(AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0081((byte) 0x88, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2909, Serial#: 2414
    public void mov(AMD64IndirectRegister64 destination, SegmentRegister source) {
        assemble0496((byte) 0x8C, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movl  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 2910, Serial#: 1181
    public void movl(AMD64IndirectRegister64 destination, int imm32) {
        assemble0497((byte) 0xC7, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 2911, Serial#: 1190
    public void movq(AMD64IndirectRegister64 destination, int imm32) {
        assemble0498((byte) 0xC7, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movw  }<i>destination</i>, <i>imm16</i>
     */
    // Template#: 2912, Serial#: 1199
    public void movw(AMD64IndirectRegister64 destination, short imm16) {
        assemble0499((byte) 0xC7, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2913, Serial#: 3438
    public void mov(ControlRegister destination, AMD64GeneralRegister64 source) {
        assemble0500((byte) 0x22, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2914, Serial#: 3439
    public void mov(DebugRegister destination, AMD64GeneralRegister64 source) {
        assemble0501((byte) 0x23, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2915, Serial#: 2452
    public void mov(SegmentRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0502((byte) 0x8E, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 2916, Serial#: 2451
    public void mov(SegmentRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0503((byte) 0x8E, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2917, Serial#: 2448
    public void mov(SegmentRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0504((byte) 0x8E, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2918, Serial#: 2455
    public void mov(SegmentRegister destination, AMD64GeneralRegister16 source) {
        assemble0505((byte) 0x8E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2919, Serial#: 2447
    public void mov(SegmentRegister destination, AMD64IndirectRegister64 source) {
        assemble0506((byte) 0x8E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 2920, Serial#: 2450
    public void rip_mov(SegmentRegister destination, int rel32) {
        assemble0507((byte) 0x8E, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2921, Serial#: 2454
    public void mov(SegmentRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0508((byte) 0x8E, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2922, Serial#: 2449
    public void m_mov(SegmentRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0509((byte) 0x8E, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 2923, Serial#: 2453
    public void mov(SegmentRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0510((byte) 0x8E, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movb  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 2924, Serial#: 1175
    public void rip_movb(int rel32, byte imm8) {
        assemble0511((byte) 0xC6, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code movb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 2925, Serial#: 1179
    public void movb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0512((byte) 0xC6, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 2926, Serial#: 2380
    public void mov(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0093((byte) 0x89, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 2927, Serial#: 2362
    public void mov(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0094((byte) 0x89, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 2928, Serial#: 2371
    public void mov(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0095((byte) 0x89, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 2929, Serial#: 2353
    public void mov(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0096((byte) 0x88, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 2930, Serial#: 2421
    public void mov(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, SegmentRegister source) {
        assemble0513((byte) 0x8C, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 2931, Serial#: 1188
    public void movl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0514((byte) 0xC7, disp32, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 2932, Serial#: 1197
    public void movq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0515((byte) 0xC7, disp32, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 2933, Serial#: 1206
    public void movw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0516((byte) 0xC7, disp32, base, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 2934, Serial#: 2376
    public void rip_mov(int rel32, AMD64GeneralRegister16 source) {
        assemble0100((byte) 0x89, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 2935, Serial#: 2358
    public void rip_mov(int rel32, AMD64GeneralRegister32 source) {
        assemble0101((byte) 0x89, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 2936, Serial#: 2367
    public void rip_mov(int rel32, AMD64GeneralRegister64 source) {
        assemble0102((byte) 0x89, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 2937, Serial#: 2349
    public void rip_mov(int rel32, AMD64GeneralRegister8 source) {
        assemble0103((byte) 0x88, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movb  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 2938, Serial#: 1174
    public void m_movb(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0517((byte) 0xC6, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 2939, Serial#: 2375
    public void m_mov(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0107((byte) 0x89, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 2940, Serial#: 2357
    public void m_mov(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0108((byte) 0x89, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 2941, Serial#: 2366
    public void m_mov(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0109((byte) 0x89, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 2942, Serial#: 2348
    public void m_mov(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0110((byte) 0x88, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 2943, Serial#: 2416
    public void m_mov(int m32, AMD64IndexRegister64 index, Scale scale, SegmentRegister source) {
        assemble0518((byte) 0x8C, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movl  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 2944, Serial#: 1183
    public void m_movl(int m32, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0519((byte) 0xC7, m32, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 2945, Serial#: 1192
    public void m_movq(int m32, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0520((byte) 0xC7, m32, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movw  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 2946, Serial#: 1201
    public void m_movw(int m32, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0521((byte) 0xC7, m32, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code movb  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 2947, Serial#: 1178
    public void movb(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0522((byte) 0xC6, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 2948, Serial#: 2379
    public void mov(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0117((byte) 0x89, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 2949, Serial#: 2361
    public void mov(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0118((byte) 0x89, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 2950, Serial#: 2370
    public void mov(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0119((byte) 0x89, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 2951, Serial#: 2352
    public void mov(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0120((byte) 0x88, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 2952, Serial#: 2420
    public void mov(int disp32, AMD64IndirectRegister64 destination, SegmentRegister source) {
        assemble0523((byte) 0x8C, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movl  }<i>disp32</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 2953, Serial#: 1187
    public void movl(int disp32, AMD64IndirectRegister64 destination, int imm32) {
        assemble0524((byte) 0xC7, disp32, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>disp32</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 2954, Serial#: 1196
    public void movq(int disp32, AMD64IndirectRegister64 destination, int imm32) {
        assemble0525((byte) 0xC7, disp32, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movw  }<i>disp32</i>, <i>destination</i>, <i>imm16</i>
     */
    // Template#: 2955, Serial#: 1205
    public void movw(int disp32, AMD64IndirectRegister64 destination, short imm16) {
        assemble0526((byte) 0xC7, disp32, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 2956, Serial#: 2417
    public void rip_mov(int rel32, SegmentRegister source) {
        assemble0527((byte) 0x8C, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movl  }<i>rel32</i>, <i>imm32</i>
     */
    // Template#: 2957, Serial#: 1184
    public void rip_movl(int rel32, int imm32) {
        assemble0528((byte) 0xC7, rel32, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>rel32</i>, <i>imm32</i>
     */
    // Template#: 2958, Serial#: 1193
    public void rip_movq(int rel32, int imm32) {
        assemble0529((byte) 0xC7, rel32, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movw  }<i>rel32</i>, <i>imm16</i>
     */
    // Template#: 2959, Serial#: 1202
    public void rip_movw(int rel32, short imm16) {
        assemble0530((byte) 0xC7, rel32, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>m64</i>
     */
    // Template#: 2960, Serial#: 901
    public void m_mov_AL(long m64) {
        assemble0531((byte) 0xA0, m64);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>m64</i>
     */
    // Template#: 2961, Serial#: 902
    public void m_mov_EAX(long m64) {
        assemble0531((byte) 0xA1, m64);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>m64</i>
     */
    // Template#: 2962, Serial#: 903
    public void m_mov_RAX(long m64) {
        assemble0532((byte) 0xA1, m64);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>m64</i>
     */
    // Template#: 2963, Serial#: 904
    public void m_mov_AX(long m64) {
        assemble0533((byte) 0xA1, m64);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>m64</i>
     */
    // Template#: 2964, Serial#: 905
    public void m_mov___AL(long m64) {
        assemble0531((byte) 0xA2, m64);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>m64</i>
     */
    // Template#: 2965, Serial#: 906
    public void m_mov___EAX(long m64) {
        assemble0531((byte) 0xA3, m64);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>m64</i>
     */
    // Template#: 2966, Serial#: 907
    public void m_mov___RAX(long m64) {
        assemble0532((byte) 0xA3, m64);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>m64</i>
     */
    // Template#: 2967, Serial#: 908
    public void m_mov___AX(long m64) {
        assemble0533((byte) 0xA3, m64);
    }

    /**
     * Pseudo-external assembler syntax: {@code movapd  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 2968, Serial#: 4982
    public void movapd(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0534((byte) 0x29, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movapd  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 2969, Serial#: 4981
    public void movapd(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0535((byte) 0x29, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movapd  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 2970, Serial#: 4978
    public void movapd(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0536((byte) 0x29, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movapd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2971, Serial#: 4977
    public void movapd(AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0537((byte) 0x29, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movapd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2972, Serial#: 4973
    public void movapd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x28, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movapd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 2973, Serial#: 4972
    public void movapd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x28, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movapd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2974, Serial#: 4969
    public void movapd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x28, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movapd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2975, Serial#: 4968
    public void movapd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x28, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movapd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2976, Serial#: 4976
    public void movapd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x28, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movapd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 2977, Serial#: 4971
    public void rip_movapd(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x28, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movapd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2978, Serial#: 4975
    public void movapd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x28, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movapd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2979, Serial#: 4970
    public void m_movapd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x28, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movapd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 2980, Serial#: 4974
    public void movapd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x28, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movapd  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 2981, Serial#: 4984
    public void movapd(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0538((byte) 0x29, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movapd  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 2982, Serial#: 4979
    public void m_movapd(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0539((byte) 0x29, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movapd  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 2983, Serial#: 4983
    public void movapd(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0540((byte) 0x29, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movapd  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 2984, Serial#: 4980
    public void rip_movapd(int rel32, AMD64XMMRegister source) {
        assemble0541((byte) 0x29, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movaps  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 2985, Serial#: 4912
    public void movaps(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0542((byte) 0x29, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movaps  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 2986, Serial#: 4911
    public void movaps(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0543((byte) 0x29, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movaps  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 2987, Serial#: 4908
    public void movaps(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0544((byte) 0x29, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movaps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2988, Serial#: 4907
    public void movaps(AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0545((byte) 0x29, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movaps  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2989, Serial#: 4903
    public void movaps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0137((byte) 0x28, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movaps  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 2990, Serial#: 4902
    public void movaps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0138((byte) 0x28, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movaps  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2991, Serial#: 4899
    public void movaps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0139((byte) 0x28, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movaps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2992, Serial#: 4898
    public void movaps(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0140((byte) 0x28, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movaps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 2993, Serial#: 4906
    public void movaps(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0141((byte) 0x28, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movaps  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 2994, Serial#: 4901
    public void rip_movaps(AMD64XMMRegister destination, int rel32) {
        assemble0142((byte) 0x28, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movaps  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2995, Serial#: 4905
    public void movaps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0143((byte) 0x28, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movaps  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 2996, Serial#: 4900
    public void m_movaps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0144((byte) 0x28, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movaps  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 2997, Serial#: 4904
    public void movaps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0145((byte) 0x28, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movaps  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 2998, Serial#: 4914
    public void movaps(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0546((byte) 0x29, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movaps  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 2999, Serial#: 4909
    public void m_movaps(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0547((byte) 0x29, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movaps  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3000, Serial#: 4913
    public void movaps(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0548((byte) 0x29, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movaps  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 3001, Serial#: 4910
    public void rip_movaps(int rel32, AMD64XMMRegister source) {
        assemble0549((byte) 0x29, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3002, Serial#: 5843
    public void movdl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0534((byte) 0x7E, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3003, Serial#: 5852
    public void movdq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0550((byte) 0x7E, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3004, Serial#: 5799
    public void movdl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, MMXRegister source) {
        assemble0551((byte) 0x7E, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3005, Serial#: 5808
    public void movdq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, MMXRegister source) {
        assemble0552((byte) 0x7E, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3006, Serial#: 5842
    public void movdl(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0535((byte) 0x7E, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3007, Serial#: 5851
    public void movdq(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0553((byte) 0x7E, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3008, Serial#: 5798
    public void movdl(byte disp8, AMD64IndirectRegister64 destination, MMXRegister source) {
        assemble0554((byte) 0x7E, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3009, Serial#: 5807
    public void movdq(byte disp8, AMD64IndirectRegister64 destination, MMXRegister source) {
        assemble0555((byte) 0x7E, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3010, Serial#: 5839
    public void movdl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0536((byte) 0x7E, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3011, Serial#: 5848
    public void movdq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0556((byte) 0x7E, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3012, Serial#: 5795
    public void movdl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, MMXRegister source) {
        assemble0557((byte) 0x7E, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3013, Serial#: 5804
    public void movdq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, MMXRegister source) {
        assemble0558((byte) 0x7E, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3014, Serial#: 5846
    public void movdl(AMD64GeneralRegister32 destination, AMD64XMMRegister source) {
        assemble0559((byte) 0x7E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3015, Serial#: 5802
    public void movdl(AMD64GeneralRegister32 destination, MMXRegister source) {
        assemble0560((byte) 0x7E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3016, Serial#: 5855
    public void movdq(AMD64GeneralRegister64 destination, AMD64XMMRegister source) {
        assemble0561((byte) 0x7E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3017, Serial#: 5811
    public void movdq(AMD64GeneralRegister64 destination, MMXRegister source) {
        assemble0562((byte) 0x7E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3018, Serial#: 5838
    public void movdl(AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0537((byte) 0x7E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3019, Serial#: 5847
    public void movdq(AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0563((byte) 0x7E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3020, Serial#: 5794
    public void movdl(AMD64IndirectRegister64 destination, MMXRegister source) {
        assemble0564((byte) 0x7E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3021, Serial#: 5803
    public void movdq(AMD64IndirectRegister64 destination, MMXRegister source) {
        assemble0565((byte) 0x7E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3022, Serial#: 5763
    public void movdl(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x6E, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3023, Serial#: 5772
    public void movdq(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0566((byte) 0x6E, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3024, Serial#: 5762
    public void movdl(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x6E, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3025, Serial#: 5771
    public void movdq(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0567((byte) 0x6E, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3026, Serial#: 5759
    public void movdl(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x6E, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3027, Serial#: 5768
    public void movdq(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0568((byte) 0x6E, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3028, Serial#: 5766
    public void movdl(AMD64XMMRegister destination, AMD64GeneralRegister32 source) {
        assemble0569((byte) 0x6E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3029, Serial#: 5775
    public void movdq(AMD64XMMRegister destination, AMD64GeneralRegister64 source) {
        assemble0570((byte) 0x6E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3030, Serial#: 5758
    public void movdl(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x6E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3031, Serial#: 5767
    public void movdq(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0571((byte) 0x6E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3032, Serial#: 5761
    public void rip_movdl(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x6E, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3033, Serial#: 5770
    public void rip_movdq(AMD64XMMRegister destination, int rel32) {
        assemble0572((byte) 0x6E, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3034, Serial#: 5765
    public void movdl(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x6E, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3035, Serial#: 5774
    public void movdq(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0573((byte) 0x6E, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3036, Serial#: 5760
    public void m_movdl(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x6E, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3037, Serial#: 5769
    public void m_movdq(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0574((byte) 0x6E, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3038, Serial#: 5764
    public void movdl(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x6E, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3039, Serial#: 5773
    public void movdq(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0575((byte) 0x6E, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3040, Serial#: 5682
    public void movdl(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0x6E, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3041, Serial#: 5691
    public void movdq(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0576((byte) 0x6E, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3042, Serial#: 5681
    public void movdl(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0x6E, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3043, Serial#: 5690
    public void movdq(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0577((byte) 0x6E, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3044, Serial#: 5678
    public void movdl(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0x6E, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3045, Serial#: 5687
    public void movdq(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0578((byte) 0x6E, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3046, Serial#: 5685
    public void movdl(MMXRegister destination, AMD64GeneralRegister32 source) {
        assemble0579((byte) 0x6E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3047, Serial#: 5694
    public void movdq(MMXRegister destination, AMD64GeneralRegister64 source) {
        assemble0580((byte) 0x6E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3048, Serial#: 5677
    public void movdl(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0x6E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3049, Serial#: 5686
    public void movdq(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0581((byte) 0x6E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3050, Serial#: 5680
    public void rip_movdl(MMXRegister destination, int rel32) {
        assemble0315((byte) 0x6E, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3051, Serial#: 5689
    public void rip_movdq(MMXRegister destination, int rel32) {
        assemble0582((byte) 0x6E, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3052, Serial#: 5684
    public void movdl(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0x6E, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3053, Serial#: 5693
    public void movdq(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0583((byte) 0x6E, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3054, Serial#: 5679
    public void m_movdl(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0x6E, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3055, Serial#: 5688
    public void m_movdq(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0584((byte) 0x6E, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3056, Serial#: 5683
    public void movdl(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0x6E, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3057, Serial#: 5692
    public void movdq(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0585((byte) 0x6E, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3058, Serial#: 5845
    public void movdl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0538((byte) 0x7E, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3059, Serial#: 5854
    public void movdq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0586((byte) 0x7E, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3060, Serial#: 5801
    public void movdl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, MMXRegister source) {
        assemble0587((byte) 0x7E, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3061, Serial#: 5810
    public void movdq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, MMXRegister source) {
        assemble0588((byte) 0x7E, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3062, Serial#: 5840
    public void m_movdl(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0539((byte) 0x7E, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3063, Serial#: 5849
    public void m_movdq(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0589((byte) 0x7E, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3064, Serial#: 5796
    public void m_movdl(int m32, AMD64IndexRegister64 index, Scale scale, MMXRegister source) {
        assemble0590((byte) 0x7E, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3065, Serial#: 5805
    public void m_movdq(int m32, AMD64IndexRegister64 index, Scale scale, MMXRegister source) {
        assemble0591((byte) 0x7E, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3066, Serial#: 5844
    public void movdl(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0540((byte) 0x7E, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3067, Serial#: 5853
    public void movdq(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0592((byte) 0x7E, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3068, Serial#: 5800
    public void movdl(int disp32, AMD64IndirectRegister64 destination, MMXRegister source) {
        assemble0593((byte) 0x7E, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3069, Serial#: 5809
    public void movdq(int disp32, AMD64IndirectRegister64 destination, MMXRegister source) {
        assemble0594((byte) 0x7E, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 3070, Serial#: 5841
    public void rip_movdl(int rel32, AMD64XMMRegister source) {
        assemble0541((byte) 0x7E, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 3071, Serial#: 5850
    public void rip_movdq(int rel32, AMD64XMMRegister source) {
        assemble0595((byte) 0x7E, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdl  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 3072, Serial#: 5797
    public void rip_movdl(int rel32, MMXRegister source) {
        assemble0596((byte) 0x7E, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 3073, Serial#: 5806
    public void rip_movdq(int rel32, MMXRegister source) {
        assemble0597((byte) 0x7E, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movddup  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3074, Serial#: 3406
    public void movddup(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0147((byte) 0x12, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movddup  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3075, Serial#: 3405
    public void movddup(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0148((byte) 0x12, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movddup  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3076, Serial#: 3402
    public void movddup(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0149((byte) 0x12, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movddup  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3077, Serial#: 3401
    public void movddup(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0150((byte) 0x12, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movddup  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3078, Serial#: 3409
    public void movddup(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0151((byte) 0x12, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movddup  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3079, Serial#: 3404
    public void rip_movddup(AMD64XMMRegister destination, int rel32) {
        assemble0152((byte) 0x12, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movddup  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3080, Serial#: 3408
    public void movddup(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0153((byte) 0x12, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movddup  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3081, Serial#: 3403
    public void m_movddup(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0154((byte) 0x12, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movddup  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3082, Serial#: 3407
    public void movddup(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0155((byte) 0x12, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdq2q  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3083, Serial#: 4575
    public void movdq2q(MMXRegister destination, AMD64XMMRegister source) {
        assemble0598((byte) 0xD6, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqa  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3084, Serial#: 5861
    public void movdqa(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0534((byte) 0x7F, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqa  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3085, Serial#: 5860
    public void movdqa(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0535((byte) 0x7F, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqa  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3086, Serial#: 5857
    public void movdqa(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0536((byte) 0x7F, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqa  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3087, Serial#: 5856
    public void movdqa(AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0537((byte) 0x7F, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqa  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3088, Serial#: 5781
    public void movdqa(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x6F, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqa  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3089, Serial#: 5780
    public void movdqa(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x6F, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqa  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3090, Serial#: 5777
    public void movdqa(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x6F, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqa  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3091, Serial#: 5776
    public void movdqa(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x6F, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqa  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3092, Serial#: 5784
    public void movdqa(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x6F, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqa  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3093, Serial#: 5779
    public void rip_movdqa(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x6F, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqa  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3094, Serial#: 5783
    public void movdqa(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x6F, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqa  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3095, Serial#: 5778
    public void m_movdqa(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x6F, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqa  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3096, Serial#: 5782
    public void movdqa(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x6F, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqa  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3097, Serial#: 5863
    public void movdqa(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0538((byte) 0x7F, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqa  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3098, Serial#: 5858
    public void m_movdqa(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0539((byte) 0x7F, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqa  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3099, Serial#: 5862
    public void movdqa(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0540((byte) 0x7F, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqa  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 3100, Serial#: 5859
    public void rip_movdqa(int rel32, AMD64XMMRegister source) {
        assemble0541((byte) 0x7F, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqu  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3101, Serial#: 5895
    public void movdqu(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0599((byte) 0x7F, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqu  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3102, Serial#: 5894
    public void movdqu(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0600((byte) 0x7F, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqu  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3103, Serial#: 5891
    public void movdqu(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0601((byte) 0x7F, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqu  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3104, Serial#: 5890
    public void movdqu(AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0602((byte) 0x7F, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqu  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3105, Serial#: 5790
    public void movdqu(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0156((byte) 0x6F, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqu  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3106, Serial#: 5789
    public void movdqu(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0157((byte) 0x6F, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqu  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3107, Serial#: 5786
    public void movdqu(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0158((byte) 0x6F, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqu  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3108, Serial#: 5785
    public void movdqu(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0159((byte) 0x6F, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqu  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3109, Serial#: 5793
    public void movdqu(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0160((byte) 0x6F, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqu  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3110, Serial#: 5788
    public void rip_movdqu(AMD64XMMRegister destination, int rel32) {
        assemble0161((byte) 0x6F, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqu  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3111, Serial#: 5792
    public void movdqu(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0162((byte) 0x6F, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqu  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3112, Serial#: 5787
    public void m_movdqu(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0163((byte) 0x6F, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqu  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3113, Serial#: 5791
    public void movdqu(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0164((byte) 0x6F, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqu  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3114, Serial#: 5897
    public void movdqu(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0603((byte) 0x7F, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqu  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3115, Serial#: 5892
    public void m_movdqu(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0604((byte) 0x7F, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqu  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3116, Serial#: 5896
    public void movdqu(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0605((byte) 0x7F, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqu  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 3117, Serial#: 5893
    public void rip_movdqu(int rel32, AMD64XMMRegister source) {
        assemble0606((byte) 0x7F, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhpd  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3118, Serial#: 3381
    public void movhpd(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0534((byte) 0x17, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhpd  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3119, Serial#: 3380
    public void movhpd(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0535((byte) 0x17, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhpd  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3120, Serial#: 3377
    public void movhpd(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0536((byte) 0x17, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3121, Serial#: 3376
    public void movhpd(AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0537((byte) 0x17, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhpd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3122, Serial#: 3373
    public void movhpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x16, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhpd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3123, Serial#: 3372
    public void movhpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x16, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhpd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3124, Serial#: 3369
    public void movhpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x16, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3125, Serial#: 3368
    public void movhpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x16, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhpd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3126, Serial#: 3371
    public void rip_movhpd(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x16, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhpd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3127, Serial#: 3375
    public void movhpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x16, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhpd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3128, Serial#: 3370
    public void m_movhpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x16, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhpd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3129, Serial#: 3374
    public void movhpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x16, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhpd  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3130, Serial#: 3383
    public void movhpd(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0538((byte) 0x17, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhpd  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3131, Serial#: 3378
    public void m_movhpd(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0539((byte) 0x17, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhpd  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3132, Serial#: 3382
    public void movhpd(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0540((byte) 0x17, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhpd  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 3133, Serial#: 3379
    public void rip_movhpd(int rel32, AMD64XMMRegister source) {
        assemble0541((byte) 0x17, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhps  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3134, Serial#: 3314
    public void movhps(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0542((byte) 0x17, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhps  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3135, Serial#: 3313
    public void movhps(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0543((byte) 0x17, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhps  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3136, Serial#: 3310
    public void movhps(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0544((byte) 0x17, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3137, Serial#: 3309
    public void movhps(AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0545((byte) 0x17, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhps  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3138, Serial#: 3306
    public void movhps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0137((byte) 0x16, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhps  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3139, Serial#: 3305
    public void movhps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0138((byte) 0x16, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhps  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3140, Serial#: 3302
    public void movhps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0139((byte) 0x16, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3141, Serial#: 3301
    public void movhps(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0140((byte) 0x16, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhps  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3142, Serial#: 3304
    public void rip_movhps(AMD64XMMRegister destination, int rel32) {
        assemble0142((byte) 0x16, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhps  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3143, Serial#: 3308
    public void movhps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0143((byte) 0x16, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhps  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3144, Serial#: 3303
    public void m_movhps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0144((byte) 0x16, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhps  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3145, Serial#: 3307
    public void movhps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0145((byte) 0x16, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhps  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3146, Serial#: 3316
    public void movhps(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0546((byte) 0x17, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhps  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3147, Serial#: 3311
    public void m_movhps(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0547((byte) 0x17, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhps  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3148, Serial#: 3315
    public void movhps(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0548((byte) 0x17, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhps  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 3149, Serial#: 3312
    public void rip_movhps(int rel32, AMD64XMMRegister source) {
        assemble0549((byte) 0x17, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlpd  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3150, Serial#: 3347
    public void movlpd(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0534((byte) 0x13, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlpd  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3151, Serial#: 3346
    public void movlpd(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0535((byte) 0x13, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlpd  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3152, Serial#: 3343
    public void movlpd(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0536((byte) 0x13, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3153, Serial#: 3342
    public void movlpd(AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0537((byte) 0x13, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlpd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3154, Serial#: 3339
    public void movlpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x12, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlpd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3155, Serial#: 3338
    public void movlpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x12, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlpd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3156, Serial#: 3335
    public void movlpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x12, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3157, Serial#: 3334
    public void movlpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x12, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlpd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3158, Serial#: 3337
    public void rip_movlpd(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x12, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlpd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3159, Serial#: 3341
    public void movlpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x12, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlpd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3160, Serial#: 3336
    public void m_movlpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x12, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlpd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3161, Serial#: 3340
    public void movlpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x12, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlpd  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3162, Serial#: 3349
    public void movlpd(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0538((byte) 0x13, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlpd  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3163, Serial#: 3344
    public void m_movlpd(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0539((byte) 0x13, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlpd  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3164, Serial#: 3348
    public void movlpd(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0540((byte) 0x13, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlpd  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 3165, Serial#: 3345
    public void rip_movlpd(int rel32, AMD64XMMRegister source) {
        assemble0541((byte) 0x13, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlps  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3166, Serial#: 3280
    public void movlps(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0542((byte) 0x13, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlps  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3167, Serial#: 3279
    public void movlps(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0543((byte) 0x13, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlps  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3168, Serial#: 3276
    public void movlps(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0544((byte) 0x13, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3169, Serial#: 3275
    public void movlps(AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0545((byte) 0x13, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlps  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3170, Serial#: 3272
    public void movlps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0137((byte) 0x12, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlps  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3171, Serial#: 3271
    public void movlps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0138((byte) 0x12, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlps  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3172, Serial#: 3268
    public void movlps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0139((byte) 0x12, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3173, Serial#: 3267
    public void movlps(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0140((byte) 0x12, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlps  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3174, Serial#: 3270
    public void rip_movlps(AMD64XMMRegister destination, int rel32) {
        assemble0142((byte) 0x12, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlps  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3175, Serial#: 3274
    public void movlps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0143((byte) 0x12, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlps  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3176, Serial#: 3269
    public void m_movlps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0144((byte) 0x12, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlps  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3177, Serial#: 3273
    public void movlps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0145((byte) 0x12, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlps  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3178, Serial#: 3282
    public void movlps(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0546((byte) 0x13, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlps  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3179, Serial#: 3277
    public void m_movlps(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0547((byte) 0x13, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlps  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3180, Serial#: 3281
    public void movlps(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0548((byte) 0x13, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlps  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 3181, Serial#: 3278
    public void rip_movlps(int rel32, AMD64XMMRegister source) {
        assemble0549((byte) 0x13, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movmskpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3182, Serial#: 3724
    public void movmskpd(AMD64GeneralRegister32 destination, AMD64XMMRegister source) {
        assemble0607((byte) 0x50, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movmskps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3183, Serial#: 3660
    public void movmskps(AMD64GeneralRegister32 destination, AMD64XMMRegister source) {
        assemble0608((byte) 0x50, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movnti  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3184, Serial#: 4381
    public void movnti(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0196((byte) 0xC3, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movnti  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3185, Serial#: 4389
    public void movnti(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0197((byte) 0xC3, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movnti  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3186, Serial#: 4380
    public void movnti(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0200((byte) 0xC3, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movnti  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3187, Serial#: 4388
    public void movnti(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0201((byte) 0xC3, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movnti  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3188, Serial#: 4377
    public void movnti(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0204((byte) 0xC3, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movnti  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3189, Serial#: 4385
    public void movnti(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0205((byte) 0xC3, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movnti  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3190, Serial#: 4376
    public void movnti(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0214((byte) 0xC3, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movnti  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3191, Serial#: 4384
    public void movnti(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0215((byte) 0xC3, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movnti  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3192, Serial#: 4383
    public void movnti(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0219((byte) 0xC3, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movnti  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3193, Serial#: 4391
    public void movnti(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0220((byte) 0xC3, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movnti  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 3194, Serial#: 4379
    public void rip_movnti(int rel32, AMD64GeneralRegister32 source) {
        assemble0222((byte) 0xC3, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movnti  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 3195, Serial#: 4387
    public void rip_movnti(int rel32, AMD64GeneralRegister64 source) {
        assemble0223((byte) 0xC3, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movnti  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3196, Serial#: 4378
    public void m_movnti(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0226((byte) 0xC3, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movnti  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3197, Serial#: 4386
    public void m_movnti(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0227((byte) 0xC3, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movnti  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3198, Serial#: 4382
    public void movnti(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0230((byte) 0xC3, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movnti  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3199, Serial#: 4390
    public void movnti(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0231((byte) 0xC3, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movntpd  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3200, Serial#: 4999
    public void movntpd(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0534((byte) 0x2B, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movntpd  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3201, Serial#: 4998
    public void movntpd(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0535((byte) 0x2B, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movntpd  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3202, Serial#: 4995
    public void movntpd(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0536((byte) 0x2B, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movntpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3203, Serial#: 4994
    public void movntpd(AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0537((byte) 0x2B, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movntpd  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3204, Serial#: 5001
    public void movntpd(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0538((byte) 0x2B, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movntpd  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3205, Serial#: 4996
    public void m_movntpd(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0539((byte) 0x2B, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movntpd  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3206, Serial#: 5000
    public void movntpd(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0540((byte) 0x2B, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movntpd  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 3207, Serial#: 4997
    public void rip_movntpd(int rel32, AMD64XMMRegister source) {
        assemble0541((byte) 0x2B, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movntps  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3208, Serial#: 4929
    public void movntps(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0542((byte) 0x2B, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movntps  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3209, Serial#: 4928
    public void movntps(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0543((byte) 0x2B, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movntps  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3210, Serial#: 4925
    public void movntps(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0544((byte) 0x2B, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movntps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3211, Serial#: 4924
    public void movntps(AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0545((byte) 0x2B, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movntps  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3212, Serial#: 4931
    public void movntps(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0546((byte) 0x2B, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movntps  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3213, Serial#: 4926
    public void m_movntps(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0547((byte) 0x2B, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movntps  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3214, Serial#: 4930
    public void movntps(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0548((byte) 0x2B, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movntps  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 3215, Serial#: 4927
    public void rip_movntps(int rel32, AMD64XMMRegister source) {
        assemble0549((byte) 0x2B, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movntq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3216, Serial#: 4636
    public void movntq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, MMXRegister source) {
        assemble0551((byte) 0xE7, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movntq  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3217, Serial#: 4635
    public void movntq(byte disp8, AMD64IndirectRegister64 destination, MMXRegister source) {
        assemble0554((byte) 0xE7, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movntq  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3218, Serial#: 4632
    public void movntq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, MMXRegister source) {
        assemble0557((byte) 0xE7, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movntq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3219, Serial#: 4631
    public void movntq(AMD64IndirectRegister64 destination, MMXRegister source) {
        assemble0564((byte) 0xE7, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movntq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3220, Serial#: 4638
    public void movntq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, MMXRegister source) {
        assemble0587((byte) 0xE7, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movntq  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3221, Serial#: 4633
    public void m_movntq(int m32, AMD64IndexRegister64 index, Scale scale, MMXRegister source) {
        assemble0590((byte) 0xE7, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movntq  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3222, Serial#: 4637
    public void movntq(int disp32, AMD64IndirectRegister64 destination, MMXRegister source) {
        assemble0593((byte) 0xE7, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movntq  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 3223, Serial#: 4634
    public void rip_movntq(int rel32, MMXRegister source) {
        assemble0596((byte) 0xE7, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3224, Serial#: 4570
    public void movq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0534((byte) 0xD6, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3225, Serial#: 5817
    public void movq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, MMXRegister source) {
        assemble0551((byte) 0x7F, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3226, Serial#: 4569
    public void movq(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0535((byte) 0xD6, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3227, Serial#: 5816
    public void movq(byte disp8, AMD64IndirectRegister64 destination, MMXRegister source) {
        assemble0554((byte) 0x7F, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3228, Serial#: 4566
    public void movq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0536((byte) 0xD6, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3229, Serial#: 5813
    public void movq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, MMXRegister source) {
        assemble0557((byte) 0x7F, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3230, Serial#: 4565
    public void movq(AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0537((byte) 0xD6, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3231, Serial#: 5812
    public void movq(AMD64IndirectRegister64 destination, MMXRegister source) {
        assemble0564((byte) 0x7F, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3232, Serial#: 5887
    public void movq(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0156((byte) 0x7E, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3233, Serial#: 5886
    public void movq(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0157((byte) 0x7E, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3234, Serial#: 5883
    public void movq(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0158((byte) 0x7E, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3235, Serial#: 5882
    public void movq(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0159((byte) 0x7E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3236, Serial#: 4573
    public void movq(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0609((byte) 0xD6, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3237, Serial#: 5885
    public void rip_movq(AMD64XMMRegister destination, int rel32) {
        assemble0161((byte) 0x7E, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3238, Serial#: 5889
    public void movq(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0162((byte) 0x7E, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3239, Serial#: 5884
    public void m_movq(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0163((byte) 0x7E, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3240, Serial#: 5888
    public void movq(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0164((byte) 0x7E, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3241, Serial#: 5700
    public void movq(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0x6F, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3242, Serial#: 5699
    public void movq(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0x6F, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3243, Serial#: 5696
    public void movq(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0x6F, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3244, Serial#: 5695
    public void movq(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0x6F, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3245, Serial#: 5703
    public void movq(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0x6F, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3246, Serial#: 5698
    public void rip_movq(MMXRegister destination, int rel32) {
        assemble0315((byte) 0x6F, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3247, Serial#: 5702
    public void movq(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0x6F, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3248, Serial#: 5697
    public void m_movq(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0x6F, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3249, Serial#: 5701
    public void movq(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0x6F, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3250, Serial#: 4572
    public void movq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0538((byte) 0xD6, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3251, Serial#: 5819
    public void movq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, MMXRegister source) {
        assemble0587((byte) 0x7F, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3252, Serial#: 4567
    public void m_movq(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0539((byte) 0xD6, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3253, Serial#: 5814
    public void m_movq(int m32, AMD64IndexRegister64 index, Scale scale, MMXRegister source) {
        assemble0590((byte) 0x7F, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3254, Serial#: 4571
    public void movq(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0540((byte) 0xD6, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3255, Serial#: 5818
    public void movq(int disp32, AMD64IndirectRegister64 destination, MMXRegister source) {
        assemble0593((byte) 0x7F, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 3256, Serial#: 4568
    public void rip_movq(int rel32, AMD64XMMRegister source) {
        assemble0541((byte) 0xD6, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 3257, Serial#: 5815
    public void rip_movq(int rel32, MMXRegister source) {
        assemble0596((byte) 0x7F, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq2dq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3258, Serial#: 4576
    public void movq2dq(AMD64XMMRegister destination, MMXRegister source) {
        assemble0610((byte) 0xD6, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsb  }
     */
    // Template#: 3259, Serial#: 909
    public void movsb() {
        assemble0146((byte) 0xA4);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsl  }
     */
    // Template#: 3260, Serial#: 910
    public void movsl() {
        assemble0146((byte) 0xA5);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsq  }
     */
    // Template#: 3261, Serial#: 911
    public void movsq() {
        assemble0243((byte) 0xA5);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsw  }
     */
    // Template#: 3262, Serial#: 912
    public void movsw() {
        assemble0271((byte) 0xA5);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsd  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3263, Serial#: 3398
    public void movsd(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0611((byte) 0x11, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsd  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3264, Serial#: 3397
    public void movsd(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0612((byte) 0x11, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsd  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3265, Serial#: 3394
    public void movsd(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0613((byte) 0x11, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3266, Serial#: 3393
    public void movsd(AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0614((byte) 0x11, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3267, Serial#: 3389
    public void movsd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0147((byte) 0x10, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3268, Serial#: 3388
    public void movsd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0148((byte) 0x10, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3269, Serial#: 3385
    public void movsd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0149((byte) 0x10, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3270, Serial#: 3384
    public void movsd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0150((byte) 0x10, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3271, Serial#: 3392
    public void movsd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0151((byte) 0x10, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3272, Serial#: 3387
    public void rip_movsd(AMD64XMMRegister destination, int rel32) {
        assemble0152((byte) 0x10, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3273, Serial#: 3391
    public void movsd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0153((byte) 0x10, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3274, Serial#: 3386
    public void m_movsd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0154((byte) 0x10, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3275, Serial#: 3390
    public void movsd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0155((byte) 0x10, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsd  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3276, Serial#: 3400
    public void movsd(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0615((byte) 0x11, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsd  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3277, Serial#: 3395
    public void m_movsd(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0616((byte) 0x11, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsd  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3278, Serial#: 3399
    public void movsd(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0617((byte) 0x11, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsd  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 3279, Serial#: 3396
    public void rip_movsd(int rel32, AMD64XMMRegister source) {
        assemble0618((byte) 0x11, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsldup  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3280, Serial#: 3432
    public void movsldup(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0156((byte) 0x12, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsldup  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3281, Serial#: 3431
    public void movsldup(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0157((byte) 0x12, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsldup  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3282, Serial#: 3428
    public void movsldup(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0158((byte) 0x12, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsldup  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3283, Serial#: 3427
    public void movsldup(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0159((byte) 0x12, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsldup  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3284, Serial#: 3435
    public void movsldup(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0160((byte) 0x12, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsldup  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3285, Serial#: 3430
    public void rip_movsldup(AMD64XMMRegister destination, int rel32) {
        assemble0161((byte) 0x12, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsldup  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3286, Serial#: 3434
    public void movsldup(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0162((byte) 0x12, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsldup  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3287, Serial#: 3429
    public void m_movsldup(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0163((byte) 0x12, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsldup  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3288, Serial#: 3433
    public void movsldup(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0164((byte) 0x12, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movss  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3289, Serial#: 3424
    public void movss(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0599((byte) 0x11, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movss  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3290, Serial#: 3423
    public void movss(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0600((byte) 0x11, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movss  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3291, Serial#: 3420
    public void movss(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0601((byte) 0x11, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movss  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3292, Serial#: 3419
    public void movss(AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0602((byte) 0x11, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movss  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3293, Serial#: 3415
    public void movss(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0156((byte) 0x10, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movss  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3294, Serial#: 3414
    public void movss(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0157((byte) 0x10, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movss  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3295, Serial#: 3411
    public void movss(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0158((byte) 0x10, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movss  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3296, Serial#: 3410
    public void movss(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0159((byte) 0x10, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movss  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3297, Serial#: 3418
    public void movss(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0160((byte) 0x10, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movss  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3298, Serial#: 3413
    public void rip_movss(AMD64XMMRegister destination, int rel32) {
        assemble0161((byte) 0x10, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movss  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3299, Serial#: 3417
    public void movss(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0162((byte) 0x10, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movss  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3300, Serial#: 3412
    public void m_movss(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0163((byte) 0x10, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movss  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3301, Serial#: 3416
    public void movss(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0164((byte) 0x10, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movss  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3302, Serial#: 3426
    public void movss(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0603((byte) 0x11, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movss  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3303, Serial#: 3421
    public void m_movss(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0604((byte) 0x11, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movss  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3304, Serial#: 3425
    public void movss(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0605((byte) 0x11, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movss  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 3305, Serial#: 3422
    public void rip_movss(int rel32, AMD64XMMRegister source) {
        assemble0606((byte) 0x11, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsx  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3306, Serial#: 6280
    public void movsxb(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0165((byte) 0xBE, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsx  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3307, Serial#: 6279
    public void movsxb(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0166((byte) 0xBE, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsx  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3308, Serial#: 6276
    public void movsxb(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0167((byte) 0xBE, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsx  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3309, Serial#: 6283
    public void movsxb(AMD64GeneralRegister16 destination, AMD64GeneralRegister8 source) {
        assemble0619((byte) 0xBE, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsx  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3310, Serial#: 6275
    public void movsxb(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        assemble0169((byte) 0xBE, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsx  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3311, Serial#: 6278
    public void rip_movsxb(AMD64GeneralRegister16 destination, int rel32) {
        assemble0170((byte) 0xBE, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsx  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3312, Serial#: 6282
    public void movsxb(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0171((byte) 0xBE, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsx  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3313, Serial#: 6277
    public void m_movsxb(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0172((byte) 0xBE, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsx  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3314, Serial#: 6281
    public void movsxb(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0173((byte) 0xBE, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsx  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3315, Serial#: 6262
    public void movsxb(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0174((byte) 0xBE, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsx  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3316, Serial#: 6261
    public void movsxb(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0175((byte) 0xBE, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsx  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3317, Serial#: 6258
    public void movsxb(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0176((byte) 0xBE, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsx  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3318, Serial#: 6265
    public void movsxb(AMD64GeneralRegister32 destination, AMD64GeneralRegister8 source) {
        assemble0620((byte) 0xBE, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsx  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3319, Serial#: 6257
    public void movsxb(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0178((byte) 0xBE, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsx  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3320, Serial#: 6260
    public void rip_movsxb(AMD64GeneralRegister32 destination, int rel32) {
        assemble0179((byte) 0xBE, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsx  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3321, Serial#: 6264
    public void movsxb(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0180((byte) 0xBE, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsx  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3322, Serial#: 6259
    public void m_movsxb(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0181((byte) 0xBE, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsx  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3323, Serial#: 6263
    public void movsxb(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0182((byte) 0xBE, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsx  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3324, Serial#: 6271
    public void movsxb(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0183((byte) 0xBE, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsx  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3325, Serial#: 6270
    public void movsxb(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0184((byte) 0xBE, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsx  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3326, Serial#: 6267
    public void movsxb(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0185((byte) 0xBE, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsx  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3327, Serial#: 6274
    public void movsxb(AMD64GeneralRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0621((byte) 0xBE, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsx  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3328, Serial#: 6266
    public void movsxb(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0187((byte) 0xBE, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsx  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3329, Serial#: 6269
    public void rip_movsxb(AMD64GeneralRegister64 destination, int rel32) {
        assemble0188((byte) 0xBE, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsx  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3330, Serial#: 6273
    public void movsxb(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0189((byte) 0xBE, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsx  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3331, Serial#: 6268
    public void m_movsxb(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0190((byte) 0xBE, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsx  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3332, Serial#: 6272
    public void movsxb(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0191((byte) 0xBE, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsxd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3333, Serial#: 296
    public void movsxd(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0055((byte) 0x63, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsxd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3334, Serial#: 295
    public void movsxd(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0056((byte) 0x63, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsxd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3335, Serial#: 292
    public void movsxd(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0057((byte) 0x63, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsxd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3336, Serial#: 299
    public void movsxd(AMD64GeneralRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0622((byte) 0x63, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsxd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3337, Serial#: 291
    public void movsxd(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0059((byte) 0x63, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsxd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3338, Serial#: 294
    public void rip_movsxd(AMD64GeneralRegister64 destination, int rel32) {
        assemble0060((byte) 0x63, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsxd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3339, Serial#: 298
    public void movsxd(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0062((byte) 0x63, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsxd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3340, Serial#: 293
    public void m_movsxd(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0063((byte) 0x63, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsxd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3341, Serial#: 297
    public void movsxd(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0064((byte) 0x63, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsxw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3342, Serial#: 6289
    public void movsxw(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0174((byte) 0xBF, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsxw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3343, Serial#: 6288
    public void movsxw(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0175((byte) 0xBF, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsxw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3344, Serial#: 6285
    public void movsxw(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0176((byte) 0xBF, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsxw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3345, Serial#: 6292
    public void movsxw(AMD64GeneralRegister32 destination, AMD64GeneralRegister16 source) {
        assemble0623((byte) 0xBF, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsxw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3346, Serial#: 6284
    public void movsxw(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0178((byte) 0xBF, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsxw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3347, Serial#: 6287
    public void rip_movsxw(AMD64GeneralRegister32 destination, int rel32) {
        assemble0179((byte) 0xBF, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsxw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3348, Serial#: 6291
    public void movsxw(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0180((byte) 0xBF, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsxw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3349, Serial#: 6286
    public void m_movsxw(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0181((byte) 0xBF, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsxw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3350, Serial#: 6290
    public void movsxw(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0182((byte) 0xBF, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsxw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3351, Serial#: 6298
    public void movsxw(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0183((byte) 0xBF, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsxw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3352, Serial#: 6297
    public void movsxw(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0184((byte) 0xBF, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsxw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3353, Serial#: 6294
    public void movsxw(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0185((byte) 0xBF, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsxw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3354, Serial#: 6301
    public void movsxw(AMD64GeneralRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0624((byte) 0xBF, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsxw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3355, Serial#: 6293
    public void movsxw(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0187((byte) 0xBF, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsxw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3356, Serial#: 6296
    public void rip_movsxw(AMD64GeneralRegister64 destination, int rel32) {
        assemble0188((byte) 0xBF, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsxw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3357, Serial#: 6300
    public void movsxw(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0189((byte) 0xBF, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsxw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3358, Serial#: 6295
    public void m_movsxw(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0190((byte) 0xBF, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsxw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3359, Serial#: 6299
    public void movsxw(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0191((byte) 0xBF, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movupd  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3360, Serial#: 3331
    public void movupd(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0534((byte) 0x11, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movupd  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3361, Serial#: 3330
    public void movupd(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0535((byte) 0x11, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movupd  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3362, Serial#: 3327
    public void movupd(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0536((byte) 0x11, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movupd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3363, Serial#: 3326
    public void movupd(AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0537((byte) 0x11, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movupd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3364, Serial#: 3322
    public void movupd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x10, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movupd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3365, Serial#: 3321
    public void movupd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x10, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movupd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3366, Serial#: 3318
    public void movupd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x10, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movupd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3367, Serial#: 3317
    public void movupd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x10, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movupd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3368, Serial#: 3325
    public void movupd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x10, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movupd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3369, Serial#: 3320
    public void rip_movupd(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x10, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movupd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3370, Serial#: 3324
    public void movupd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x10, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movupd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3371, Serial#: 3319
    public void m_movupd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x10, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movupd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3372, Serial#: 3323
    public void movupd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x10, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movupd  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3373, Serial#: 3333
    public void movupd(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0538((byte) 0x11, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movupd  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3374, Serial#: 3328
    public void m_movupd(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0539((byte) 0x11, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movupd  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3375, Serial#: 3332
    public void movupd(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0540((byte) 0x11, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movupd  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 3376, Serial#: 3329
    public void rip_movupd(int rel32, AMD64XMMRegister source) {
        assemble0541((byte) 0x11, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movups  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3377, Serial#: 3264
    public void movups(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0542((byte) 0x11, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movups  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3378, Serial#: 3263
    public void movups(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0543((byte) 0x11, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movups  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3379, Serial#: 3260
    public void movups(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0544((byte) 0x11, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movups  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3380, Serial#: 3259
    public void movups(AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0545((byte) 0x11, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movups  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3381, Serial#: 3255
    public void movups(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0137((byte) 0x10, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movups  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3382, Serial#: 3254
    public void movups(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0138((byte) 0x10, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movups  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3383, Serial#: 3251
    public void movups(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0139((byte) 0x10, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movups  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3384, Serial#: 3250
    public void movups(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0140((byte) 0x10, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movups  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3385, Serial#: 3258
    public void movups(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0141((byte) 0x10, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movups  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3386, Serial#: 3253
    public void rip_movups(AMD64XMMRegister destination, int rel32) {
        assemble0142((byte) 0x10, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movups  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3387, Serial#: 3257
    public void movups(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0143((byte) 0x10, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movups  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3388, Serial#: 3252
    public void m_movups(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0144((byte) 0x10, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movups  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3389, Serial#: 3256
    public void movups(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0145((byte) 0x10, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movups  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3390, Serial#: 3266
    public void movups(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0546((byte) 0x11, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movups  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3391, Serial#: 3261
    public void m_movups(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0547((byte) 0x11, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movups  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3392, Serial#: 3265
    public void movups(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0548((byte) 0x11, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movups  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 3393, Serial#: 3262
    public void rip_movups(int rel32, AMD64XMMRegister source) {
        assemble0549((byte) 0x11, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzx  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3394, Serial#: 4309
    public void movzxb(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0165((byte) 0xB6, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzx  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3395, Serial#: 4308
    public void movzxb(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0166((byte) 0xB6, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzx  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3396, Serial#: 4305
    public void movzxb(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0167((byte) 0xB6, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzx  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3397, Serial#: 4312
    public void movzxb(AMD64GeneralRegister16 destination, AMD64GeneralRegister8 source) {
        assemble0619((byte) 0xB6, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzx  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3398, Serial#: 4304
    public void movzxb(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        assemble0169((byte) 0xB6, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzx  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3399, Serial#: 4307
    public void rip_movzxb(AMD64GeneralRegister16 destination, int rel32) {
        assemble0170((byte) 0xB6, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzx  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3400, Serial#: 4311
    public void movzxb(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0171((byte) 0xB6, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzx  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3401, Serial#: 4306
    public void m_movzxb(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0172((byte) 0xB6, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzx  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3402, Serial#: 4310
    public void movzxb(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0173((byte) 0xB6, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzx  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3403, Serial#: 4291
    public void movzxb(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0174((byte) 0xB6, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzx  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3404, Serial#: 4290
    public void movzxb(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0175((byte) 0xB6, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzx  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3405, Serial#: 4287
    public void movzxb(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0176((byte) 0xB6, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzx  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3406, Serial#: 4294
    public void movzxb(AMD64GeneralRegister32 destination, AMD64GeneralRegister8 source) {
        assemble0620((byte) 0xB6, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzx  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3407, Serial#: 4286
    public void movzxb(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0178((byte) 0xB6, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzx  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3408, Serial#: 4289
    public void rip_movzxb(AMD64GeneralRegister32 destination, int rel32) {
        assemble0179((byte) 0xB6, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzx  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3409, Serial#: 4293
    public void movzxb(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0180((byte) 0xB6, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzx  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3410, Serial#: 4288
    public void m_movzxb(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0181((byte) 0xB6, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzx  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3411, Serial#: 4292
    public void movzxb(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0182((byte) 0xB6, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzx  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3412, Serial#: 4300
    public void movzxb(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0183((byte) 0xB6, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzx  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3413, Serial#: 4299
    public void movzxb(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0184((byte) 0xB6, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzx  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3414, Serial#: 4296
    public void movzxb(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0185((byte) 0xB6, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzx  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3415, Serial#: 4303
    public void movzxb(AMD64GeneralRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0621((byte) 0xB6, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzx  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3416, Serial#: 4295
    public void movzxb(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0187((byte) 0xB6, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzx  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3417, Serial#: 4298
    public void rip_movzxb(AMD64GeneralRegister64 destination, int rel32) {
        assemble0188((byte) 0xB6, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzx  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3418, Serial#: 4302
    public void movzxb(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0189((byte) 0xB6, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzx  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3419, Serial#: 4297
    public void m_movzxb(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0190((byte) 0xB6, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzx  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3420, Serial#: 4301
    public void movzxb(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0191((byte) 0xB6, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzxd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3421, Serial#: 305
    public void movzxd(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0625((byte) 0x63, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzxd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3422, Serial#: 304
    public void movzxd(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0626((byte) 0x63, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzxd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3423, Serial#: 301
    public void movzxd(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0627((byte) 0x63, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzxd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3424, Serial#: 308
    public void movzxd(AMD64GeneralRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0628((byte) 0x63, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzxd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3425, Serial#: 300
    public void movzxd(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0629((byte) 0x63, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzxd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3426, Serial#: 303
    public void rip_movzxd(AMD64GeneralRegister64 destination, int rel32) {
        assemble0630((byte) 0x63, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzxd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3427, Serial#: 307
    public void movzxd(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0631((byte) 0x63, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzxd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3428, Serial#: 302
    public void m_movzxd(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0632((byte) 0x63, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzxd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3429, Serial#: 306
    public void movzxd(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0633((byte) 0x63, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzxw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3430, Serial#: 4318
    public void movzxw(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0174((byte) 0xB7, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzxw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3431, Serial#: 4317
    public void movzxw(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0175((byte) 0xB7, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzxw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3432, Serial#: 4314
    public void movzxw(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0176((byte) 0xB7, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzxw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3433, Serial#: 4321
    public void movzxw(AMD64GeneralRegister32 destination, AMD64GeneralRegister16 source) {
        assemble0623((byte) 0xB7, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzxw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3434, Serial#: 4313
    public void movzxw(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0178((byte) 0xB7, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzxw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3435, Serial#: 4316
    public void rip_movzxw(AMD64GeneralRegister32 destination, int rel32) {
        assemble0179((byte) 0xB7, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzxw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3436, Serial#: 4320
    public void movzxw(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0180((byte) 0xB7, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzxw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3437, Serial#: 4315
    public void m_movzxw(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0181((byte) 0xB7, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzxw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3438, Serial#: 4319
    public void movzxw(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0182((byte) 0xB7, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzxw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3439, Serial#: 4327
    public void movzxw(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0183((byte) 0xB7, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzxw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3440, Serial#: 4326
    public void movzxw(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0184((byte) 0xB7, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzxw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3441, Serial#: 4323
    public void movzxw(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0185((byte) 0xB7, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzxw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3442, Serial#: 4330
    public void movzxw(AMD64GeneralRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0624((byte) 0xB7, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzxw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3443, Serial#: 4322
    public void movzxw(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0187((byte) 0xB7, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzxw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3444, Serial#: 4325
    public void rip_movzxw(AMD64GeneralRegister64 destination, int rel32) {
        assemble0188((byte) 0xB7, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzxw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3445, Serial#: 4329
    public void movzxw(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0189((byte) 0xB7, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzxw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3446, Serial#: 4324
    public void m_movzxw(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0190((byte) 0xB7, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzxw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3447, Serial#: 4328
    public void movzxw(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0191((byte) 0xB7, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3448, Serial#: 1766
    public void mulb___AL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xF6, (byte) 0x04, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mull  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3449, Serial#: 1829
    public void mull(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xF7, (byte) 0x04, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3450, Serial#: 1892
    public void mulq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0375((byte) 0xF7, (byte) 0x04, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3451, Serial#: 1955
    public void mulw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0376((byte) 0xF7, (byte) 0x04, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulb  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 3452, Serial#: 1765
    public void mulb___AL(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xF6, (byte) 0x04, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code mull  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 3453, Serial#: 1828
    public void mull(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xF7, (byte) 0x04, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulq  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 3454, Serial#: 1891
    public void mulq(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0377((byte) 0xF7, (byte) 0x04, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulw  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 3455, Serial#: 1954
    public void mulw(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0378((byte) 0xF7, (byte) 0x04, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulb  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3456, Serial#: 1744
    public void mulb___AL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xF6, (byte) 0x04, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mull  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3457, Serial#: 1807
    public void mull(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xF7, (byte) 0x04, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulq  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3458, Serial#: 1870
    public void mulq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0379((byte) 0xF7, (byte) 0x04, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulw  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3459, Serial#: 1933
    public void mulw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0380((byte) 0xF7, (byte) 0x04, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulw  }<i>destination</i>
     */
    // Template#: 3460, Serial#: 1979
    public void mulw(AMD64GeneralRegister16 destination) {
        assemble0235((byte) 0xF7, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code mull  }<i>destination</i>
     */
    // Template#: 3461, Serial#: 1853
    public void mull(AMD64GeneralRegister32 destination) {
        assemble0381((byte) 0xF7, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulq  }<i>destination</i>
     */
    // Template#: 3462, Serial#: 1916
    public void mulq(AMD64GeneralRegister64 destination) {
        assemble0382((byte) 0xF7, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulb  }<i>destination</i>
     */
    // Template#: 3463, Serial#: 1790
    public void mulb___AL(AMD64GeneralRegister8 destination) {
        assemble0383((byte) 0xF6, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulb  }<i>destination</i>
     */
    // Template#: 3464, Serial#: 1743
    public void mulb___AL(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xF6, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code mull  }<i>destination</i>
     */
    // Template#: 3465, Serial#: 1806
    public void mull(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xF7, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulq  }<i>destination</i>
     */
    // Template#: 3466, Serial#: 1869
    public void mulq(AMD64IndirectRegister64 destination) {
        assemble0384((byte) 0xF7, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulw  }<i>destination</i>
     */
    // Template#: 3467, Serial#: 1932
    public void mulw(AMD64IndirectRegister64 destination) {
        assemble0385((byte) 0xF7, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulb  }<i>rel32</i>
     */
    // Template#: 3468, Serial#: 1746
    public void rip_mulb___AL(int rel32) {
        assemble0239((byte) 0xF6, (byte) 0x04, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code mull  }<i>rel32</i>
     */
    // Template#: 3469, Serial#: 1809
    public void rip_mull(int rel32) {
        assemble0239((byte) 0xF7, (byte) 0x04, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulq  }<i>rel32</i>
     */
    // Template#: 3470, Serial#: 1872
    public void rip_mulq(int rel32) {
        assemble0386((byte) 0xF7, (byte) 0x04, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulw  }<i>rel32</i>
     */
    // Template#: 3471, Serial#: 1935
    public void rip_mulw(int rel32) {
        assemble0387((byte) 0xF7, (byte) 0x04, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3472, Serial#: 1780
    public void mulb___AL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xF6, (byte) 0x04, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mull  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3473, Serial#: 1843
    public void mull(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xF7, (byte) 0x04, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3474, Serial#: 1906
    public void mulq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0388((byte) 0xF7, (byte) 0x04, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3475, Serial#: 1969
    public void mulw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0389((byte) 0xF7, (byte) 0x04, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulb  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3476, Serial#: 1745
    public void m_mulb___AL(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xF6, (byte) 0x04, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mull  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3477, Serial#: 1808
    public void m_mull(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xF7, (byte) 0x04, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulq  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3478, Serial#: 1871
    public void m_mulq(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0390((byte) 0xF7, (byte) 0x04, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulw  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3479, Serial#: 1934
    public void m_mulw(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0391((byte) 0xF7, (byte) 0x04, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulb  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 3480, Serial#: 1779
    public void mulb___AL(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xF6, (byte) 0x04, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code mull  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 3481, Serial#: 1842
    public void mull(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xF7, (byte) 0x04, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulq  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 3482, Serial#: 1905
    public void mulq(int disp32, AMD64IndirectRegister64 destination) {
        assemble0392((byte) 0xF7, (byte) 0x04, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulw  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 3483, Serial#: 1968
    public void mulw(int disp32, AMD64IndirectRegister64 destination) {
        assemble0393((byte) 0xF7, (byte) 0x04, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulpd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3484, Serial#: 5448
    public void mulpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x59, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulpd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3485, Serial#: 5447
    public void mulpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x59, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulpd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3486, Serial#: 5444
    public void mulpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x59, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3487, Serial#: 5443
    public void mulpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x59, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3488, Serial#: 5451
    public void mulpd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x59, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulpd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3489, Serial#: 5446
    public void rip_mulpd(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x59, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulpd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3490, Serial#: 5450
    public void mulpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x59, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulpd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3491, Serial#: 5445
    public void m_mulpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x59, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulpd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3492, Serial#: 5449
    public void mulpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x59, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulps  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3493, Serial#: 5376
    public void mulps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0137((byte) 0x59, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulps  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3494, Serial#: 5375
    public void mulps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0138((byte) 0x59, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulps  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3495, Serial#: 5372
    public void mulps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0139((byte) 0x59, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3496, Serial#: 5371
    public void mulps(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0140((byte) 0x59, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3497, Serial#: 5379
    public void mulps(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0141((byte) 0x59, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulps  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3498, Serial#: 5374
    public void rip_mulps(AMD64XMMRegister destination, int rel32) {
        assemble0142((byte) 0x59, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulps  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3499, Serial#: 5378
    public void mulps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0143((byte) 0x59, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulps  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3500, Serial#: 5373
    public void m_mulps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0144((byte) 0x59, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulps  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3501, Serial#: 5377
    public void mulps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0145((byte) 0x59, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulsd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3502, Serial#: 5520
    public void mulsd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0147((byte) 0x59, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulsd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3503, Serial#: 5519
    public void mulsd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0148((byte) 0x59, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulsd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3504, Serial#: 5516
    public void mulsd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0149((byte) 0x59, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulsd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3505, Serial#: 5515
    public void mulsd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0150((byte) 0x59, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulsd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3506, Serial#: 5523
    public void mulsd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0151((byte) 0x59, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulsd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3507, Serial#: 5518
    public void rip_mulsd(AMD64XMMRegister destination, int rel32) {
        assemble0152((byte) 0x59, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulsd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3508, Serial#: 5522
    public void mulsd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0153((byte) 0x59, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulsd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3509, Serial#: 5517
    public void m_mulsd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0154((byte) 0x59, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulsd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3510, Serial#: 5521
    public void mulsd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0155((byte) 0x59, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulss  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3511, Serial#: 5583
    public void mulss(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0156((byte) 0x59, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulss  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3512, Serial#: 5582
    public void mulss(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0157((byte) 0x59, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulss  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3513, Serial#: 5579
    public void mulss(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0158((byte) 0x59, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulss  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3514, Serial#: 5578
    public void mulss(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0159((byte) 0x59, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulss  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3515, Serial#: 5586
    public void mulss(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0160((byte) 0x59, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulss  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3516, Serial#: 5581
    public void rip_mulss(AMD64XMMRegister destination, int rel32) {
        assemble0161((byte) 0x59, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulss  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3517, Serial#: 5585
    public void mulss(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0162((byte) 0x59, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulss  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3518, Serial#: 5580
    public void m_mulss(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0163((byte) 0x59, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulss  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3519, Serial#: 5584
    public void mulss(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0164((byte) 0x59, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mvntdq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3520, Serial#: 4707
    public void mvntdq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0534((byte) 0xE7, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mvntdq  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3521, Serial#: 4706
    public void mvntdq(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0535((byte) 0xE7, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mvntdq  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3522, Serial#: 4703
    public void mvntdq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0536((byte) 0xE7, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mvntdq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3523, Serial#: 4702
    public void mvntdq(AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0537((byte) 0xE7, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mvntdq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3524, Serial#: 4709
    public void mvntdq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0538((byte) 0xE7, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mvntdq  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3525, Serial#: 4704
    public void m_mvntdq(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        assemble0539((byte) 0xE7, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mvntdq  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3526, Serial#: 4708
    public void mvntdq(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        assemble0540((byte) 0xE7, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code mvntdq  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 3527, Serial#: 4705
    public void rip_mvntdq(int rel32, AMD64XMMRegister source) {
        assemble0541((byte) 0xE7, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code negb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3528, Serial#: 1764
    public void negb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xF6, (byte) 0x03, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code negl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3529, Serial#: 1827
    public void negl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xF7, (byte) 0x03, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code negq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3530, Serial#: 1890
    public void negq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0375((byte) 0xF7, (byte) 0x03, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code negw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3531, Serial#: 1953
    public void negw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0376((byte) 0xF7, (byte) 0x03, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code negb  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 3532, Serial#: 1763
    public void negb(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xF6, (byte) 0x03, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code negl  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 3533, Serial#: 1826
    public void negl(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xF7, (byte) 0x03, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code negq  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 3534, Serial#: 1889
    public void negq(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0377((byte) 0xF7, (byte) 0x03, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code negw  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 3535, Serial#: 1952
    public void negw(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0378((byte) 0xF7, (byte) 0x03, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code negb  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3536, Serial#: 1740
    public void negb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xF6, (byte) 0x03, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code negl  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3537, Serial#: 1803
    public void negl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xF7, (byte) 0x03, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code negq  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3538, Serial#: 1866
    public void negq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0379((byte) 0xF7, (byte) 0x03, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code negw  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3539, Serial#: 1929
    public void negw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0380((byte) 0xF7, (byte) 0x03, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code negw  }<i>destination</i>
     */
    // Template#: 3540, Serial#: 1978
    public void negw(AMD64GeneralRegister16 destination) {
        assemble0235((byte) 0xF7, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code negl  }<i>destination</i>
     */
    // Template#: 3541, Serial#: 1852
    public void negl(AMD64GeneralRegister32 destination) {
        assemble0381((byte) 0xF7, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code negq  }<i>destination</i>
     */
    // Template#: 3542, Serial#: 1915
    public void negq(AMD64GeneralRegister64 destination) {
        assemble0382((byte) 0xF7, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code negb  }<i>destination</i>
     */
    // Template#: 3543, Serial#: 1789
    public void negb(AMD64GeneralRegister8 destination) {
        assemble0383((byte) 0xF6, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code negb  }<i>destination</i>
     */
    // Template#: 3544, Serial#: 1739
    public void negb(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xF6, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code negl  }<i>destination</i>
     */
    // Template#: 3545, Serial#: 1802
    public void negl(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xF7, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code negq  }<i>destination</i>
     */
    // Template#: 3546, Serial#: 1865
    public void negq(AMD64IndirectRegister64 destination) {
        assemble0384((byte) 0xF7, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code negw  }<i>destination</i>
     */
    // Template#: 3547, Serial#: 1928
    public void negw(AMD64IndirectRegister64 destination) {
        assemble0385((byte) 0xF7, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code negb  }<i>rel32</i>
     */
    // Template#: 3548, Serial#: 1742
    public void rip_negb(int rel32) {
        assemble0239((byte) 0xF6, (byte) 0x03, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code negl  }<i>rel32</i>
     */
    // Template#: 3549, Serial#: 1805
    public void rip_negl(int rel32) {
        assemble0239((byte) 0xF7, (byte) 0x03, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code negq  }<i>rel32</i>
     */
    // Template#: 3550, Serial#: 1868
    public void rip_negq(int rel32) {
        assemble0386((byte) 0xF7, (byte) 0x03, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code negw  }<i>rel32</i>
     */
    // Template#: 3551, Serial#: 1931
    public void rip_negw(int rel32) {
        assemble0387((byte) 0xF7, (byte) 0x03, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code negb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3552, Serial#: 1778
    public void negb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xF6, (byte) 0x03, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code negl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3553, Serial#: 1841
    public void negl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xF7, (byte) 0x03, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code negq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3554, Serial#: 1904
    public void negq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0388((byte) 0xF7, (byte) 0x03, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code negw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3555, Serial#: 1967
    public void negw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0389((byte) 0xF7, (byte) 0x03, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code negb  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3556, Serial#: 1741
    public void m_negb(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xF6, (byte) 0x03, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code negl  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3557, Serial#: 1804
    public void m_negl(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xF7, (byte) 0x03, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code negq  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3558, Serial#: 1867
    public void m_negq(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0390((byte) 0xF7, (byte) 0x03, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code negw  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3559, Serial#: 1930
    public void m_negw(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0391((byte) 0xF7, (byte) 0x03, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code negb  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 3560, Serial#: 1777
    public void negb(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xF6, (byte) 0x03, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code negl  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 3561, Serial#: 1840
    public void negl(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xF7, (byte) 0x03, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code negq  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 3562, Serial#: 1903
    public void negq(int disp32, AMD64IndirectRegister64 destination) {
        assemble0392((byte) 0xF7, (byte) 0x03, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code negw  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 3563, Serial#: 1966
    public void negw(int disp32, AMD64IndirectRegister64 destination) {
        assemble0393((byte) 0xF7, (byte) 0x03, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code nop  }
     */
    // Template#: 3564, Serial#: 897
    public void nop() {
        assemble0146((byte) 0x90);
    }

    /**
     * Pseudo-external assembler syntax: {@code notb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3565, Serial#: 1762
    public void notb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xF6, (byte) 0x02, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code notl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3566, Serial#: 1825
    public void notl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xF7, (byte) 0x02, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code notq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3567, Serial#: 1888
    public void notq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0375((byte) 0xF7, (byte) 0x02, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code notw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3568, Serial#: 1951
    public void notw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0376((byte) 0xF7, (byte) 0x02, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code notb  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 3569, Serial#: 1761
    public void notb(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xF6, (byte) 0x02, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code notl  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 3570, Serial#: 1824
    public void notl(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xF7, (byte) 0x02, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code notq  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 3571, Serial#: 1887
    public void notq(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0377((byte) 0xF7, (byte) 0x02, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code notw  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 3572, Serial#: 1950
    public void notw(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0378((byte) 0xF7, (byte) 0x02, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code notb  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3573, Serial#: 1736
    public void notb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xF6, (byte) 0x02, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code notl  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3574, Serial#: 1799
    public void notl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xF7, (byte) 0x02, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code notq  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3575, Serial#: 1862
    public void notq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0379((byte) 0xF7, (byte) 0x02, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code notw  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3576, Serial#: 1925
    public void notw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0380((byte) 0xF7, (byte) 0x02, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code notw  }<i>destination</i>
     */
    // Template#: 3577, Serial#: 1977
    public void notw(AMD64GeneralRegister16 destination) {
        assemble0235((byte) 0xF7, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code notl  }<i>destination</i>
     */
    // Template#: 3578, Serial#: 1851
    public void notl(AMD64GeneralRegister32 destination) {
        assemble0381((byte) 0xF7, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code notq  }<i>destination</i>
     */
    // Template#: 3579, Serial#: 1914
    public void notq(AMD64GeneralRegister64 destination) {
        assemble0382((byte) 0xF7, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code notb  }<i>destination</i>
     */
    // Template#: 3580, Serial#: 1788
    public void notb(AMD64GeneralRegister8 destination) {
        assemble0383((byte) 0xF6, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code notb  }<i>destination</i>
     */
    // Template#: 3581, Serial#: 1735
    public void notb(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xF6, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code notl  }<i>destination</i>
     */
    // Template#: 3582, Serial#: 1798
    public void notl(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xF7, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code notq  }<i>destination</i>
     */
    // Template#: 3583, Serial#: 1861
    public void notq(AMD64IndirectRegister64 destination) {
        assemble0384((byte) 0xF7, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code notw  }<i>destination</i>
     */
    // Template#: 3584, Serial#: 1924
    public void notw(AMD64IndirectRegister64 destination) {
        assemble0385((byte) 0xF7, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code notb  }<i>rel32</i>
     */
    // Template#: 3585, Serial#: 1738
    public void rip_notb(int rel32) {
        assemble0239((byte) 0xF6, (byte) 0x02, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code notl  }<i>rel32</i>
     */
    // Template#: 3586, Serial#: 1801
    public void rip_notl(int rel32) {
        assemble0239((byte) 0xF7, (byte) 0x02, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code notq  }<i>rel32</i>
     */
    // Template#: 3587, Serial#: 1864
    public void rip_notq(int rel32) {
        assemble0386((byte) 0xF7, (byte) 0x02, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code notw  }<i>rel32</i>
     */
    // Template#: 3588, Serial#: 1927
    public void rip_notw(int rel32) {
        assemble0387((byte) 0xF7, (byte) 0x02, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code notb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3589, Serial#: 1776
    public void notb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xF6, (byte) 0x02, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code notl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3590, Serial#: 1839
    public void notl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xF7, (byte) 0x02, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code notq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3591, Serial#: 1902
    public void notq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0388((byte) 0xF7, (byte) 0x02, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code notw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3592, Serial#: 1965
    public void notw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0389((byte) 0xF7, (byte) 0x02, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code notb  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3593, Serial#: 1737
    public void m_notb(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xF6, (byte) 0x02, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code notl  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3594, Serial#: 1800
    public void m_notl(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xF7, (byte) 0x02, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code notq  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3595, Serial#: 1863
    public void m_notq(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0390((byte) 0xF7, (byte) 0x02, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code notw  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3596, Serial#: 1926
    public void m_notw(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0391((byte) 0xF7, (byte) 0x02, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code notb  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 3597, Serial#: 1775
    public void notb(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xF6, (byte) 0x02, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code notl  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 3598, Serial#: 1838
    public void notl(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xF7, (byte) 0x02, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code notq  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 3599, Serial#: 1901
    public void notq(int disp32, AMD64IndirectRegister64 destination) {
        assemble0392((byte) 0xF7, (byte) 0x02, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code notw  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 3600, Serial#: 1964
    public void notw(int disp32, AMD64IndirectRegister64 destination) {
        assemble0393((byte) 0xF7, (byte) 0x02, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code operand_size  }
     */
    // Template#: 3601, Serial#: 311
    public void operand_size() {
        assemble0146((byte) 0x66);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>imm8</i>
     */
    // Template#: 3602, Serial#: 2051
    public void or_AL(byte imm8) {
        assemble0001((byte) 0x0C, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code orb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 3603, Serial#: 356
    public void orb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0002((byte) 0x80, (byte) 0x01, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code orl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 3604, Serial#: 644
    public void orl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0002((byte) 0x83, (byte) 0x01, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code orq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 3605, Serial#: 716
    public void orq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0003((byte) 0x83, (byte) 0x01, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code orw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 3606, Serial#: 788
    public void orw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0004((byte) 0x83, (byte) 0x01, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3607, Serial#: 2015
    public void or(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0005((byte) 0x09, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3608, Serial#: 1997
    public void or(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0006((byte) 0x09, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3609, Serial#: 2006
    public void or(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0007((byte) 0x09, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3610, Serial#: 1988
    public void or(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0008((byte) 0x08, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code orl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 3611, Serial#: 428
    public void orl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0009((byte) 0x81, (byte) 0x01, disp8, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code orq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 3612, Serial#: 500
    public void orq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0010((byte) 0x81, (byte) 0x01, disp8, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code orw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 3613, Serial#: 572
    public void orw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0011((byte) 0x81, (byte) 0x01, disp8, base, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code orb  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 3614, Serial#: 355
    public void orb(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0012((byte) 0x80, (byte) 0x01, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code orl  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 3615, Serial#: 643
    public void orl(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0012((byte) 0x83, (byte) 0x01, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code orq  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 3616, Serial#: 715
    public void orq(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0013((byte) 0x83, (byte) 0x01, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code orw  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 3617, Serial#: 787
    public void orw(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0014((byte) 0x83, (byte) 0x01, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3618, Serial#: 2014
    public void or(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0015((byte) 0x09, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3619, Serial#: 1996
    public void or(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0016((byte) 0x09, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3620, Serial#: 2005
    public void or(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0017((byte) 0x09, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3621, Serial#: 1987
    public void or(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0018((byte) 0x08, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code orl  }<i>disp8</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 3622, Serial#: 427
    public void orl(byte disp8, AMD64IndirectRegister64 destination, int imm32) {
        assemble0019((byte) 0x81, (byte) 0x01, disp8, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code orq  }<i>disp8</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 3623, Serial#: 499
    public void orq(byte disp8, AMD64IndirectRegister64 destination, int imm32) {
        assemble0020((byte) 0x81, (byte) 0x01, disp8, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code orw  }<i>disp8</i>, <i>destination</i>, <i>imm16</i>
     */
    // Template#: 3624, Serial#: 571
    public void orw(byte disp8, AMD64IndirectRegister64 destination, short imm16) {
        assemble0021((byte) 0x81, (byte) 0x01, disp8, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code orb  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 3625, Serial#: 326
    public void orb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0022((byte) 0x80, (byte) 0x01, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code orl  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 3626, Serial#: 614
    public void orl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0022((byte) 0x83, (byte) 0x01, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code orq  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 3627, Serial#: 686
    public void orq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0023((byte) 0x83, (byte) 0x01, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code orw  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 3628, Serial#: 758
    public void orw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0024((byte) 0x83, (byte) 0x01, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3629, Serial#: 2011
    public void or(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0025((byte) 0x09, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3630, Serial#: 1993
    public void or(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0026((byte) 0x09, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3631, Serial#: 2002
    public void or(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0027((byte) 0x09, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3632, Serial#: 1984
    public void or(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0028((byte) 0x08, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code orl  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 3633, Serial#: 398
    public void orl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0029((byte) 0x81, (byte) 0x01, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code orq  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 3634, Serial#: 470
    public void orq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0030((byte) 0x81, (byte) 0x01, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code orw  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 3635, Serial#: 542
    public void orw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0031((byte) 0x81, (byte) 0x01, base, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code orw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 3636, Serial#: 818
    public void orw(AMD64GeneralRegister16 destination, byte imm8) {
        assemble0032((byte) 0x83, (byte) 0x01, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3637, Serial#: 2048
    public void or(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0033((byte) 0x0B, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3638, Serial#: 2047
    public void or(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0034((byte) 0x0B, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3639, Serial#: 2044
    public void or(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0035((byte) 0x0B, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3640, Serial#: 2018
    public void or(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0036((byte) 0x09, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3641, Serial#: 2043
    public void or(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        assemble0037((byte) 0x0B, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3642, Serial#: 2046
    public void rip_or(AMD64GeneralRegister16 destination, int rel32) {
        assemble0038((byte) 0x0B, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3643, Serial#: 2050
    public void or(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0039((byte) 0x0B, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3644, Serial#: 2045
    public void m_or(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0040((byte) 0x0B, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3645, Serial#: 2049
    public void or(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0041((byte) 0x0B, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code orw  }<i>destination</i>, <i>imm16</i>
     */
    // Template#: 3646, Serial#: 602
    public void orw(AMD64GeneralRegister16 destination, short imm16) {
        assemble0042((byte) 0x81, (byte) 0x01, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code orl  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 3647, Serial#: 674
    public void orl(AMD64GeneralRegister32 destination, byte imm8) {
        assemble0043((byte) 0x83, (byte) 0x01, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3648, Serial#: 2032
    public void or(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0044((byte) 0x0B, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3649, Serial#: 2031
    public void or(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0045((byte) 0x0B, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3650, Serial#: 2028
    public void or(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0046((byte) 0x0B, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3651, Serial#: 2000
    public void or(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0047((byte) 0x09, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3652, Serial#: 2027
    public void or(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0048((byte) 0x0B, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code orl  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 3653, Serial#: 458
    public void orl(AMD64GeneralRegister32 destination, int imm32) {
        assemble0050((byte) 0x81, (byte) 0x01, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3654, Serial#: 2030
    public void rip_or(AMD64GeneralRegister32 destination, int rel32) {
        assemble0049((byte) 0x0B, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3655, Serial#: 2034
    public void or(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0051((byte) 0x0B, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3656, Serial#: 2029
    public void m_or(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0052((byte) 0x0B, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3657, Serial#: 2033
    public void or(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0053((byte) 0x0B, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code orq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 3658, Serial#: 746
    public void orq(AMD64GeneralRegister64 destination, byte imm8) {
        assemble0054((byte) 0x83, (byte) 0x01, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3659, Serial#: 2040
    public void or(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0055((byte) 0x0B, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3660, Serial#: 2039
    public void or(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0056((byte) 0x0B, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3661, Serial#: 2036
    public void or(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0057((byte) 0x0B, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3662, Serial#: 2009
    public void or(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0058((byte) 0x09, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3663, Serial#: 2035
    public void or(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0059((byte) 0x0B, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code orq  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 3664, Serial#: 530
    public void orq(AMD64GeneralRegister64 destination, int imm32) {
        assemble0061((byte) 0x81, (byte) 0x01, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3665, Serial#: 2038
    public void rip_or(AMD64GeneralRegister64 destination, int rel32) {
        assemble0060((byte) 0x0B, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3666, Serial#: 2042
    public void or(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0062((byte) 0x0B, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3667, Serial#: 2037
    public void m_or(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0063((byte) 0x0B, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3668, Serial#: 2041
    public void or(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0064((byte) 0x0B, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code orb  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 3669, Serial#: 386
    public void orb(AMD64GeneralRegister8 destination, byte imm8) {
        assemble0065((byte) 0x80, (byte) 0x01, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3670, Serial#: 2024
    public void or(AMD64GeneralRegister8 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0066((byte) 0x0A, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3671, Serial#: 2023
    public void or(AMD64GeneralRegister8 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0067((byte) 0x0A, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3672, Serial#: 2020
    public void or(AMD64GeneralRegister8 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0068((byte) 0x0A, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3673, Serial#: 1991
    public void or(AMD64GeneralRegister8 destination, AMD64GeneralRegister8 source) {
        assemble0069((byte) 0x08, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3674, Serial#: 2019
    public void or(AMD64GeneralRegister8 destination, AMD64IndirectRegister64 source) {
        assemble0070((byte) 0x0A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3675, Serial#: 2022
    public void rip_or(AMD64GeneralRegister8 destination, int rel32) {
        assemble0071((byte) 0x0A, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3676, Serial#: 2026
    public void or(AMD64GeneralRegister8 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0072((byte) 0x0A, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3677, Serial#: 2021
    public void m_or(AMD64GeneralRegister8 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0073((byte) 0x0A, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3678, Serial#: 2025
    public void or(AMD64GeneralRegister8 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0074((byte) 0x0A, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code orb  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 3679, Serial#: 325
    public void orb(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0075((byte) 0x80, (byte) 0x01, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code orl  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 3680, Serial#: 613
    public void orl(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0075((byte) 0x83, (byte) 0x01, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code orq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 3681, Serial#: 685
    public void orq(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0076((byte) 0x83, (byte) 0x01, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code orw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 3682, Serial#: 757
    public void orw(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0077((byte) 0x83, (byte) 0x01, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3683, Serial#: 2010
    public void or(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0078((byte) 0x09, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3684, Serial#: 1992
    public void or(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0079((byte) 0x09, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3685, Serial#: 2001
    public void or(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0080((byte) 0x09, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3686, Serial#: 1983
    public void or(AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0081((byte) 0x08, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code orl  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 3687, Serial#: 397
    public void orl(AMD64IndirectRegister64 destination, int imm32) {
        assemble0082((byte) 0x81, (byte) 0x01, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code orq  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 3688, Serial#: 469
    public void orq(AMD64IndirectRegister64 destination, int imm32) {
        assemble0083((byte) 0x81, (byte) 0x01, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code orw  }<i>destination</i>, <i>imm16</i>
     */
    // Template#: 3689, Serial#: 541
    public void orw(AMD64IndirectRegister64 destination, short imm16) {
        assemble0084((byte) 0x81, (byte) 0x01, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>imm32</i>
     */
    // Template#: 3690, Serial#: 2052
    public void or_EAX(int imm32) {
        assemble0085((byte) 0x0D, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>imm32</i>
     */
    // Template#: 3691, Serial#: 2053
    public void or_RAX(int imm32) {
        assemble0086((byte) 0x0D, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code orb  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 3692, Serial#: 328
    public void rip_orb(int rel32, byte imm8) {
        assemble0087((byte) 0x80, (byte) 0x01, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code orl  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 3693, Serial#: 616
    public void rip_orl(int rel32, byte imm8) {
        assemble0087((byte) 0x83, (byte) 0x01, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code orq  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 3694, Serial#: 688
    public void rip_orq(int rel32, byte imm8) {
        assemble0088((byte) 0x83, (byte) 0x01, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code orw  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 3695, Serial#: 760
    public void rip_orw(int rel32, byte imm8) {
        assemble0089((byte) 0x83, (byte) 0x01, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code orb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 3696, Serial#: 372
    public void orb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0090((byte) 0x80, (byte) 0x01, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code orl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 3697, Serial#: 660
    public void orl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0090((byte) 0x83, (byte) 0x01, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code orq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 3698, Serial#: 732
    public void orq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0091((byte) 0x83, (byte) 0x01, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code orw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 3699, Serial#: 804
    public void orw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0092((byte) 0x83, (byte) 0x01, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3700, Serial#: 2017
    public void or(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0093((byte) 0x09, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3701, Serial#: 1999
    public void or(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0094((byte) 0x09, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3702, Serial#: 2008
    public void or(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0095((byte) 0x09, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3703, Serial#: 1990
    public void or(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0096((byte) 0x08, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code orl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 3704, Serial#: 444
    public void orl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0097((byte) 0x81, (byte) 0x01, disp32, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code orq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 3705, Serial#: 516
    public void orq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0098((byte) 0x81, (byte) 0x01, disp32, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code orw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 3706, Serial#: 588
    public void orw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0099((byte) 0x81, (byte) 0x01, disp32, base, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 3707, Serial#: 2013
    public void rip_or(int rel32, AMD64GeneralRegister16 source) {
        assemble0100((byte) 0x09, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 3708, Serial#: 1995
    public void rip_or(int rel32, AMD64GeneralRegister32 source) {
        assemble0101((byte) 0x09, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 3709, Serial#: 2004
    public void rip_or(int rel32, AMD64GeneralRegister64 source) {
        assemble0102((byte) 0x09, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 3710, Serial#: 1986
    public void rip_or(int rel32, AMD64GeneralRegister8 source) {
        assemble0103((byte) 0x08, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code orb  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 3711, Serial#: 327
    public void m_orb(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0104((byte) 0x80, (byte) 0x01, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code orl  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 3712, Serial#: 615
    public void m_orl(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0104((byte) 0x83, (byte) 0x01, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code orq  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 3713, Serial#: 687
    public void m_orq(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0105((byte) 0x83, (byte) 0x01, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code orw  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 3714, Serial#: 759
    public void m_orw(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0106((byte) 0x83, (byte) 0x01, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3715, Serial#: 2012
    public void m_or(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0107((byte) 0x09, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3716, Serial#: 1994
    public void m_or(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0108((byte) 0x09, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3717, Serial#: 2003
    public void m_or(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0109((byte) 0x09, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 3718, Serial#: 1985
    public void m_or(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0110((byte) 0x08, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code orl  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 3719, Serial#: 399
    public void m_orl(int m32, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0111((byte) 0x81, (byte) 0x01, m32, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code orq  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 3720, Serial#: 471
    public void m_orq(int m32, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0112((byte) 0x81, (byte) 0x01, m32, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code orw  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 3721, Serial#: 543
    public void m_orw(int m32, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0113((byte) 0x81, (byte) 0x01, m32, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code orb  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 3722, Serial#: 371
    public void orb(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0114((byte) 0x80, (byte) 0x01, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code orl  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 3723, Serial#: 659
    public void orl(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0114((byte) 0x83, (byte) 0x01, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code orq  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 3724, Serial#: 731
    public void orq(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0115((byte) 0x83, (byte) 0x01, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code orw  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 3725, Serial#: 803
    public void orw(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0116((byte) 0x83, (byte) 0x01, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3726, Serial#: 2016
    public void or(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0117((byte) 0x09, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3727, Serial#: 1998
    public void or(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0118((byte) 0x09, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3728, Serial#: 2007
    public void or(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0119((byte) 0x09, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 3729, Serial#: 1989
    public void or(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0120((byte) 0x08, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code orl  }<i>disp32</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 3730, Serial#: 443
    public void orl(int disp32, AMD64IndirectRegister64 destination, int imm32) {
        assemble0121((byte) 0x81, (byte) 0x01, disp32, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code orq  }<i>disp32</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 3731, Serial#: 515
    public void orq(int disp32, AMD64IndirectRegister64 destination, int imm32) {
        assemble0122((byte) 0x81, (byte) 0x01, disp32, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code orw  }<i>disp32</i>, <i>destination</i>, <i>imm16</i>
     */
    // Template#: 3732, Serial#: 587
    public void orw(int disp32, AMD64IndirectRegister64 destination, short imm16) {
        assemble0123((byte) 0x81, (byte) 0x01, disp32, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code orl  }<i>rel32</i>, <i>imm32</i>
     */
    // Template#: 3733, Serial#: 400
    public void rip_orl(int rel32, int imm32) {
        assemble0124((byte) 0x81, (byte) 0x01, rel32, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code orq  }<i>rel32</i>, <i>imm32</i>
     */
    // Template#: 3734, Serial#: 472
    public void rip_orq(int rel32, int imm32) {
        assemble0125((byte) 0x81, (byte) 0x01, rel32, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code orw  }<i>rel32</i>, <i>imm16</i>
     */
    // Template#: 3735, Serial#: 544
    public void rip_orw(int rel32, short imm16) {
        assemble0126((byte) 0x81, (byte) 0x01, rel32, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>imm16</i>
     */
    // Template#: 3736, Serial#: 2054
    public void or_AX(short imm16) {
        assemble0127((byte) 0x0D, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code orpd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3737, Serial#: 3757
    public void orpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x56, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code orpd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3738, Serial#: 3756
    public void orpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x56, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code orpd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3739, Serial#: 3753
    public void orpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x56, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code orpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3740, Serial#: 3752
    public void orpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x56, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code orpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3741, Serial#: 3760
    public void orpd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x56, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code orpd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3742, Serial#: 3755
    public void rip_orpd(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x56, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code orpd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3743, Serial#: 3759
    public void orpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x56, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code orpd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3744, Serial#: 3754
    public void m_orpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x56, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code orpd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3745, Serial#: 3758
    public void orpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x56, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code orps  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3746, Serial#: 3711
    public void orps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0137((byte) 0x56, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code orps  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3747, Serial#: 3710
    public void orps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0138((byte) 0x56, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code orps  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3748, Serial#: 3707
    public void orps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0139((byte) 0x56, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code orps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3749, Serial#: 3706
    public void orps(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0140((byte) 0x56, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code orps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3750, Serial#: 3714
    public void orps(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0141((byte) 0x56, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code orps  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3751, Serial#: 3709
    public void rip_orps(AMD64XMMRegister destination, int rel32) {
        assemble0142((byte) 0x56, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code orps  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3752, Serial#: 3713
    public void orps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0143((byte) 0x56, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code orps  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3753, Serial#: 3708
    public void m_orps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0144((byte) 0x56, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code orps  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3754, Serial#: 3712
    public void orps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0145((byte) 0x56, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code out  }
     */
    // Template#: 3755, Serial#: 2964
    public void out_DX_AL() {
        assemble0146((byte) 0xEE);
    }

    /**
     * Pseudo-external assembler syntax: {@code out  }
     */
    // Template#: 3756, Serial#: 2965
    public void out_DX_EAX() {
        assemble0146((byte) 0xEF);
    }

    /**
     * Pseudo-external assembler syntax: {@code out  }
     */
    // Template#: 3757, Serial#: 2966
    public void out_DX_RAX() {
        assemble0243((byte) 0xEF);
    }

    /**
     * Pseudo-external assembler syntax: {@code out  }
     */
    // Template#: 3758, Serial#: 2967
    public void out_DX_AX() {
        assemble0271((byte) 0xEF);
    }

    /**
     * Pseudo-external assembler syntax: {@code out  }<i>imm8</i>
     */
    // Template#: 3759, Serial#: 1721
    public void out___AL(byte imm8) {
        assemble0001((byte) 0xE6, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code out  }<i>imm8</i>
     */
    // Template#: 3760, Serial#: 1722
    public void out___EAX(byte imm8) {
        assemble0001((byte) 0xE7, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code out  }<i>imm8</i>
     */
    // Template#: 3761, Serial#: 1723
    public void out___RAX(byte imm8) {
        assemble0462((byte) 0xE7, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code out  }<i>imm8</i>
     */
    // Template#: 3762, Serial#: 1724
    public void out___AX(byte imm8) {
        assemble0463((byte) 0xE7, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code outsb  }
     */
    // Template#: 3763, Serial#: 2335
    public void outsb() {
        assemble0146((byte) 0x6E);
    }

    /**
     * Pseudo-external assembler syntax: {@code outsl  }
     */
    // Template#: 3764, Serial#: 2336
    public void outsl() {
        assemble0146((byte) 0x6F);
    }

    /**
     * Pseudo-external assembler syntax: {@code outsw  }
     */
    // Template#: 3765, Serial#: 2337
    public void outsw() {
        assemble0271((byte) 0x6F);
    }

    /**
     * Pseudo-external assembler syntax: {@code packssdw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3766, Serial#: 5736
    public void packssdw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x6B, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code packssdw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3767, Serial#: 5735
    public void packssdw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x6B, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code packssdw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3768, Serial#: 5732
    public void packssdw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x6B, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code packssdw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3769, Serial#: 5731
    public void packssdw(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x6B, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code packssdw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3770, Serial#: 5739
    public void packssdw(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x6B, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code packssdw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3771, Serial#: 5734
    public void rip_packssdw(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x6B, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code packssdw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3772, Serial#: 5738
    public void packssdw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x6B, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code packssdw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3773, Serial#: 5733
    public void m_packssdw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x6B, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code packssdw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3774, Serial#: 5737
    public void packssdw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x6B, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code packssdw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3775, Serial#: 5673
    public void packssdw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0x6B, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code packssdw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3776, Serial#: 5672
    public void packssdw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0x6B, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code packssdw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3777, Serial#: 5669
    public void packssdw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0x6B, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code packssdw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3778, Serial#: 5668
    public void packssdw(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0x6B, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code packssdw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3779, Serial#: 5676
    public void packssdw(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0x6B, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code packssdw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3780, Serial#: 5671
    public void rip_packssdw(MMXRegister destination, int rel32) {
        assemble0315((byte) 0x6B, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code packssdw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3781, Serial#: 5675
    public void packssdw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0x6B, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code packssdw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3782, Serial#: 5670
    public void m_packssdw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0x6B, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code packssdw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3783, Serial#: 5674
    public void packssdw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0x6B, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code packsswb  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3784, Serial#: 3910
    public void packsswb(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x63, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code packsswb  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3785, Serial#: 3909
    public void packsswb(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x63, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code packsswb  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3786, Serial#: 3906
    public void packsswb(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x63, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code packsswb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3787, Serial#: 3905
    public void packsswb(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x63, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code packsswb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3788, Serial#: 3913
    public void packsswb(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x63, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code packsswb  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3789, Serial#: 3908
    public void rip_packsswb(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x63, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code packsswb  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3790, Serial#: 3912
    public void packsswb(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x63, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code packsswb  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3791, Serial#: 3907
    public void m_packsswb(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x63, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code packsswb  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3792, Serial#: 3911
    public void packsswb(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x63, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code packsswb  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3793, Serial#: 3838
    public void packsswb(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0x63, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code packsswb  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3794, Serial#: 3837
    public void packsswb(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0x63, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code packsswb  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3795, Serial#: 3834
    public void packsswb(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0x63, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code packsswb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3796, Serial#: 3833
    public void packsswb(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0x63, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code packsswb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3797, Serial#: 3841
    public void packsswb(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0x63, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code packsswb  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3798, Serial#: 3836
    public void rip_packsswb(MMXRegister destination, int rel32) {
        assemble0315((byte) 0x63, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code packsswb  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3799, Serial#: 3840
    public void packsswb(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0x63, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code packsswb  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3800, Serial#: 3835
    public void m_packsswb(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0x63, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code packsswb  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3801, Serial#: 3839
    public void packsswb(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0x63, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code packuswb  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3802, Serial#: 3946
    public void packuswb(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x67, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code packuswb  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3803, Serial#: 3945
    public void packuswb(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x67, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code packuswb  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3804, Serial#: 3942
    public void packuswb(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x67, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code packuswb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3805, Serial#: 3941
    public void packuswb(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x67, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code packuswb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3806, Serial#: 3949
    public void packuswb(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x67, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code packuswb  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3807, Serial#: 3944
    public void rip_packuswb(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x67, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code packuswb  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3808, Serial#: 3948
    public void packuswb(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x67, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code packuswb  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3809, Serial#: 3943
    public void m_packuswb(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x67, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code packuswb  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3810, Serial#: 3947
    public void packuswb(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x67, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code packuswb  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3811, Serial#: 3874
    public void packuswb(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0x67, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code packuswb  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3812, Serial#: 3873
    public void packuswb(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0x67, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code packuswb  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3813, Serial#: 3870
    public void packuswb(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0x67, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code packuswb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3814, Serial#: 3869
    public void packuswb(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0x67, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code packuswb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3815, Serial#: 3877
    public void packuswb(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0x67, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code packuswb  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3816, Serial#: 3872
    public void rip_packuswb(MMXRegister destination, int rel32) {
        assemble0315((byte) 0x67, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code packuswb  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3817, Serial#: 3876
    public void packuswb(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0x67, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code packuswb  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3818, Serial#: 3871
    public void m_packuswb(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0x67, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code packuswb  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3819, Serial#: 3875
    public void packuswb(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0x67, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddb  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3820, Serial#: 6696
    public void paddb(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xFC, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddb  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3821, Serial#: 6695
    public void paddb(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xFC, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddb  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3822, Serial#: 6692
    public void paddb(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xFC, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3823, Serial#: 6691
    public void paddb(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xFC, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3824, Serial#: 6699
    public void paddb(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xFC, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddb  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3825, Serial#: 6694
    public void rip_paddb(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xFC, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddb  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3826, Serial#: 6698
    public void paddb(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xFC, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddb  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3827, Serial#: 6693
    public void m_paddb(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xFC, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddb  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3828, Serial#: 6697
    public void paddb(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xFC, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddb  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3829, Serial#: 6633
    public void paddb(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xFC, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddb  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3830, Serial#: 6632
    public void paddb(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xFC, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddb  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3831, Serial#: 6629
    public void paddb(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xFC, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3832, Serial#: 6628
    public void paddb(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xFC, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3833, Serial#: 6636
    public void paddb(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xFC, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddb  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3834, Serial#: 6631
    public void rip_paddb(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xFC, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddb  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3835, Serial#: 6635
    public void paddb(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xFC, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddb  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3836, Serial#: 6630
    public void m_paddb(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xFC, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddb  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3837, Serial#: 6634
    public void paddb(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xFC, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3838, Serial#: 6714
    public void paddd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xFE, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3839, Serial#: 6713
    public void paddd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xFE, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3840, Serial#: 6710
    public void paddd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xFE, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3841, Serial#: 6709
    public void paddd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xFE, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3842, Serial#: 6717
    public void paddd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xFE, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3843, Serial#: 6712
    public void rip_paddd(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xFE, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3844, Serial#: 6716
    public void paddd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xFE, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3845, Serial#: 6711
    public void m_paddd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xFE, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3846, Serial#: 6715
    public void paddd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xFE, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3847, Serial#: 6651
    public void paddd(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xFE, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3848, Serial#: 6650
    public void paddd(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xFE, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3849, Serial#: 6647
    public void paddd(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xFE, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3850, Serial#: 6646
    public void paddd(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xFE, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3851, Serial#: 6654
    public void paddd(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xFE, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3852, Serial#: 6649
    public void rip_paddd(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xFE, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3853, Serial#: 6653
    public void paddd(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xFE, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3854, Serial#: 6648
    public void m_paddd(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xFE, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3855, Serial#: 6652
    public void paddd(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xFE, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddq  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3856, Serial#: 4552
    public void paddq(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xD4, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddq  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3857, Serial#: 4551
    public void paddq(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xD4, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddq  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3858, Serial#: 4548
    public void paddq(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xD4, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3859, Serial#: 4547
    public void paddq(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xD4, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3860, Serial#: 4555
    public void paddq(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xD4, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddq  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3861, Serial#: 4550
    public void rip_paddq(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xD4, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddq  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3862, Serial#: 4554
    public void paddq(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xD4, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddq  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3863, Serial#: 4549
    public void m_paddq(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xD4, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddq  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3864, Serial#: 4553
    public void paddq(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xD4, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddq  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3865, Serial#: 4497
    public void paddq(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xD4, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddq  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3866, Serial#: 4496
    public void paddq(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xD4, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddq  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3867, Serial#: 4493
    public void paddq(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xD4, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3868, Serial#: 4492
    public void paddq(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xD4, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3869, Serial#: 4500
    public void paddq(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xD4, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddq  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3870, Serial#: 4495
    public void rip_paddq(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xD4, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddq  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3871, Serial#: 4499
    public void paddq(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xD4, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddq  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3872, Serial#: 4494
    public void m_paddq(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xD4, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddq  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3873, Serial#: 4498
    public void paddq(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xD4, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsb  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3874, Serial#: 6561
    public void paddsb(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xEC, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsb  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3875, Serial#: 6560
    public void paddsb(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xEC, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsb  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3876, Serial#: 6557
    public void paddsb(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xEC, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3877, Serial#: 6556
    public void paddsb(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xEC, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3878, Serial#: 6564
    public void paddsb(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xEC, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsb  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3879, Serial#: 6559
    public void rip_paddsb(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xEC, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsb  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3880, Serial#: 6563
    public void paddsb(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xEC, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsb  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3881, Serial#: 6558
    public void m_paddsb(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xEC, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsb  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3882, Serial#: 6562
    public void paddsb(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xEC, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsb  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3883, Serial#: 6489
    public void paddsb(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xEC, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsb  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3884, Serial#: 6488
    public void paddsb(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xEC, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsb  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3885, Serial#: 6485
    public void paddsb(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xEC, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3886, Serial#: 6484
    public void paddsb(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xEC, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3887, Serial#: 6492
    public void paddsb(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xEC, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsb  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3888, Serial#: 6487
    public void rip_paddsb(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xEC, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsb  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3889, Serial#: 6491
    public void paddsb(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xEC, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsb  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3890, Serial#: 6486
    public void m_paddsb(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xEC, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsb  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3891, Serial#: 6490
    public void paddsb(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xEC, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3892, Serial#: 6570
    public void paddsw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xED, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3893, Serial#: 6569
    public void paddsw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xED, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3894, Serial#: 6566
    public void paddsw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xED, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3895, Serial#: 6565
    public void paddsw(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xED, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3896, Serial#: 6573
    public void paddsw(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xED, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3897, Serial#: 6568
    public void rip_paddsw(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xED, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3898, Serial#: 6572
    public void paddsw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xED, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3899, Serial#: 6567
    public void m_paddsw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xED, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3900, Serial#: 6571
    public void paddsw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xED, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3901, Serial#: 6498
    public void paddsw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xED, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3902, Serial#: 6497
    public void paddsw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xED, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3903, Serial#: 6494
    public void paddsw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xED, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3904, Serial#: 6493
    public void paddsw(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xED, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3905, Serial#: 6501
    public void paddsw(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xED, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3906, Serial#: 6496
    public void rip_paddsw(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xED, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3907, Serial#: 6500
    public void paddsw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xED, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3908, Serial#: 6495
    public void m_paddsw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xED, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3909, Serial#: 6499
    public void paddsw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xED, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusb  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3910, Serial#: 6417
    public void paddusb(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xDC, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusb  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3911, Serial#: 6416
    public void paddusb(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xDC, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusb  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3912, Serial#: 6413
    public void paddusb(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xDC, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3913, Serial#: 6412
    public void paddusb(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xDC, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3914, Serial#: 6420
    public void paddusb(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xDC, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusb  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3915, Serial#: 6415
    public void rip_paddusb(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xDC, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusb  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3916, Serial#: 6419
    public void paddusb(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xDC, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusb  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3917, Serial#: 6414
    public void m_paddusb(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xDC, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusb  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3918, Serial#: 6418
    public void paddusb(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xDC, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusb  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3919, Serial#: 6345
    public void paddusb(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xDC, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusb  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3920, Serial#: 6344
    public void paddusb(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xDC, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusb  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3921, Serial#: 6341
    public void paddusb(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xDC, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3922, Serial#: 6340
    public void paddusb(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xDC, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3923, Serial#: 6348
    public void paddusb(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xDC, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusb  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3924, Serial#: 6343
    public void rip_paddusb(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xDC, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusb  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3925, Serial#: 6347
    public void paddusb(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xDC, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusb  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3926, Serial#: 6342
    public void m_paddusb(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xDC, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusb  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3927, Serial#: 6346
    public void paddusb(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xDC, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3928, Serial#: 6426
    public void paddusw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xDD, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3929, Serial#: 6425
    public void paddusw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xDD, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3930, Serial#: 6422
    public void paddusw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xDD, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3931, Serial#: 6421
    public void paddusw(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xDD, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3932, Serial#: 6429
    public void paddusw(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xDD, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3933, Serial#: 6424
    public void rip_paddusw(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xDD, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3934, Serial#: 6428
    public void paddusw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xDD, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3935, Serial#: 6423
    public void m_paddusw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xDD, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3936, Serial#: 6427
    public void paddusw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xDD, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3937, Serial#: 6354
    public void paddusw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xDD, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3938, Serial#: 6353
    public void paddusw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xDD, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3939, Serial#: 6350
    public void paddusw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xDD, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3940, Serial#: 6349
    public void paddusw(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xDD, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3941, Serial#: 6357
    public void paddusw(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xDD, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3942, Serial#: 6352
    public void rip_paddusw(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xDD, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3943, Serial#: 6356
    public void paddusw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xDD, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3944, Serial#: 6351
    public void m_paddusw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xDD, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3945, Serial#: 6355
    public void paddusw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xDD, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3946, Serial#: 6705
    public void paddw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xFD, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3947, Serial#: 6704
    public void paddw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xFD, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3948, Serial#: 6701
    public void paddw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xFD, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3949, Serial#: 6700
    public void paddw(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xFD, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3950, Serial#: 6708
    public void paddw(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xFD, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3951, Serial#: 6703
    public void rip_paddw(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xFD, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3952, Serial#: 6707
    public void paddw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xFD, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3953, Serial#: 6702
    public void m_paddw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xFD, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3954, Serial#: 6706
    public void paddw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xFD, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3955, Serial#: 6642
    public void paddw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xFD, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3956, Serial#: 6641
    public void paddw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xFD, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3957, Serial#: 6638
    public void paddw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xFD, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3958, Serial#: 6637
    public void paddw(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xFD, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3959, Serial#: 6645
    public void paddw(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xFD, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3960, Serial#: 6640
    public void rip_paddw(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xFD, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3961, Serial#: 6644
    public void paddw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xFD, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3962, Serial#: 6639
    public void m_paddw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xFD, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3963, Serial#: 6643
    public void paddw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xFD, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pand  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3964, Serial#: 6408
    public void pand(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xDB, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pand  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3965, Serial#: 6407
    public void pand(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xDB, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pand  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3966, Serial#: 6404
    public void pand(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xDB, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pand  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3967, Serial#: 6403
    public void pand(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xDB, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pand  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3968, Serial#: 6411
    public void pand(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xDB, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pand  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3969, Serial#: 6406
    public void rip_pand(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xDB, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pand  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3970, Serial#: 6410
    public void pand(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xDB, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pand  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3971, Serial#: 6405
    public void m_pand(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xDB, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pand  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3972, Serial#: 6409
    public void pand(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xDB, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pand  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3973, Serial#: 6336
    public void pand(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xDB, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pand  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3974, Serial#: 6335
    public void pand(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xDB, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pand  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3975, Serial#: 6332
    public void pand(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xDB, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pand  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3976, Serial#: 6331
    public void pand(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xDB, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pand  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3977, Serial#: 6339
    public void pand(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xDB, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pand  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3978, Serial#: 6334
    public void rip_pand(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xDB, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pand  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3979, Serial#: 6338
    public void pand(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xDB, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pand  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3980, Serial#: 6333
    public void m_pand(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xDB, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pand  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3981, Serial#: 6337
    public void pand(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xDB, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pandn  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3982, Serial#: 6444
    public void pandn(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xDF, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pandn  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3983, Serial#: 6443
    public void pandn(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xDF, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pandn  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3984, Serial#: 6440
    public void pandn(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xDF, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pandn  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3985, Serial#: 6439
    public void pandn(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xDF, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pandn  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3986, Serial#: 6447
    public void pandn(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xDF, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pandn  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3987, Serial#: 6442
    public void rip_pandn(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xDF, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pandn  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3988, Serial#: 6446
    public void pandn(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xDF, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pandn  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3989, Serial#: 6441
    public void m_pandn(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xDF, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pandn  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3990, Serial#: 6445
    public void pandn(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xDF, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pandn  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3991, Serial#: 6372
    public void pandn(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xDF, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pandn  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 3992, Serial#: 6371
    public void pandn(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xDF, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pandn  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3993, Serial#: 6368
    public void pandn(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xDF, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pandn  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3994, Serial#: 6367
    public void pandn(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xDF, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pandn  }<i>destination</i>, <i>source</i>
     */
    // Template#: 3995, Serial#: 6375
    public void pandn(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xDF, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pandn  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 3996, Serial#: 6370
    public void rip_pandn(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xDF, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pandn  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3997, Serial#: 6374
    public void pandn(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xDF, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pandn  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 3998, Serial#: 6369
    public void m_pandn(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xDF, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pandn  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 3999, Serial#: 6373
    public void pandn(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xDF, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgb  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4000, Serial#: 4644
    public void pavgb(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xE0, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgb  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4001, Serial#: 4643
    public void pavgb(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xE0, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgb  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4002, Serial#: 4640
    public void pavgb(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xE0, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4003, Serial#: 4639
    public void pavgb(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xE0, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4004, Serial#: 4647
    public void pavgb(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xE0, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgb  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4005, Serial#: 4642
    public void rip_pavgb(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xE0, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgb  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4006, Serial#: 4646
    public void pavgb(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xE0, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgb  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4007, Serial#: 4641
    public void m_pavgb(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xE0, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgb  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4008, Serial#: 4645
    public void pavgb(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xE0, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgb  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4009, Serial#: 4582
    public void pavgb(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xE0, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgb  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4010, Serial#: 4581
    public void pavgb(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xE0, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgb  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4011, Serial#: 4578
    public void pavgb(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xE0, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4012, Serial#: 4577
    public void pavgb(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xE0, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4013, Serial#: 4585
    public void pavgb(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xE0, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgb  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4014, Serial#: 4580
    public void rip_pavgb(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xE0, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgb  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4015, Serial#: 4584
    public void pavgb(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xE0, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgb  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4016, Serial#: 4579
    public void m_pavgb(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xE0, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgb  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4017, Serial#: 4583
    public void pavgb(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xE0, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4018, Serial#: 4671
    public void pavgw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xE3, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4019, Serial#: 4670
    public void pavgw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xE3, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4020, Serial#: 4667
    public void pavgw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xE3, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4021, Serial#: 4666
    public void pavgw(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xE3, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4022, Serial#: 4674
    public void pavgw(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xE3, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4023, Serial#: 4669
    public void rip_pavgw(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xE3, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4024, Serial#: 4673
    public void pavgw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xE3, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4025, Serial#: 4668
    public void m_pavgw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xE3, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4026, Serial#: 4672
    public void pavgw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xE3, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4027, Serial#: 4609
    public void pavgw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xE3, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4028, Serial#: 4608
    public void pavgw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xE3, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4029, Serial#: 4605
    public void pavgw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xE3, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4030, Serial#: 4604
    public void pavgw(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xE3, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4031, Serial#: 4612
    public void pavgw(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xE3, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4032, Serial#: 4607
    public void rip_pavgw(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xE3, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4033, Serial#: 4611
    public void pavgw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xE3, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4034, Serial#: 4606
    public void m_pavgw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xE3, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4035, Serial#: 4610
    public void pavgw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xE3, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqb  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4036, Serial#: 4019
    public void pcmpeqb(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x74, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqb  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4037, Serial#: 4018
    public void pcmpeqb(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x74, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqb  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4038, Serial#: 4015
    public void pcmpeqb(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x74, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4039, Serial#: 4014
    public void pcmpeqb(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x74, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4040, Serial#: 4022
    public void pcmpeqb(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x74, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqb  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4041, Serial#: 4017
    public void rip_pcmpeqb(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x74, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqb  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4042, Serial#: 4021
    public void pcmpeqb(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x74, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqb  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4043, Serial#: 4016
    public void m_pcmpeqb(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x74, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqb  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4044, Serial#: 4020
    public void pcmpeqb(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x74, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqb  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4045, Serial#: 3972
    public void pcmpeqb(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0x74, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqb  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4046, Serial#: 3971
    public void pcmpeqb(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0x74, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqb  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4047, Serial#: 3968
    public void pcmpeqb(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0x74, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4048, Serial#: 3967
    public void pcmpeqb(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0x74, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4049, Serial#: 3975
    public void pcmpeqb(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0x74, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqb  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4050, Serial#: 3970
    public void rip_pcmpeqb(MMXRegister destination, int rel32) {
        assemble0315((byte) 0x74, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqb  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4051, Serial#: 3974
    public void pcmpeqb(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0x74, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqb  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4052, Serial#: 3969
    public void m_pcmpeqb(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0x74, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqb  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4053, Serial#: 3973
    public void pcmpeqb(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0x74, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4054, Serial#: 4037
    public void pcmpeqd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x76, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4055, Serial#: 4036
    public void pcmpeqd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x76, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4056, Serial#: 4033
    public void pcmpeqd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x76, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4057, Serial#: 4032
    public void pcmpeqd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x76, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4058, Serial#: 4040
    public void pcmpeqd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x76, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4059, Serial#: 4035
    public void rip_pcmpeqd(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x76, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4060, Serial#: 4039
    public void pcmpeqd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x76, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4061, Serial#: 4034
    public void m_pcmpeqd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x76, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4062, Serial#: 4038
    public void pcmpeqd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x76, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4063, Serial#: 3990
    public void pcmpeqd(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0x76, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4064, Serial#: 3989
    public void pcmpeqd(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0x76, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4065, Serial#: 3986
    public void pcmpeqd(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0x76, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4066, Serial#: 3985
    public void pcmpeqd(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0x76, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4067, Serial#: 3993
    public void pcmpeqd(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0x76, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4068, Serial#: 3988
    public void rip_pcmpeqd(MMXRegister destination, int rel32) {
        assemble0315((byte) 0x76, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4069, Serial#: 3992
    public void pcmpeqd(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0x76, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4070, Serial#: 3987
    public void m_pcmpeqd(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0x76, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4071, Serial#: 3991
    public void pcmpeqd(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0x76, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4072, Serial#: 4028
    public void pcmpeqw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x75, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4073, Serial#: 4027
    public void pcmpeqw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x75, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4074, Serial#: 4024
    public void pcmpeqw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x75, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4075, Serial#: 4023
    public void pcmpeqw(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x75, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4076, Serial#: 4031
    public void pcmpeqw(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x75, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4077, Serial#: 4026
    public void rip_pcmpeqw(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x75, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4078, Serial#: 4030
    public void pcmpeqw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x75, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4079, Serial#: 4025
    public void m_pcmpeqw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x75, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4080, Serial#: 4029
    public void pcmpeqw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x75, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4081, Serial#: 3981
    public void pcmpeqw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0x75, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4082, Serial#: 3980
    public void pcmpeqw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0x75, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4083, Serial#: 3977
    public void pcmpeqw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0x75, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4084, Serial#: 3976
    public void pcmpeqw(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0x75, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4085, Serial#: 3984
    public void pcmpeqw(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0x75, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4086, Serial#: 3979
    public void rip_pcmpeqw(MMXRegister destination, int rel32) {
        assemble0315((byte) 0x75, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4087, Serial#: 3983
    public void pcmpeqw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0x75, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4088, Serial#: 3978
    public void m_pcmpeqw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0x75, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4089, Serial#: 3982
    public void pcmpeqw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0x75, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtb  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4090, Serial#: 3919
    public void pcmpgtb(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x64, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtb  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4091, Serial#: 3918
    public void pcmpgtb(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x64, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtb  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4092, Serial#: 3915
    public void pcmpgtb(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x64, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4093, Serial#: 3914
    public void pcmpgtb(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x64, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4094, Serial#: 3922
    public void pcmpgtb(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x64, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtb  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4095, Serial#: 3917
    public void rip_pcmpgtb(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x64, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtb  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4096, Serial#: 3921
    public void pcmpgtb(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x64, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtb  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4097, Serial#: 3916
    public void m_pcmpgtb(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x64, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtb  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4098, Serial#: 3920
    public void pcmpgtb(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x64, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtb  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4099, Serial#: 3847
    public void pcmpgtb(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0x64, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtb  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4100, Serial#: 3846
    public void pcmpgtb(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0x64, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtb  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4101, Serial#: 3843
    public void pcmpgtb(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0x64, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4102, Serial#: 3842
    public void pcmpgtb(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0x64, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4103, Serial#: 3850
    public void pcmpgtb(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0x64, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtb  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4104, Serial#: 3845
    public void rip_pcmpgtb(MMXRegister destination, int rel32) {
        assemble0315((byte) 0x64, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtb  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4105, Serial#: 3849
    public void pcmpgtb(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0x64, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtb  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4106, Serial#: 3844
    public void m_pcmpgtb(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0x64, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtb  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4107, Serial#: 3848
    public void pcmpgtb(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0x64, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4108, Serial#: 3937
    public void pcmpgtd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x66, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4109, Serial#: 3936
    public void pcmpgtd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x66, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4110, Serial#: 3933
    public void pcmpgtd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x66, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4111, Serial#: 3932
    public void pcmpgtd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x66, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4112, Serial#: 3940
    public void pcmpgtd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x66, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4113, Serial#: 3935
    public void rip_pcmpgtd(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x66, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4114, Serial#: 3939
    public void pcmpgtd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x66, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4115, Serial#: 3934
    public void m_pcmpgtd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x66, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4116, Serial#: 3938
    public void pcmpgtd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x66, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4117, Serial#: 3865
    public void pcmpgtd(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0x66, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4118, Serial#: 3864
    public void pcmpgtd(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0x66, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4119, Serial#: 3861
    public void pcmpgtd(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0x66, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4120, Serial#: 3860
    public void pcmpgtd(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0x66, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4121, Serial#: 3868
    public void pcmpgtd(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0x66, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4122, Serial#: 3863
    public void rip_pcmpgtd(MMXRegister destination, int rel32) {
        assemble0315((byte) 0x66, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4123, Serial#: 3867
    public void pcmpgtd(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0x66, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4124, Serial#: 3862
    public void m_pcmpgtd(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0x66, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4125, Serial#: 3866
    public void pcmpgtd(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0x66, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4126, Serial#: 3928
    public void pcmpgtw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x65, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4127, Serial#: 3927
    public void pcmpgtw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x65, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4128, Serial#: 3924
    public void pcmpgtw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x65, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4129, Serial#: 3923
    public void pcmpgtw(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x65, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4130, Serial#: 3931
    public void pcmpgtw(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x65, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4131, Serial#: 3926
    public void rip_pcmpgtw(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x65, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4132, Serial#: 3930
    public void pcmpgtw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x65, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4133, Serial#: 3925
    public void m_pcmpgtw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x65, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4134, Serial#: 3929
    public void pcmpgtw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x65, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4135, Serial#: 3856
    public void pcmpgtw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0x65, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4136, Serial#: 3855
    public void pcmpgtw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0x65, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4137, Serial#: 3852
    public void pcmpgtw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0x65, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4138, Serial#: 3851
    public void pcmpgtw(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0x65, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4139, Serial#: 3859
    public void pcmpgtw(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0x65, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4140, Serial#: 3854
    public void rip_pcmpgtw(MMXRegister destination, int rel32) {
        assemble0315((byte) 0x65, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4141, Serial#: 3858
    public void pcmpgtw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0x65, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4142, Serial#: 3853
    public void m_pcmpgtw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0x65, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4143, Serial#: 3857
    public void pcmpgtw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0x65, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pextrw  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 4144, Serial#: 4437
    public void pextrw(AMD64GeneralRegister32 destination, AMD64XMMRegister source, byte imm8) {
        assemble0634((byte) 0xC5, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pextrw  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 4145, Serial#: 4401
    public void pextrw(AMD64GeneralRegister32 destination, MMXRegister source, byte imm8) {
        assemble0635((byte) 0xC5, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pinsrw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 4146, Serial#: 4433
    public void pinsrw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0636((byte) 0xC4, destination, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pinsrw  }<i>destination</i>, <i>disp8</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 4147, Serial#: 4432
    public void pinsrw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source, byte imm8) {
        assemble0637((byte) 0xC4, destination, disp8, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pinsrw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 4148, Serial#: 4429
    public void pinsrw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0638((byte) 0xC4, destination, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pinsrw  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 4149, Serial#: 4436
    public void pinsrw(AMD64XMMRegister destination, AMD64GeneralRegister32 source, byte imm8) {
        assemble0639((byte) 0xC4, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pinsrw  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 4150, Serial#: 4428
    public void pinsrw(AMD64XMMRegister destination, AMD64IndirectRegister64 source, byte imm8) {
        assemble0640((byte) 0xC4, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pinsrw  }<i>destination</i>, <i>rel32</i>, <i>imm8</i>
     */
    // Template#: 4151, Serial#: 4431
    public void rip_pinsrw(AMD64XMMRegister destination, int rel32, byte imm8) {
        assemble0641((byte) 0xC4, destination, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pinsrw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 4152, Serial#: 4435
    public void pinsrw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0642((byte) 0xC4, destination, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pinsrw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 4153, Serial#: 4430
    public void m_pinsrw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0643((byte) 0xC4, destination, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pinsrw  }<i>destination</i>, <i>disp32</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 4154, Serial#: 4434
    public void pinsrw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source, byte imm8) {
        assemble0644((byte) 0xC4, destination, disp32, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pinsrw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 4155, Serial#: 4397
    public void pinsrw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0645((byte) 0xC4, destination, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pinsrw  }<i>destination</i>, <i>disp8</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 4156, Serial#: 4396
    public void pinsrw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source, byte imm8) {
        assemble0646((byte) 0xC4, destination, disp8, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pinsrw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 4157, Serial#: 4393
    public void pinsrw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0647((byte) 0xC4, destination, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pinsrw  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 4158, Serial#: 4400
    public void pinsrw(MMXRegister destination, AMD64GeneralRegister32 source, byte imm8) {
        assemble0648((byte) 0xC4, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pinsrw  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 4159, Serial#: 4392
    public void pinsrw(MMXRegister destination, AMD64IndirectRegister64 source, byte imm8) {
        assemble0649((byte) 0xC4, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pinsrw  }<i>destination</i>, <i>rel32</i>, <i>imm8</i>
     */
    // Template#: 4160, Serial#: 4395
    public void rip_pinsrw(MMXRegister destination, int rel32, byte imm8) {
        assemble0650((byte) 0xC4, destination, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pinsrw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 4161, Serial#: 4399
    public void pinsrw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0651((byte) 0xC4, destination, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pinsrw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 4162, Serial#: 4394
    public void m_pinsrw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0652((byte) 0xC4, destination, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pinsrw  }<i>destination</i>, <i>disp32</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 4163, Serial#: 4398
    public void pinsrw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source, byte imm8) {
        assemble0653((byte) 0xC4, destination, disp32, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaddwd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4164, Serial#: 4824
    public void pmaddwd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xF5, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaddwd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4165, Serial#: 4823
    public void pmaddwd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xF5, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaddwd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4166, Serial#: 4820
    public void pmaddwd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xF5, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaddwd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4167, Serial#: 4819
    public void pmaddwd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xF5, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaddwd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4168, Serial#: 4827
    public void pmaddwd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xF5, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaddwd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4169, Serial#: 4822
    public void rip_pmaddwd(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xF5, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaddwd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4170, Serial#: 4826
    public void pmaddwd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xF5, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaddwd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4171, Serial#: 4821
    public void m_pmaddwd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xF5, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaddwd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4172, Serial#: 4825
    public void pmaddwd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xF5, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaddwd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4173, Serial#: 4769
    public void pmaddwd(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xF5, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaddwd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4174, Serial#: 4768
    public void pmaddwd(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xF5, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaddwd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4175, Serial#: 4765
    public void pmaddwd(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xF5, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaddwd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4176, Serial#: 4764
    public void pmaddwd(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xF5, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaddwd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4177, Serial#: 4772
    public void pmaddwd(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xF5, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaddwd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4178, Serial#: 4767
    public void rip_pmaddwd(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xF5, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaddwd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4179, Serial#: 4771
    public void pmaddwd(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xF5, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaddwd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4180, Serial#: 4766
    public void m_pmaddwd(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xF5, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaddwd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4181, Serial#: 4770
    public void pmaddwd(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xF5, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxsw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4182, Serial#: 6579
    public void pmaxsw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xEE, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxsw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4183, Serial#: 6578
    public void pmaxsw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xEE, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxsw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4184, Serial#: 6575
    public void pmaxsw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xEE, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxsw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4185, Serial#: 6574
    public void pmaxsw(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xEE, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxsw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4186, Serial#: 6582
    public void pmaxsw(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xEE, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxsw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4187, Serial#: 6577
    public void rip_pmaxsw(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xEE, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxsw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4188, Serial#: 6581
    public void pmaxsw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xEE, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxsw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4189, Serial#: 6576
    public void m_pmaxsw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xEE, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxsw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4190, Serial#: 6580
    public void pmaxsw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xEE, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxsw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4191, Serial#: 6507
    public void pmaxsw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xEE, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxsw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4192, Serial#: 6506
    public void pmaxsw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xEE, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxsw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4193, Serial#: 6503
    public void pmaxsw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xEE, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxsw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4194, Serial#: 6502
    public void pmaxsw(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xEE, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxsw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4195, Serial#: 6510
    public void pmaxsw(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xEE, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxsw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4196, Serial#: 6505
    public void rip_pmaxsw(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xEE, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxsw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4197, Serial#: 6509
    public void pmaxsw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xEE, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxsw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4198, Serial#: 6504
    public void m_pmaxsw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xEE, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxsw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4199, Serial#: 6508
    public void pmaxsw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xEE, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxub  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4200, Serial#: 6435
    public void pmaxub(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xDE, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxub  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4201, Serial#: 6434
    public void pmaxub(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xDE, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxub  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4202, Serial#: 6431
    public void pmaxub(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xDE, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxub  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4203, Serial#: 6430
    public void pmaxub(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xDE, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxub  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4204, Serial#: 6438
    public void pmaxub(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xDE, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxub  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4205, Serial#: 6433
    public void rip_pmaxub(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xDE, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxub  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4206, Serial#: 6437
    public void pmaxub(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xDE, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxub  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4207, Serial#: 6432
    public void m_pmaxub(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xDE, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxub  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4208, Serial#: 6436
    public void pmaxub(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xDE, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxub  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4209, Serial#: 6363
    public void pmaxub(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xDE, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxub  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4210, Serial#: 6362
    public void pmaxub(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xDE, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxub  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4211, Serial#: 6359
    public void pmaxub(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xDE, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxub  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4212, Serial#: 6358
    public void pmaxub(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xDE, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxub  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4213, Serial#: 6366
    public void pmaxub(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xDE, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxub  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4214, Serial#: 6361
    public void rip_pmaxub(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xDE, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxub  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4215, Serial#: 6365
    public void pmaxub(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xDE, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxub  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4216, Serial#: 6360
    public void m_pmaxub(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xDE, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxub  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4217, Serial#: 6364
    public void pmaxub(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xDE, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminsw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4218, Serial#: 6543
    public void pminsw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xEA, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminsw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4219, Serial#: 6542
    public void pminsw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xEA, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminsw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4220, Serial#: 6539
    public void pminsw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xEA, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminsw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4221, Serial#: 6538
    public void pminsw(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xEA, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminsw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4222, Serial#: 6546
    public void pminsw(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xEA, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminsw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4223, Serial#: 6541
    public void rip_pminsw(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xEA, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminsw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4224, Serial#: 6545
    public void pminsw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xEA, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminsw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4225, Serial#: 6540
    public void m_pminsw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xEA, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminsw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4226, Serial#: 6544
    public void pminsw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xEA, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminsw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4227, Serial#: 6471
    public void pminsw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xEA, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminsw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4228, Serial#: 6470
    public void pminsw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xEA, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminsw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4229, Serial#: 6467
    public void pminsw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xEA, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminsw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4230, Serial#: 6466
    public void pminsw(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xEA, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminsw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4231, Serial#: 6474
    public void pminsw(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xEA, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminsw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4232, Serial#: 6469
    public void rip_pminsw(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xEA, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminsw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4233, Serial#: 6473
    public void pminsw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xEA, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminsw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4234, Serial#: 6468
    public void m_pminsw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xEA, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminsw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4235, Serial#: 6472
    public void pminsw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xEA, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminub  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4236, Serial#: 6399
    public void pminub(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xDA, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminub  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4237, Serial#: 6398
    public void pminub(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xDA, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminub  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4238, Serial#: 6395
    public void pminub(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xDA, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminub  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4239, Serial#: 6394
    public void pminub(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xDA, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminub  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4240, Serial#: 6402
    public void pminub(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xDA, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminub  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4241, Serial#: 6397
    public void rip_pminub(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xDA, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminub  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4242, Serial#: 6401
    public void pminub(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xDA, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminub  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4243, Serial#: 6396
    public void m_pminub(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xDA, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminub  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4244, Serial#: 6400
    public void pminub(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xDA, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminub  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4245, Serial#: 6327
    public void pminub(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xDA, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminub  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4246, Serial#: 6326
    public void pminub(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xDA, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminub  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4247, Serial#: 6323
    public void pminub(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xDA, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminub  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4248, Serial#: 6322
    public void pminub(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xDA, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminub  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4249, Serial#: 6330
    public void pminub(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xDA, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminub  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4250, Serial#: 6325
    public void rip_pminub(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xDA, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminub  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4251, Serial#: 6329
    public void pminub(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xDA, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminub  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4252, Serial#: 6324
    public void m_pminub(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xDA, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminub  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4253, Serial#: 6328
    public void pminub(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xDA, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmovmskb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4254, Serial#: 4574
    public void pmovmskb(AMD64GeneralRegister32 destination, AMD64XMMRegister source) {
        assemble0607((byte) 0xD7, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmovmskb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4255, Serial#: 4510
    public void pmovmskb(AMD64GeneralRegister32 destination, MMXRegister source) {
        assemble0654((byte) 0xD7, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhuw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4256, Serial#: 4680
    public void pmulhuw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xE4, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhuw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4257, Serial#: 4679
    public void pmulhuw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xE4, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhuw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4258, Serial#: 4676
    public void pmulhuw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xE4, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhuw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4259, Serial#: 4675
    public void pmulhuw(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xE4, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhuw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4260, Serial#: 4683
    public void pmulhuw(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xE4, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhuw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4261, Serial#: 4678
    public void rip_pmulhuw(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xE4, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhuw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4262, Serial#: 4682
    public void pmulhuw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xE4, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhuw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4263, Serial#: 4677
    public void m_pmulhuw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xE4, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhuw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4264, Serial#: 4681
    public void pmulhuw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xE4, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhuw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4265, Serial#: 4618
    public void pmulhuw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xE4, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhuw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4266, Serial#: 4617
    public void pmulhuw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xE4, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhuw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4267, Serial#: 4614
    public void pmulhuw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xE4, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhuw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4268, Serial#: 4613
    public void pmulhuw(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xE4, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhuw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4269, Serial#: 4621
    public void pmulhuw(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xE4, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhuw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4270, Serial#: 4616
    public void rip_pmulhuw(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xE4, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhuw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4271, Serial#: 4620
    public void pmulhuw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xE4, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhuw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4272, Serial#: 4615
    public void m_pmulhuw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xE4, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhuw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4273, Serial#: 4619
    public void pmulhuw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xE4, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4274, Serial#: 4689
    public void pmulhw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xE5, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4275, Serial#: 4688
    public void pmulhw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xE5, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4276, Serial#: 4685
    public void pmulhw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xE5, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4277, Serial#: 4684
    public void pmulhw(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xE5, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4278, Serial#: 4692
    public void pmulhw(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xE5, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4279, Serial#: 4687
    public void rip_pmulhw(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xE5, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4280, Serial#: 4691
    public void pmulhw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xE5, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4281, Serial#: 4686
    public void m_pmulhw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xE5, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4282, Serial#: 4690
    public void pmulhw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xE5, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4283, Serial#: 4627
    public void pmulhw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xE5, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4284, Serial#: 4626
    public void pmulhw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xE5, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4285, Serial#: 4623
    public void pmulhw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xE5, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4286, Serial#: 4622
    public void pmulhw(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xE5, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4287, Serial#: 4630
    public void pmulhw(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xE5, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4288, Serial#: 4625
    public void rip_pmulhw(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xE5, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4289, Serial#: 4629
    public void pmulhw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xE5, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4290, Serial#: 4624
    public void m_pmulhw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xE5, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4291, Serial#: 4628
    public void pmulhw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xE5, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmullw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4292, Serial#: 4561
    public void pmullw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xD5, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmullw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4293, Serial#: 4560
    public void pmullw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xD5, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmullw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4294, Serial#: 4557
    public void pmullw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xD5, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmullw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4295, Serial#: 4556
    public void pmullw(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xD5, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmullw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4296, Serial#: 4564
    public void pmullw(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xD5, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmullw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4297, Serial#: 4559
    public void rip_pmullw(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xD5, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmullw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4298, Serial#: 4563
    public void pmullw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xD5, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmullw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4299, Serial#: 4558
    public void m_pmullw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xD5, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmullw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4300, Serial#: 4562
    public void pmullw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xD5, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmullw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4301, Serial#: 4506
    public void pmullw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xD5, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmullw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4302, Serial#: 4505
    public void pmullw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xD5, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmullw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4303, Serial#: 4502
    public void pmullw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xD5, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmullw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4304, Serial#: 4501
    public void pmullw(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xD5, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmullw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4305, Serial#: 4509
    public void pmullw(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xD5, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmullw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4306, Serial#: 4504
    public void rip_pmullw(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xD5, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmullw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4307, Serial#: 4508
    public void pmullw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xD5, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmullw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4308, Serial#: 4503
    public void m_pmullw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xD5, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmullw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4309, Serial#: 4507
    public void pmullw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xD5, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmuludq  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4310, Serial#: 4815
    public void pmuludq(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xF4, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmuludq  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4311, Serial#: 4814
    public void pmuludq(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xF4, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmuludq  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4312, Serial#: 4811
    public void pmuludq(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xF4, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmuludq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4313, Serial#: 4810
    public void pmuludq(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xF4, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmuludq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4314, Serial#: 4818
    public void pmuludq(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xF4, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmuludq  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4315, Serial#: 4813
    public void rip_pmuludq(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xF4, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmuludq  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4316, Serial#: 4817
    public void pmuludq(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xF4, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmuludq  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4317, Serial#: 4812
    public void m_pmuludq(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xF4, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmuludq  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4318, Serial#: 4816
    public void pmuludq(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xF4, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmuludq  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4319, Serial#: 4760
    public void pmuludq(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xF4, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmuludq  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4320, Serial#: 4759
    public void pmuludq(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xF4, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmuludq  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4321, Serial#: 4756
    public void pmuludq(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xF4, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmuludq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4322, Serial#: 4755
    public void pmuludq(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xF4, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmuludq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4323, Serial#: 4763
    public void pmuludq(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xF4, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmuludq  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4324, Serial#: 4758
    public void rip_pmuludq(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xF4, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmuludq  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4325, Serial#: 4762
    public void pmuludq(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xF4, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmuludq  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4326, Serial#: 4757
    public void m_pmuludq(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xF4, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmuludq  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4327, Serial#: 4761
    public void pmuludq(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xF4, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pop  }
     */
    // Template#: 4328, Serial#: 4140
    public void pop_FS() {
        assemble0252((byte) 0xA1);
    }

    /**
     * Pseudo-external assembler syntax: {@code pop  }
     */
    // Template#: 4329, Serial#: 5979
    public void pop_GS() {
        assemble0252((byte) 0xA9);
    }

    /**
     * Pseudo-external assembler syntax: {@code pop  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4330, Serial#: 2461
    public void pop(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0655((byte) 0x8F, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pop  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 4331, Serial#: 2460
    public void pop(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0656((byte) 0x8F, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code pop  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4332, Serial#: 2457
    public void pop(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0657((byte) 0x8F, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pop  }<i>register</i>
     */
    // Template#: 4333, Serial#: 2274
    public void pop(AMD64GeneralRegister16 register) {
        assemble0658((byte) 0x58, register);
    }

    /**
     * Pseudo-external assembler syntax: {@code pop  }<i>register</i>
     */
    // Template#: 4334, Serial#: 2273
    public void pop(AMD64GeneralRegister64 register) {
        assemble0659((byte) 0x58, register);
    }

    /**
     * Pseudo-external assembler syntax: {@code pop  }<i>destination</i>
     */
    // Template#: 4335, Serial#: 2456
    public void pop(AMD64IndirectRegister64 destination) {
        assemble0660((byte) 0x8F, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code pop  }<i>rel32</i>
     */
    // Template#: 4336, Serial#: 2459
    public void rip_pop(int rel32) {
        assemble0661((byte) 0x8F, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pop  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4337, Serial#: 2463
    public void pop(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0662((byte) 0x8F, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pop  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4338, Serial#: 2458
    public void m_pop(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0663((byte) 0x8F, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pop  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 4339, Serial#: 2462
    public void pop(int disp32, AMD64IndirectRegister64 destination) {
        assemble0664((byte) 0x8F, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code popfq  }
     */
    // Template#: 4340, Serial#: 2471
    public void popfq() {
        assemble0146((byte) 0x9D);
    }

    /**
     * Pseudo-external assembler syntax: {@code popfw  }
     */
    // Template#: 4341, Serial#: 2472
    public void popfw() {
        assemble0271((byte) 0x9D);
    }

    /**
     * Pseudo-external assembler syntax: {@code por  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4342, Serial#: 6552
    public void por(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xEB, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code por  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4343, Serial#: 6551
    public void por(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xEB, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code por  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4344, Serial#: 6548
    public void por(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xEB, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code por  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4345, Serial#: 6547
    public void por(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xEB, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code por  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4346, Serial#: 6555
    public void por(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xEB, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code por  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4347, Serial#: 6550
    public void rip_por(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xEB, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code por  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4348, Serial#: 6554
    public void por(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xEB, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code por  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4349, Serial#: 6549
    public void m_por(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xEB, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code por  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4350, Serial#: 6553
    public void por(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xEB, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code por  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4351, Serial#: 6480
    public void por(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xEB, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code por  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4352, Serial#: 6479
    public void por(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xEB, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code por  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4353, Serial#: 6476
    public void por(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xEB, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code por  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4354, Serial#: 6475
    public void por(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xEB, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code por  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4355, Serial#: 6483
    public void por(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xEB, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code por  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4356, Serial#: 6478
    public void rip_por(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xEB, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code por  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4357, Serial#: 6482
    public void por(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xEB, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code por  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4358, Serial#: 6477
    public void m_por(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xEB, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code por  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4359, Serial#: 6481
    public void por(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xEB, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetch  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4360, Serial#: 4858
    public void prefetch(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0244((byte) 0x0D, (byte) 0x00, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetch  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 4361, Serial#: 4857
    public void prefetch(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0245((byte) 0x0D, (byte) 0x00, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetch  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4362, Serial#: 4850
    public void prefetch(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0246((byte) 0x0D, (byte) 0x00, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetch  }<i>destination</i>
     */
    // Template#: 4363, Serial#: 4849
    public void prefetch(AMD64IndirectRegister64 destination) {
        assemble0247((byte) 0x0D, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetch  }<i>rel32</i>
     */
    // Template#: 4364, Serial#: 4852
    public void rip_prefetch(int rel32) {
        assemble0248((byte) 0x0D, (byte) 0x00, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetch  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4365, Serial#: 4862
    public void prefetch(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0249((byte) 0x0D, (byte) 0x00, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetch  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4366, Serial#: 4851
    public void m_prefetch(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0250((byte) 0x0D, (byte) 0x00, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetch  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 4367, Serial#: 4861
    public void prefetch(int disp32, AMD64IndirectRegister64 destination) {
        assemble0251((byte) 0x0D, (byte) 0x00, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetchnta  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4368, Serial#: 4883
    public void prefetchnta(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0244((byte) 0x18, (byte) 0x00, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetchnta  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 4369, Serial#: 4882
    public void prefetchnta(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0245((byte) 0x18, (byte) 0x00, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetchnta  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4370, Serial#: 4867
    public void prefetchnta(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0246((byte) 0x18, (byte) 0x00, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetchnta  }<i>destination</i>
     */
    // Template#: 4371, Serial#: 4866
    public void prefetchnta(AMD64IndirectRegister64 destination) {
        assemble0247((byte) 0x18, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetchnta  }<i>rel32</i>
     */
    // Template#: 4372, Serial#: 4869
    public void rip_prefetchnta(int rel32) {
        assemble0248((byte) 0x18, (byte) 0x00, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetchnta  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4373, Serial#: 4891
    public void prefetchnta(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0249((byte) 0x18, (byte) 0x00, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetchnta  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4374, Serial#: 4868
    public void m_prefetchnta(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0250((byte) 0x18, (byte) 0x00, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetchnta  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 4375, Serial#: 4890
    public void prefetchnta(int disp32, AMD64IndirectRegister64 destination) {
        assemble0251((byte) 0x18, (byte) 0x00, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetcht0  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4376, Serial#: 4885
    public void prefetcht0(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0244((byte) 0x18, (byte) 0x01, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetcht0  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 4377, Serial#: 4884
    public void prefetcht0(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0245((byte) 0x18, (byte) 0x01, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetcht0  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4378, Serial#: 4871
    public void prefetcht0(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0246((byte) 0x18, (byte) 0x01, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetcht0  }<i>destination</i>
     */
    // Template#: 4379, Serial#: 4870
    public void prefetcht0(AMD64IndirectRegister64 destination) {
        assemble0247((byte) 0x18, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetcht0  }<i>rel32</i>
     */
    // Template#: 4380, Serial#: 4873
    public void rip_prefetcht0(int rel32) {
        assemble0248((byte) 0x18, (byte) 0x01, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetcht0  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4381, Serial#: 4893
    public void prefetcht0(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0249((byte) 0x18, (byte) 0x01, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetcht0  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4382, Serial#: 4872
    public void m_prefetcht0(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0250((byte) 0x18, (byte) 0x01, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetcht0  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 4383, Serial#: 4892
    public void prefetcht0(int disp32, AMD64IndirectRegister64 destination) {
        assemble0251((byte) 0x18, (byte) 0x01, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetcht1  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4384, Serial#: 4887
    public void prefetcht1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0244((byte) 0x18, (byte) 0x02, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetcht1  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 4385, Serial#: 4886
    public void prefetcht1(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0245((byte) 0x18, (byte) 0x02, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetcht1  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4386, Serial#: 4875
    public void prefetcht1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0246((byte) 0x18, (byte) 0x02, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetcht1  }<i>destination</i>
     */
    // Template#: 4387, Serial#: 4874
    public void prefetcht1(AMD64IndirectRegister64 destination) {
        assemble0247((byte) 0x18, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetcht1  }<i>rel32</i>
     */
    // Template#: 4388, Serial#: 4877
    public void rip_prefetcht1(int rel32) {
        assemble0248((byte) 0x18, (byte) 0x02, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetcht1  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4389, Serial#: 4895
    public void prefetcht1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0249((byte) 0x18, (byte) 0x02, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetcht1  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4390, Serial#: 4876
    public void m_prefetcht1(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0250((byte) 0x18, (byte) 0x02, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetcht1  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 4391, Serial#: 4894
    public void prefetcht1(int disp32, AMD64IndirectRegister64 destination) {
        assemble0251((byte) 0x18, (byte) 0x02, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetcht2  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4392, Serial#: 4889
    public void prefetcht2(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0244((byte) 0x18, (byte) 0x03, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetcht2  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 4393, Serial#: 4888
    public void prefetcht2(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0245((byte) 0x18, (byte) 0x03, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetcht2  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4394, Serial#: 4879
    public void prefetcht2(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0246((byte) 0x18, (byte) 0x03, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetcht2  }<i>destination</i>
     */
    // Template#: 4395, Serial#: 4878
    public void prefetcht2(AMD64IndirectRegister64 destination) {
        assemble0247((byte) 0x18, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetcht2  }<i>rel32</i>
     */
    // Template#: 4396, Serial#: 4881
    public void rip_prefetcht2(int rel32) {
        assemble0248((byte) 0x18, (byte) 0x03, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetcht2  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4397, Serial#: 4897
    public void prefetcht2(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0249((byte) 0x18, (byte) 0x03, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetcht2  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4398, Serial#: 4880
    public void m_prefetcht2(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0250((byte) 0x18, (byte) 0x03, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetcht2  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 4399, Serial#: 4896
    public void prefetcht2(int disp32, AMD64IndirectRegister64 destination) {
        assemble0251((byte) 0x18, (byte) 0x03, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetchw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4400, Serial#: 4860
    public void prefetchw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0244((byte) 0x0D, (byte) 0x01, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetchw  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 4401, Serial#: 4859
    public void prefetchw(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0245((byte) 0x0D, (byte) 0x01, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetchw  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4402, Serial#: 4854
    public void prefetchw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0246((byte) 0x0D, (byte) 0x01, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetchw  }<i>destination</i>
     */
    // Template#: 4403, Serial#: 4853
    public void prefetchw(AMD64IndirectRegister64 destination) {
        assemble0247((byte) 0x0D, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetchw  }<i>rel32</i>
     */
    // Template#: 4404, Serial#: 4856
    public void rip_prefetchw(int rel32) {
        assemble0248((byte) 0x0D, (byte) 0x01, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetchw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4405, Serial#: 4864
    public void prefetchw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0249((byte) 0x0D, (byte) 0x01, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetchw  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4406, Serial#: 4855
    public void m_prefetchw(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0250((byte) 0x0D, (byte) 0x01, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code prefetchw  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 4407, Serial#: 4863
    public void prefetchw(int disp32, AMD64IndirectRegister64 destination) {
        assemble0251((byte) 0x0D, (byte) 0x01, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code psadbw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4408, Serial#: 4833
    public void psadbw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xF6, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psadbw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4409, Serial#: 4832
    public void psadbw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xF6, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psadbw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4410, Serial#: 4829
    public void psadbw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xF6, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psadbw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4411, Serial#: 4828
    public void psadbw(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xF6, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psadbw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4412, Serial#: 4836
    public void psadbw(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xF6, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psadbw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4413, Serial#: 4831
    public void rip_psadbw(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xF6, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code psadbw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4414, Serial#: 4835
    public void psadbw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xF6, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psadbw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4415, Serial#: 4830
    public void m_psadbw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xF6, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psadbw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4416, Serial#: 4834
    public void psadbw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xF6, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psadbw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4417, Serial#: 4778
    public void psadbw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xF6, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psadbw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4418, Serial#: 4777
    public void psadbw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xF6, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psadbw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4419, Serial#: 4774
    public void psadbw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xF6, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psadbw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4420, Serial#: 4773
    public void psadbw(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xF6, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psadbw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4421, Serial#: 4781
    public void psadbw(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xF6, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psadbw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4422, Serial#: 4776
    public void rip_psadbw(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xF6, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code psadbw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4423, Serial#: 4780
    public void psadbw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xF6, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psadbw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4424, Serial#: 4775
    public void m_psadbw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xF6, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psadbw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4425, Serial#: 4779
    public void psadbw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xF6, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshufd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 4426, Serial#: 4000
    public void pshufd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0636((byte) 0x70, destination, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshufd  }<i>destination</i>, <i>disp8</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 4427, Serial#: 3999
    public void pshufd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source, byte imm8) {
        assemble0637((byte) 0x70, destination, disp8, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshufd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 4428, Serial#: 3996
    public void pshufd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0638((byte) 0x70, destination, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshufd  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 4429, Serial#: 3995
    public void pshufd(AMD64XMMRegister destination, AMD64IndirectRegister64 source, byte imm8) {
        assemble0640((byte) 0x70, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshufd  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 4430, Serial#: 4003
    public void pshufd(AMD64XMMRegister destination, AMD64XMMRegister source, byte imm8) {
        assemble0665((byte) 0x70, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshufd  }<i>destination</i>, <i>rel32</i>, <i>imm8</i>
     */
    // Template#: 4431, Serial#: 3998
    public void rip_pshufd(AMD64XMMRegister destination, int rel32, byte imm8) {
        assemble0641((byte) 0x70, destination, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshufd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 4432, Serial#: 4002
    public void pshufd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0642((byte) 0x70, destination, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshufd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 4433, Serial#: 3997
    public void m_pshufd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0643((byte) 0x70, destination, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshufd  }<i>destination</i>, <i>disp32</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 4434, Serial#: 4001
    public void pshufd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source, byte imm8) {
        assemble0644((byte) 0x70, destination, disp32, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshufhw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 4435, Serial#: 4055
    public void pshufhw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0666((byte) 0x70, destination, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshufhw  }<i>destination</i>, <i>disp8</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 4436, Serial#: 4054
    public void pshufhw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source, byte imm8) {
        assemble0667((byte) 0x70, destination, disp8, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshufhw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 4437, Serial#: 4051
    public void pshufhw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0668((byte) 0x70, destination, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshufhw  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 4438, Serial#: 4050
    public void pshufhw(AMD64XMMRegister destination, AMD64IndirectRegister64 source, byte imm8) {
        assemble0669((byte) 0x70, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshufhw  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 4439, Serial#: 4058
    public void pshufhw(AMD64XMMRegister destination, AMD64XMMRegister source, byte imm8) {
        assemble0670((byte) 0x70, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshufhw  }<i>destination</i>, <i>rel32</i>, <i>imm8</i>
     */
    // Template#: 4440, Serial#: 4053
    public void rip_pshufhw(AMD64XMMRegister destination, int rel32, byte imm8) {
        assemble0671((byte) 0x70, destination, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshufhw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 4441, Serial#: 4057
    public void pshufhw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0672((byte) 0x70, destination, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshufhw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 4442, Serial#: 4052
    public void m_pshufhw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0673((byte) 0x70, destination, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshufhw  }<i>destination</i>, <i>disp32</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 4443, Serial#: 4056
    public void pshufhw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source, byte imm8) {
        assemble0674((byte) 0x70, destination, disp32, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshuflw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 4444, Serial#: 4046
    public void pshuflw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0675((byte) 0x70, destination, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshuflw  }<i>destination</i>, <i>disp8</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 4445, Serial#: 4045
    public void pshuflw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source, byte imm8) {
        assemble0676((byte) 0x70, destination, disp8, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshuflw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 4446, Serial#: 4042
    public void pshuflw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0677((byte) 0x70, destination, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshuflw  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 4447, Serial#: 4041
    public void pshuflw(AMD64XMMRegister destination, AMD64IndirectRegister64 source, byte imm8) {
        assemble0678((byte) 0x70, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshuflw  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 4448, Serial#: 4049
    public void pshuflw(AMD64XMMRegister destination, AMD64XMMRegister source, byte imm8) {
        assemble0679((byte) 0x70, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshuflw  }<i>destination</i>, <i>rel32</i>, <i>imm8</i>
     */
    // Template#: 4449, Serial#: 4044
    public void rip_pshuflw(AMD64XMMRegister destination, int rel32, byte imm8) {
        assemble0680((byte) 0x70, destination, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshuflw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 4450, Serial#: 4048
    public void pshuflw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0681((byte) 0x70, destination, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshuflw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 4451, Serial#: 4043
    public void m_pshuflw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0682((byte) 0x70, destination, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshuflw  }<i>destination</i>, <i>disp32</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 4452, Serial#: 4047
    public void pshuflw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source, byte imm8) {
        assemble0683((byte) 0x70, destination, disp32, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshufw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 4453, Serial#: 3955
    public void pshufw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0645((byte) 0x70, destination, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshufw  }<i>destination</i>, <i>disp8</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 4454, Serial#: 3954
    public void pshufw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source, byte imm8) {
        assemble0646((byte) 0x70, destination, disp8, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshufw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 4455, Serial#: 3951
    public void pshufw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0647((byte) 0x70, destination, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshufw  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 4456, Serial#: 3950
    public void pshufw(MMXRegister destination, AMD64IndirectRegister64 source, byte imm8) {
        assemble0649((byte) 0x70, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshufw  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 4457, Serial#: 3958
    public void pshufw(MMXRegister destination, MMXRegister source, byte imm8) {
        assemble0684((byte) 0x70, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshufw  }<i>destination</i>, <i>rel32</i>, <i>imm8</i>
     */
    // Template#: 4458, Serial#: 3953
    public void rip_pshufw(MMXRegister destination, int rel32, byte imm8) {
        assemble0650((byte) 0x70, destination, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshufw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 4459, Serial#: 3957
    public void pshufw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0651((byte) 0x70, destination, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshufw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 4460, Serial#: 3952
    public void m_pshufw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0652((byte) 0x70, destination, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshufw  }<i>destination</i>, <i>disp32</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 4461, Serial#: 3956
    public void pshufw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source, byte imm8) {
        assemble0653((byte) 0x70, destination, disp32, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pslld  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 4462, Serial#: 4009
    public void pslld(AMD64XMMRegister destination, byte imm8) {
        assemble0685((byte) 0x72, (byte) 0x06, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pslld  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4463, Serial#: 4797
    public void pslld(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xF2, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pslld  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4464, Serial#: 4796
    public void pslld(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xF2, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pslld  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4465, Serial#: 4793
    public void pslld(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xF2, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pslld  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4466, Serial#: 4792
    public void pslld(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xF2, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pslld  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4467, Serial#: 4800
    public void pslld(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xF2, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pslld  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4468, Serial#: 4795
    public void rip_pslld(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xF2, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pslld  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4469, Serial#: 4799
    public void pslld(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xF2, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pslld  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4470, Serial#: 4794
    public void m_pslld(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xF2, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pslld  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4471, Serial#: 4798
    public void pslld(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xF2, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pslld  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 4472, Serial#: 3964
    public void pslld(MMXRegister destination, byte imm8) {
        assemble0686((byte) 0x72, (byte) 0x06, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code pslld  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4473, Serial#: 4742
    public void pslld(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xF2, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pslld  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4474, Serial#: 4741
    public void pslld(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xF2, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pslld  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4475, Serial#: 4738
    public void pslld(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xF2, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pslld  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4476, Serial#: 4737
    public void pslld(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xF2, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pslld  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4477, Serial#: 4745
    public void pslld(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xF2, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pslld  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4478, Serial#: 4740
    public void rip_pslld(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xF2, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pslld  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4479, Serial#: 4744
    public void pslld(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xF2, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pslld  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4480, Serial#: 4739
    public void m_pslld(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xF2, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pslld  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4481, Serial#: 4743
    public void pslld(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xF2, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pslldq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 4482, Serial#: 4013
    public void pslldq(AMD64XMMRegister destination, byte imm8) {
        assemble0685((byte) 0x73, (byte) 0x07, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 4483, Serial#: 4012
    public void psllq(AMD64XMMRegister destination, byte imm8) {
        assemble0685((byte) 0x73, (byte) 0x06, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllq  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4484, Serial#: 4806
    public void psllq(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xF3, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllq  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4485, Serial#: 4805
    public void psllq(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xF3, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllq  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4486, Serial#: 4802
    public void psllq(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xF3, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4487, Serial#: 4801
    public void psllq(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xF3, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4488, Serial#: 4809
    public void psllq(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xF3, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllq  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4489, Serial#: 4804
    public void rip_psllq(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xF3, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllq  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4490, Serial#: 4808
    public void psllq(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xF3, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllq  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4491, Serial#: 4803
    public void m_psllq(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xF3, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllq  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4492, Serial#: 4807
    public void psllq(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xF3, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 4493, Serial#: 3966
    public void psllq(MMXRegister destination, byte imm8) {
        assemble0686((byte) 0x73, (byte) 0x06, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllq  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4494, Serial#: 4751
    public void psllq(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xF3, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllq  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4495, Serial#: 4750
    public void psllq(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xF3, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllq  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4496, Serial#: 4747
    public void psllq(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xF3, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4497, Serial#: 4746
    public void psllq(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xF3, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4498, Serial#: 4754
    public void psllq(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xF3, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllq  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4499, Serial#: 4749
    public void rip_psllq(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xF3, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllq  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4500, Serial#: 4753
    public void psllq(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xF3, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllq  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4501, Serial#: 4748
    public void m_psllq(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xF3, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllq  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4502, Serial#: 4752
    public void psllq(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xF3, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 4503, Serial#: 4006
    public void psllw(AMD64XMMRegister destination, byte imm8) {
        assemble0685((byte) 0x71, (byte) 0x06, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4504, Serial#: 4788
    public void psllw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xF1, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4505, Serial#: 4787
    public void psllw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xF1, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4506, Serial#: 4784
    public void psllw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xF1, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4507, Serial#: 4783
    public void psllw(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xF1, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4508, Serial#: 4791
    public void psllw(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xF1, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4509, Serial#: 4786
    public void rip_psllw(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xF1, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4510, Serial#: 4790
    public void psllw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xF1, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4511, Serial#: 4785
    public void m_psllw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xF1, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4512, Serial#: 4789
    public void psllw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xF1, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 4513, Serial#: 3961
    public void psllw(MMXRegister destination, byte imm8) {
        assemble0686((byte) 0x71, (byte) 0x06, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4514, Serial#: 4733
    public void psllw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xF1, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4515, Serial#: 4732
    public void psllw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xF1, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4516, Serial#: 4729
    public void psllw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xF1, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4517, Serial#: 4728
    public void psllw(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xF1, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4518, Serial#: 4736
    public void psllw(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xF1, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4519, Serial#: 4731
    public void rip_psllw(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xF1, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4520, Serial#: 4735
    public void psllw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xF1, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4521, Serial#: 4730
    public void m_psllw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xF1, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4522, Serial#: 4734
    public void psllw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xF1, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrad  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 4523, Serial#: 4008
    public void psrad(AMD64XMMRegister destination, byte imm8) {
        assemble0685((byte) 0x72, (byte) 0x04, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrad  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4524, Serial#: 4662
    public void psrad(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xE2, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrad  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4525, Serial#: 4661
    public void psrad(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xE2, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrad  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4526, Serial#: 4658
    public void psrad(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xE2, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrad  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4527, Serial#: 4657
    public void psrad(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xE2, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrad  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4528, Serial#: 4665
    public void psrad(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xE2, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrad  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4529, Serial#: 4660
    public void rip_psrad(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xE2, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrad  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4530, Serial#: 4664
    public void psrad(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xE2, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrad  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4531, Serial#: 4659
    public void m_psrad(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xE2, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrad  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4532, Serial#: 4663
    public void psrad(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xE2, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrad  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 4533, Serial#: 3963
    public void psrad(MMXRegister destination, byte imm8) {
        assemble0686((byte) 0x72, (byte) 0x04, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrad  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4534, Serial#: 4600
    public void psrad(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xE2, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrad  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4535, Serial#: 4599
    public void psrad(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xE2, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrad  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4536, Serial#: 4596
    public void psrad(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xE2, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrad  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4537, Serial#: 4595
    public void psrad(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xE2, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrad  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4538, Serial#: 4603
    public void psrad(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xE2, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrad  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4539, Serial#: 4598
    public void rip_psrad(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xE2, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrad  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4540, Serial#: 4602
    public void psrad(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xE2, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrad  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4541, Serial#: 4597
    public void m_psrad(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xE2, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrad  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4542, Serial#: 4601
    public void psrad(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xE2, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psraw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 4543, Serial#: 4005
    public void psraw(AMD64XMMRegister destination, byte imm8) {
        assemble0685((byte) 0x71, (byte) 0x04, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code psraw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4544, Serial#: 4653
    public void psraw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xE1, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psraw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4545, Serial#: 4652
    public void psraw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xE1, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psraw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4546, Serial#: 4649
    public void psraw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xE1, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psraw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4547, Serial#: 4648
    public void psraw(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xE1, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psraw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4548, Serial#: 4656
    public void psraw(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xE1, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psraw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4549, Serial#: 4651
    public void rip_psraw(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xE1, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code psraw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4550, Serial#: 4655
    public void psraw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xE1, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psraw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4551, Serial#: 4650
    public void m_psraw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xE1, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psraw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4552, Serial#: 4654
    public void psraw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xE1, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psraw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 4553, Serial#: 3960
    public void psraw(MMXRegister destination, byte imm8) {
        assemble0686((byte) 0x71, (byte) 0x04, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code psraw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4554, Serial#: 4591
    public void psraw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xE1, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psraw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4555, Serial#: 4590
    public void psraw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xE1, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psraw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4556, Serial#: 4587
    public void psraw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xE1, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psraw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4557, Serial#: 4586
    public void psraw(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xE1, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psraw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4558, Serial#: 4594
    public void psraw(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xE1, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psraw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4559, Serial#: 4589
    public void rip_psraw(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xE1, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code psraw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4560, Serial#: 4593
    public void psraw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xE1, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psraw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4561, Serial#: 4588
    public void m_psraw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xE1, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psraw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4562, Serial#: 4592
    public void psraw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xE1, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrld  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 4563, Serial#: 4007
    public void psrld(AMD64XMMRegister destination, byte imm8) {
        assemble0685((byte) 0x72, (byte) 0x02, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrld  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4564, Serial#: 4534
    public void psrld(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xD2, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrld  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4565, Serial#: 4533
    public void psrld(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xD2, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrld  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4566, Serial#: 4530
    public void psrld(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xD2, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrld  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4567, Serial#: 4529
    public void psrld(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xD2, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrld  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4568, Serial#: 4537
    public void psrld(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xD2, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrld  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4569, Serial#: 4532
    public void rip_psrld(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xD2, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrld  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4570, Serial#: 4536
    public void psrld(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xD2, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrld  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4571, Serial#: 4531
    public void m_psrld(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xD2, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrld  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4572, Serial#: 4535
    public void psrld(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xD2, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrld  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 4573, Serial#: 3962
    public void psrld(MMXRegister destination, byte imm8) {
        assemble0686((byte) 0x72, (byte) 0x02, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrld  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4574, Serial#: 4479
    public void psrld(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xD2, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrld  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4575, Serial#: 4478
    public void psrld(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xD2, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrld  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4576, Serial#: 4475
    public void psrld(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xD2, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrld  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4577, Serial#: 4474
    public void psrld(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xD2, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrld  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4578, Serial#: 4482
    public void psrld(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xD2, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrld  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4579, Serial#: 4477
    public void rip_psrld(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xD2, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrld  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4580, Serial#: 4481
    public void psrld(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xD2, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrld  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4581, Serial#: 4476
    public void m_psrld(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xD2, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrld  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4582, Serial#: 4480
    public void psrld(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xD2, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrldq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 4583, Serial#: 4011
    public void psrldq(AMD64XMMRegister destination, byte imm8) {
        assemble0685((byte) 0x73, (byte) 0x03, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 4584, Serial#: 4010
    public void psrlq(AMD64XMMRegister destination, byte imm8) {
        assemble0685((byte) 0x73, (byte) 0x02, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlq  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4585, Serial#: 4543
    public void psrlq(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xD3, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlq  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4586, Serial#: 4542
    public void psrlq(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xD3, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlq  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4587, Serial#: 4539
    public void psrlq(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xD3, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4588, Serial#: 4538
    public void psrlq(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xD3, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4589, Serial#: 4546
    public void psrlq(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xD3, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlq  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4590, Serial#: 4541
    public void rip_psrlq(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xD3, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlq  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4591, Serial#: 4545
    public void psrlq(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xD3, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlq  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4592, Serial#: 4540
    public void m_psrlq(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xD3, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlq  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4593, Serial#: 4544
    public void psrlq(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xD3, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 4594, Serial#: 3965
    public void psrlq(MMXRegister destination, byte imm8) {
        assemble0686((byte) 0x73, (byte) 0x02, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlq  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4595, Serial#: 4488
    public void psrlq(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xD3, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlq  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4596, Serial#: 4487
    public void psrlq(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xD3, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlq  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4597, Serial#: 4484
    public void psrlq(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xD3, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4598, Serial#: 4483
    public void psrlq(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xD3, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4599, Serial#: 4491
    public void psrlq(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xD3, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlq  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4600, Serial#: 4486
    public void rip_psrlq(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xD3, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlq  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4601, Serial#: 4490
    public void psrlq(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xD3, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlq  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4602, Serial#: 4485
    public void m_psrlq(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xD3, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlq  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4603, Serial#: 4489
    public void psrlq(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xD3, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 4604, Serial#: 4004
    public void psrlw(AMD64XMMRegister destination, byte imm8) {
        assemble0685((byte) 0x71, (byte) 0x02, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4605, Serial#: 4525
    public void psrlw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xD1, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4606, Serial#: 4524
    public void psrlw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xD1, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4607, Serial#: 4521
    public void psrlw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xD1, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4608, Serial#: 4520
    public void psrlw(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xD1, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4609, Serial#: 4528
    public void psrlw(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xD1, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4610, Serial#: 4523
    public void rip_psrlw(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xD1, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4611, Serial#: 4527
    public void psrlw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xD1, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4612, Serial#: 4522
    public void m_psrlw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xD1, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4613, Serial#: 4526
    public void psrlw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xD1, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 4614, Serial#: 3959
    public void psrlw(MMXRegister destination, byte imm8) {
        assemble0686((byte) 0x71, (byte) 0x02, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4615, Serial#: 4470
    public void psrlw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xD1, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4616, Serial#: 4469
    public void psrlw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xD1, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4617, Serial#: 4466
    public void psrlw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xD1, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4618, Serial#: 4465
    public void psrlw(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xD1, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4619, Serial#: 4473
    public void psrlw(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xD1, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4620, Serial#: 4468
    public void rip_psrlw(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xD1, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4621, Serial#: 4472
    public void psrlw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xD1, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4622, Serial#: 4467
    public void m_psrlw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xD1, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4623, Serial#: 4471
    public void psrlw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xD1, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubb  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4624, Serial#: 6660
    public void psubb(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xF8, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubb  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4625, Serial#: 6659
    public void psubb(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xF8, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubb  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4626, Serial#: 6656
    public void psubb(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xF8, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4627, Serial#: 6655
    public void psubb(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xF8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4628, Serial#: 6663
    public void psubb(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xF8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubb  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4629, Serial#: 6658
    public void rip_psubb(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xF8, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubb  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4630, Serial#: 6662
    public void psubb(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xF8, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubb  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4631, Serial#: 6657
    public void m_psubb(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xF8, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubb  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4632, Serial#: 6661
    public void psubb(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xF8, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubb  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4633, Serial#: 6597
    public void psubb(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xF8, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubb  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4634, Serial#: 6596
    public void psubb(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xF8, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubb  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4635, Serial#: 6593
    public void psubb(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xF8, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4636, Serial#: 6592
    public void psubb(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xF8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4637, Serial#: 6600
    public void psubb(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xF8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubb  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4638, Serial#: 6595
    public void rip_psubb(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xF8, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubb  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4639, Serial#: 6599
    public void psubb(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xF8, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubb  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4640, Serial#: 6594
    public void m_psubb(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xF8, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubb  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4641, Serial#: 6598
    public void psubb(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xF8, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4642, Serial#: 6678
    public void psubd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xFA, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4643, Serial#: 6677
    public void psubd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xFA, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4644, Serial#: 6674
    public void psubd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xFA, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4645, Serial#: 6673
    public void psubd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xFA, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4646, Serial#: 6681
    public void psubd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xFA, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4647, Serial#: 6676
    public void rip_psubd(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xFA, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4648, Serial#: 6680
    public void psubd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xFA, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4649, Serial#: 6675
    public void m_psubd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xFA, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4650, Serial#: 6679
    public void psubd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xFA, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4651, Serial#: 6615
    public void psubd(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xFA, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4652, Serial#: 6614
    public void psubd(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xFA, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4653, Serial#: 6611
    public void psubd(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xFA, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4654, Serial#: 6610
    public void psubd(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xFA, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4655, Serial#: 6618
    public void psubd(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xFA, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4656, Serial#: 6613
    public void rip_psubd(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xFA, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4657, Serial#: 6617
    public void psubd(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xFA, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4658, Serial#: 6612
    public void m_psubd(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xFA, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4659, Serial#: 6616
    public void psubd(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xFA, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubq  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4660, Serial#: 6687
    public void psubq(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xFB, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubq  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4661, Serial#: 6686
    public void psubq(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xFB, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubq  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4662, Serial#: 6683
    public void psubq(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xFB, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4663, Serial#: 6682
    public void psubq(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xFB, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4664, Serial#: 6690
    public void psubq(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xFB, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubq  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4665, Serial#: 6685
    public void rip_psubq(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xFB, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubq  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4666, Serial#: 6689
    public void psubq(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xFB, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubq  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4667, Serial#: 6684
    public void m_psubq(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xFB, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubq  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4668, Serial#: 6688
    public void psubq(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xFB, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubq  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4669, Serial#: 6624
    public void psubq(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xFB, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubq  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4670, Serial#: 6623
    public void psubq(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xFB, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubq  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4671, Serial#: 6620
    public void psubq(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xFB, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4672, Serial#: 6619
    public void psubq(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xFB, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4673, Serial#: 6627
    public void psubq(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xFB, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubq  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4674, Serial#: 6622
    public void rip_psubq(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xFB, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubq  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4675, Serial#: 6626
    public void psubq(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xFB, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubq  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4676, Serial#: 6621
    public void m_psubq(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xFB, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubq  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4677, Serial#: 6625
    public void psubq(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xFB, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsb  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4678, Serial#: 6525
    public void psubsb(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xE8, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsb  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4679, Serial#: 6524
    public void psubsb(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xE8, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsb  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4680, Serial#: 6521
    public void psubsb(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xE8, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4681, Serial#: 6520
    public void psubsb(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xE8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4682, Serial#: 6528
    public void psubsb(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xE8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsb  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4683, Serial#: 6523
    public void rip_psubsb(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xE8, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsb  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4684, Serial#: 6527
    public void psubsb(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xE8, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsb  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4685, Serial#: 6522
    public void m_psubsb(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xE8, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsb  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4686, Serial#: 6526
    public void psubsb(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xE8, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsb  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4687, Serial#: 6453
    public void psubsb(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xE8, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsb  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4688, Serial#: 6452
    public void psubsb(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xE8, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsb  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4689, Serial#: 6449
    public void psubsb(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xE8, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4690, Serial#: 6448
    public void psubsb(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xE8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4691, Serial#: 6456
    public void psubsb(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xE8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsb  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4692, Serial#: 6451
    public void rip_psubsb(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xE8, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsb  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4693, Serial#: 6455
    public void psubsb(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xE8, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsb  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4694, Serial#: 6450
    public void m_psubsb(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xE8, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsb  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4695, Serial#: 6454
    public void psubsb(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xE8, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4696, Serial#: 6534
    public void psubsw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xE9, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4697, Serial#: 6533
    public void psubsw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xE9, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4698, Serial#: 6530
    public void psubsw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xE9, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4699, Serial#: 6529
    public void psubsw(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xE9, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4700, Serial#: 6537
    public void psubsw(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xE9, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4701, Serial#: 6532
    public void rip_psubsw(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xE9, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4702, Serial#: 6536
    public void psubsw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xE9, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4703, Serial#: 6531
    public void m_psubsw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xE9, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4704, Serial#: 6535
    public void psubsw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xE9, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4705, Serial#: 6462
    public void psubsw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xE9, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4706, Serial#: 6461
    public void psubsw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xE9, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4707, Serial#: 6458
    public void psubsw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xE9, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4708, Serial#: 6457
    public void psubsw(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xE9, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4709, Serial#: 6465
    public void psubsw(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xE9, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4710, Serial#: 6460
    public void rip_psubsw(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xE9, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4711, Serial#: 6464
    public void psubsw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xE9, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4712, Serial#: 6459
    public void m_psubsw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xE9, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4713, Serial#: 6463
    public void psubsw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xE9, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusb  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4714, Serial#: 6381
    public void psubusb(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xD8, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusb  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4715, Serial#: 6380
    public void psubusb(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xD8, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusb  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4716, Serial#: 6377
    public void psubusb(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xD8, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4717, Serial#: 6376
    public void psubusb(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xD8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4718, Serial#: 6384
    public void psubusb(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xD8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusb  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4719, Serial#: 6379
    public void rip_psubusb(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xD8, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusb  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4720, Serial#: 6383
    public void psubusb(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xD8, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusb  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4721, Serial#: 6378
    public void m_psubusb(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xD8, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusb  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4722, Serial#: 6382
    public void psubusb(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xD8, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusb  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4723, Serial#: 6309
    public void psubusb(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xD8, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusb  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4724, Serial#: 6308
    public void psubusb(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xD8, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusb  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4725, Serial#: 6305
    public void psubusb(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xD8, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4726, Serial#: 6304
    public void psubusb(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xD8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4727, Serial#: 6312
    public void psubusb(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xD8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusb  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4728, Serial#: 6307
    public void rip_psubusb(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xD8, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusb  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4729, Serial#: 6311
    public void psubusb(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xD8, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusb  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4730, Serial#: 6306
    public void m_psubusb(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xD8, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusb  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4731, Serial#: 6310
    public void psubusb(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xD8, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4732, Serial#: 6390
    public void psubusw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xD9, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4733, Serial#: 6389
    public void psubusw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xD9, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4734, Serial#: 6386
    public void psubusw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xD9, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4735, Serial#: 6385
    public void psubusw(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xD9, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4736, Serial#: 6393
    public void psubusw(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xD9, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4737, Serial#: 6388
    public void rip_psubusw(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xD9, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4738, Serial#: 6392
    public void psubusw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xD9, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4739, Serial#: 6387
    public void m_psubusw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xD9, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4740, Serial#: 6391
    public void psubusw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xD9, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4741, Serial#: 6318
    public void psubusw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xD9, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4742, Serial#: 6317
    public void psubusw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xD9, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4743, Serial#: 6314
    public void psubusw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xD9, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4744, Serial#: 6313
    public void psubusw(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xD9, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4745, Serial#: 6321
    public void psubusw(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xD9, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4746, Serial#: 6316
    public void rip_psubusw(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xD9, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4747, Serial#: 6320
    public void psubusw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xD9, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4748, Serial#: 6315
    public void m_psubusw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xD9, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4749, Serial#: 6319
    public void psubusw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xD9, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4750, Serial#: 6669
    public void psubw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xF9, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4751, Serial#: 6668
    public void psubw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xF9, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4752, Serial#: 6665
    public void psubw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xF9, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4753, Serial#: 6664
    public void psubw(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xF9, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4754, Serial#: 6672
    public void psubw(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xF9, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4755, Serial#: 6667
    public void rip_psubw(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xF9, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4756, Serial#: 6671
    public void psubw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xF9, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4757, Serial#: 6666
    public void m_psubw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xF9, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4758, Serial#: 6670
    public void psubw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xF9, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4759, Serial#: 6606
    public void psubw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xF9, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4760, Serial#: 6605
    public void psubw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xF9, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4761, Serial#: 6602
    public void psubw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xF9, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4762, Serial#: 6601
    public void psubw(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xF9, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4763, Serial#: 6609
    public void psubw(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xF9, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4764, Serial#: 6604
    public void rip_psubw(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xF9, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4765, Serial#: 6608
    public void psubw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xF9, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4766, Serial#: 6603
    public void m_psubw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xF9, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4767, Serial#: 6607
    public void psubw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xF9, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhbw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4768, Serial#: 5709
    public void punpckhbw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x68, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhbw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4769, Serial#: 5708
    public void punpckhbw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x68, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhbw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4770, Serial#: 5705
    public void punpckhbw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x68, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhbw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4771, Serial#: 5704
    public void punpckhbw(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x68, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhbw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4772, Serial#: 5712
    public void punpckhbw(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x68, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhbw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4773, Serial#: 5707
    public void rip_punpckhbw(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x68, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhbw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4774, Serial#: 5711
    public void punpckhbw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x68, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhbw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4775, Serial#: 5706
    public void m_punpckhbw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x68, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhbw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4776, Serial#: 5710
    public void punpckhbw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x68, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhbw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4777, Serial#: 5646
    public void punpckhbw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0x68, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhbw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4778, Serial#: 5645
    public void punpckhbw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0x68, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhbw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4779, Serial#: 5642
    public void punpckhbw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0x68, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhbw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4780, Serial#: 5641
    public void punpckhbw(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0x68, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhbw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4781, Serial#: 5649
    public void punpckhbw(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0x68, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhbw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4782, Serial#: 5644
    public void rip_punpckhbw(MMXRegister destination, int rel32) {
        assemble0315((byte) 0x68, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhbw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4783, Serial#: 5648
    public void punpckhbw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0x68, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhbw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4784, Serial#: 5643
    public void m_punpckhbw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0x68, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhbw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4785, Serial#: 5647
    public void punpckhbw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0x68, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhdq  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4786, Serial#: 5727
    public void punpckhdq(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x6A, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhdq  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4787, Serial#: 5726
    public void punpckhdq(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x6A, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhdq  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4788, Serial#: 5723
    public void punpckhdq(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x6A, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhdq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4789, Serial#: 5722
    public void punpckhdq(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x6A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhdq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4790, Serial#: 5730
    public void punpckhdq(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x6A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhdq  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4791, Serial#: 5725
    public void rip_punpckhdq(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x6A, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhdq  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4792, Serial#: 5729
    public void punpckhdq(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x6A, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhdq  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4793, Serial#: 5724
    public void m_punpckhdq(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x6A, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhdq  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4794, Serial#: 5728
    public void punpckhdq(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x6A, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhdq  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4795, Serial#: 5664
    public void punpckhdq(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0x6A, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhdq  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4796, Serial#: 5663
    public void punpckhdq(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0x6A, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhdq  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4797, Serial#: 5660
    public void punpckhdq(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0x6A, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhdq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4798, Serial#: 5659
    public void punpckhdq(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0x6A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhdq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4799, Serial#: 5667
    public void punpckhdq(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0x6A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhdq  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4800, Serial#: 5662
    public void rip_punpckhdq(MMXRegister destination, int rel32) {
        assemble0315((byte) 0x6A, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhdq  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4801, Serial#: 5666
    public void punpckhdq(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0x6A, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhdq  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4802, Serial#: 5661
    public void m_punpckhdq(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0x6A, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhdq  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4803, Serial#: 5665
    public void punpckhdq(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0x6A, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhqdq  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4804, Serial#: 5754
    public void punpckhqdq(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x6D, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhqdq  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4805, Serial#: 5753
    public void punpckhqdq(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x6D, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhqdq  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4806, Serial#: 5750
    public void punpckhqdq(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x6D, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhqdq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4807, Serial#: 5749
    public void punpckhqdq(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x6D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhqdq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4808, Serial#: 5757
    public void punpckhqdq(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x6D, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhqdq  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4809, Serial#: 5752
    public void rip_punpckhqdq(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x6D, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhqdq  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4810, Serial#: 5756
    public void punpckhqdq(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x6D, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhqdq  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4811, Serial#: 5751
    public void m_punpckhqdq(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x6D, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhqdq  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4812, Serial#: 5755
    public void punpckhqdq(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x6D, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhwd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4813, Serial#: 5718
    public void punpckhwd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x69, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhwd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4814, Serial#: 5717
    public void punpckhwd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x69, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhwd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4815, Serial#: 5714
    public void punpckhwd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x69, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhwd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4816, Serial#: 5713
    public void punpckhwd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x69, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhwd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4817, Serial#: 5721
    public void punpckhwd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x69, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhwd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4818, Serial#: 5716
    public void rip_punpckhwd(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x69, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhwd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4819, Serial#: 5720
    public void punpckhwd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x69, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhwd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4820, Serial#: 5715
    public void m_punpckhwd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x69, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhwd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4821, Serial#: 5719
    public void punpckhwd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x69, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhwd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4822, Serial#: 5655
    public void punpckhwd(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0x69, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhwd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4823, Serial#: 5654
    public void punpckhwd(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0x69, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhwd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4824, Serial#: 5651
    public void punpckhwd(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0x69, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhwd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4825, Serial#: 5650
    public void punpckhwd(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0x69, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhwd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4826, Serial#: 5658
    public void punpckhwd(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0x69, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhwd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4827, Serial#: 5653
    public void rip_punpckhwd(MMXRegister destination, int rel32) {
        assemble0315((byte) 0x69, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhwd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4828, Serial#: 5657
    public void punpckhwd(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0x69, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhwd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4829, Serial#: 5652
    public void m_punpckhwd(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0x69, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhwd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4830, Serial#: 5656
    public void punpckhwd(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0x69, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklbw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4831, Serial#: 3883
    public void punpcklbw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x60, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklbw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4832, Serial#: 3882
    public void punpcklbw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x60, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklbw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4833, Serial#: 3879
    public void punpcklbw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x60, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklbw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4834, Serial#: 3878
    public void punpcklbw(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x60, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklbw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4835, Serial#: 3886
    public void punpcklbw(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x60, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklbw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4836, Serial#: 3881
    public void rip_punpcklbw(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x60, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklbw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4837, Serial#: 3885
    public void punpcklbw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x60, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklbw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4838, Serial#: 3880
    public void m_punpcklbw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x60, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklbw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4839, Serial#: 3884
    public void punpcklbw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x60, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklbw  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4840, Serial#: 3811
    public void punpcklbw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0x60, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklbw  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4841, Serial#: 3810
    public void punpcklbw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0x60, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklbw  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4842, Serial#: 3807
    public void punpcklbw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0x60, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklbw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4843, Serial#: 3806
    public void punpcklbw(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0x60, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklbw  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4844, Serial#: 3814
    public void punpcklbw(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0x60, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklbw  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4845, Serial#: 3809
    public void rip_punpcklbw(MMXRegister destination, int rel32) {
        assemble0315((byte) 0x60, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklbw  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4846, Serial#: 3813
    public void punpcklbw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0x60, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklbw  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4847, Serial#: 3808
    public void m_punpcklbw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0x60, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklbw  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4848, Serial#: 3812
    public void punpcklbw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0x60, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckldq  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4849, Serial#: 3901
    public void punpckldq(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x62, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckldq  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4850, Serial#: 3900
    public void punpckldq(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x62, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckldq  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4851, Serial#: 3897
    public void punpckldq(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x62, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckldq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4852, Serial#: 3896
    public void punpckldq(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x62, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckldq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4853, Serial#: 3904
    public void punpckldq(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x62, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckldq  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4854, Serial#: 3899
    public void rip_punpckldq(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x62, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckldq  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4855, Serial#: 3903
    public void punpckldq(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x62, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckldq  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4856, Serial#: 3898
    public void m_punpckldq(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x62, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckldq  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4857, Serial#: 3902
    public void punpckldq(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x62, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckldq  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4858, Serial#: 3829
    public void punpckldq(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0x62, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckldq  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4859, Serial#: 3828
    public void punpckldq(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0x62, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckldq  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4860, Serial#: 3825
    public void punpckldq(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0x62, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckldq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4861, Serial#: 3824
    public void punpckldq(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0x62, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckldq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4862, Serial#: 3832
    public void punpckldq(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0x62, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckldq  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4863, Serial#: 3827
    public void rip_punpckldq(MMXRegister destination, int rel32) {
        assemble0315((byte) 0x62, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckldq  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4864, Serial#: 3831
    public void punpckldq(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0x62, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckldq  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4865, Serial#: 3826
    public void m_punpckldq(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0x62, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckldq  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4866, Serial#: 3830
    public void punpckldq(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0x62, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklqdq  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4867, Serial#: 5745
    public void punpcklqdq(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x6C, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklqdq  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4868, Serial#: 5744
    public void punpcklqdq(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x6C, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklqdq  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4869, Serial#: 5741
    public void punpcklqdq(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x6C, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklqdq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4870, Serial#: 5740
    public void punpcklqdq(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x6C, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklqdq  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4871, Serial#: 5748
    public void punpcklqdq(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x6C, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklqdq  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4872, Serial#: 5743
    public void rip_punpcklqdq(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x6C, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklqdq  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4873, Serial#: 5747
    public void punpcklqdq(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x6C, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklqdq  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4874, Serial#: 5742
    public void m_punpcklqdq(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x6C, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklqdq  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4875, Serial#: 5746
    public void punpcklqdq(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x6C, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklwd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4876, Serial#: 3892
    public void punpcklwd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x61, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklwd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4877, Serial#: 3891
    public void punpcklwd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x61, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklwd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4878, Serial#: 3888
    public void punpcklwd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x61, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklwd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4879, Serial#: 3887
    public void punpcklwd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x61, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklwd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4880, Serial#: 3895
    public void punpcklwd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x61, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklwd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4881, Serial#: 3890
    public void rip_punpcklwd(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x61, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklwd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4882, Serial#: 3894
    public void punpcklwd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x61, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklwd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4883, Serial#: 3889
    public void m_punpcklwd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x61, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklwd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4884, Serial#: 3893
    public void punpcklwd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x61, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklwd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4885, Serial#: 3820
    public void punpcklwd(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0x61, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklwd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4886, Serial#: 3819
    public void punpcklwd(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0x61, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklwd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4887, Serial#: 3816
    public void punpcklwd(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0x61, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklwd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4888, Serial#: 3815
    public void punpcklwd(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0x61, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklwd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4889, Serial#: 3823
    public void punpcklwd(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0x61, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklwd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4890, Serial#: 3818
    public void rip_punpcklwd(MMXRegister destination, int rel32) {
        assemble0315((byte) 0x61, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklwd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4891, Serial#: 3822
    public void punpcklwd(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0x61, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklwd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4892, Serial#: 3817
    public void m_punpcklwd(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0x61, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklwd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4893, Serial#: 3821
    public void punpcklwd(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0x61, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code push  }
     */
    // Template#: 4894, Serial#: 4139
    public void push_FS() {
        assemble0252((byte) 0xA0);
    }

    /**
     * Pseudo-external assembler syntax: {@code push  }
     */
    // Template#: 4895, Serial#: 5978
    public void push_GS() {
        assemble0252((byte) 0xA8);
    }

    /**
     * Pseudo-external assembler syntax: {@code push  }<i>imm8</i>
     */
    // Template#: 4896, Serial#: 2304
    public void push(byte imm8) {
        assemble0001((byte) 0x6A, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code push  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4897, Serial#: 3063
    public void push(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xFF, (byte) 0x06, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code push  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 4898, Serial#: 3062
    public void push(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xFF, (byte) 0x06, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code push  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4899, Serial#: 3055
    public void push(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xFF, (byte) 0x06, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code push  }<i>register</i>
     */
    // Template#: 4900, Serial#: 290
    public void push(AMD64GeneralRegister16 register) {
        assemble0658((byte) 0x50, register);
    }

    /**
     * Pseudo-external assembler syntax: {@code push  }<i>register</i>
     */
    // Template#: 4901, Serial#: 289
    public void push(AMD64GeneralRegister64 register) {
        assemble0659((byte) 0x50, register);
    }

    /**
     * Pseudo-external assembler syntax: {@code push  }<i>destination</i>
     */
    // Template#: 4902, Serial#: 3054
    public void push(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xFF, (byte) 0x06, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code push  }<i>imm32</i>
     */
    // Template#: 4903, Serial#: 2275
    public void push(int imm32) {
        assemble0085((byte) 0x68, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code push  }<i>rel32</i>
     */
    // Template#: 4904, Serial#: 3057
    public void rip_push(int rel32) {
        assemble0239((byte) 0xFF, (byte) 0x06, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code push  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4905, Serial#: 3069
    public void push(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xFF, (byte) 0x06, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code push  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4906, Serial#: 3056
    public void m_push(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xFF, (byte) 0x06, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code push  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 4907, Serial#: 3068
    public void push(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xFF, (byte) 0x06, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code push  }<i>imm16</i>
     */
    // Template#: 4908, Serial#: 2276
    public void push(short imm16) {
        assemble0127((byte) 0x68, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code pushfq  }
     */
    // Template#: 4909, Serial#: 2469
    public void pushfq() {
        assemble0146((byte) 0x9C);
    }

    /**
     * Pseudo-external assembler syntax: {@code pushfw  }
     */
    // Template#: 4910, Serial#: 2470
    public void pushfw() {
        assemble0271((byte) 0x9C);
    }

    /**
     * Pseudo-external assembler syntax: {@code pxor  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4911, Serial#: 6588
    public void pxor(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0xEF, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pxor  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4912, Serial#: 6587
    public void pxor(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0xEF, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pxor  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4913, Serial#: 6584
    public void pxor(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0xEF, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pxor  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4914, Serial#: 6583
    public void pxor(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0xEF, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pxor  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4915, Serial#: 6591
    public void pxor(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0xEF, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pxor  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4916, Serial#: 6586
    public void rip_pxor(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0xEF, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pxor  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4917, Serial#: 6590
    public void pxor(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0xEF, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pxor  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4918, Serial#: 6585
    public void m_pxor(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0xEF, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pxor  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4919, Serial#: 6589
    public void pxor(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0xEF, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pxor  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4920, Serial#: 6516
    public void pxor(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0310((byte) 0xEF, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pxor  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 4921, Serial#: 6515
    public void pxor(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0311((byte) 0xEF, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pxor  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4922, Serial#: 6512
    public void pxor(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0312((byte) 0xEF, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pxor  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4923, Serial#: 6511
    public void pxor(MMXRegister destination, AMD64IndirectRegister64 source) {
        assemble0313((byte) 0xEF, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pxor  }<i>destination</i>, <i>source</i>
     */
    // Template#: 4924, Serial#: 6519
    public void pxor(MMXRegister destination, MMXRegister source) {
        assemble0468((byte) 0xEF, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code pxor  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 4925, Serial#: 6514
    public void rip_pxor(MMXRegister destination, int rel32) {
        assemble0315((byte) 0xEF, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code pxor  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4926, Serial#: 6518
    public void pxor(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0316((byte) 0xEF, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pxor  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4927, Serial#: 6513
    public void m_pxor(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0317((byte) 0xEF, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code pxor  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 4928, Serial#: 6517
    public void pxor(MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0318((byte) 0xEF, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4929, Serial#: 1241
    public void rclb___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD0, (byte) 0x02, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcll  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4930, Serial#: 1304
    public void rcll___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD1, (byte) 0x02, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4931, Serial#: 1367
    public void rclq___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0375((byte) 0xD1, (byte) 0x02, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4932, Serial#: 1430
    public void rclw___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0376((byte) 0xD1, (byte) 0x02, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4933, Serial#: 1493
    public void rclb___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD2, (byte) 0x02, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcll  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4934, Serial#: 1556
    public void rcll___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD3, (byte) 0x02, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4935, Serial#: 1619
    public void rclq___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0375((byte) 0xD3, (byte) 0x02, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4936, Serial#: 1682
    public void rclw___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0376((byte) 0xD3, (byte) 0x02, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 4937, Serial#: 951
    public void rclb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0002((byte) 0xC0, (byte) 0x02, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcll  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 4938, Serial#: 1014
    public void rcll(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0002((byte) 0xC1, (byte) 0x02, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 4939, Serial#: 1077
    public void rclq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0003((byte) 0xC1, (byte) 0x02, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 4940, Serial#: 1140
    public void rclw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0004((byte) 0xC1, (byte) 0x02, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclb  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 4941, Serial#: 1240
    public void rclb___1(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD0, (byte) 0x02, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcll  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 4942, Serial#: 1303
    public void rcll___1(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD1, (byte) 0x02, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclq  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 4943, Serial#: 1366
    public void rclq___1(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0377((byte) 0xD1, (byte) 0x02, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclw  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 4944, Serial#: 1429
    public void rclw___1(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0378((byte) 0xD1, (byte) 0x02, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclb  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 4945, Serial#: 1492
    public void rclb___CL(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD2, (byte) 0x02, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcll  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 4946, Serial#: 1555
    public void rcll___CL(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD3, (byte) 0x02, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclq  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 4947, Serial#: 1618
    public void rclq___CL(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0377((byte) 0xD3, (byte) 0x02, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclw  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 4948, Serial#: 1681
    public void rclw___CL(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0378((byte) 0xD3, (byte) 0x02, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclb  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 4949, Serial#: 950
    public void rclb(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0012((byte) 0xC0, (byte) 0x02, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcll  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 4950, Serial#: 1013
    public void rcll(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0012((byte) 0xC1, (byte) 0x02, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclq  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 4951, Serial#: 1076
    public void rclq(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0013((byte) 0xC1, (byte) 0x02, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclw  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 4952, Serial#: 1139
    public void rclw(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0014((byte) 0xC1, (byte) 0x02, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclb  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4953, Serial#: 1217
    public void rclb___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD0, (byte) 0x02, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcll  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4954, Serial#: 1280
    public void rcll___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD1, (byte) 0x02, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclq  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4955, Serial#: 1343
    public void rclq___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0379((byte) 0xD1, (byte) 0x02, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclw  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4956, Serial#: 1406
    public void rclw___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0380((byte) 0xD1, (byte) 0x02, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclb  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4957, Serial#: 1469
    public void rclb___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD2, (byte) 0x02, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcll  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4958, Serial#: 1532
    public void rcll___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD3, (byte) 0x02, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclq  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4959, Serial#: 1595
    public void rclq___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0379((byte) 0xD3, (byte) 0x02, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclw  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 4960, Serial#: 1658
    public void rclw___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0380((byte) 0xD3, (byte) 0x02, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclb  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 4961, Serial#: 927
    public void rclb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0022((byte) 0xC0, (byte) 0x02, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcll  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 4962, Serial#: 990
    public void rcll(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0022((byte) 0xC1, (byte) 0x02, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclq  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 4963, Serial#: 1053
    public void rclq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0023((byte) 0xC1, (byte) 0x02, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclw  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 4964, Serial#: 1116
    public void rclw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0024((byte) 0xC1, (byte) 0x02, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclw  }<i>destination</i>
     */
    // Template#: 4965, Serial#: 1455
    public void rclw___1(AMD64GeneralRegister16 destination) {
        assemble0235((byte) 0xD1, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclw  }<i>destination</i>
     */
    // Template#: 4966, Serial#: 1707
    public void rclw___CL(AMD64GeneralRegister16 destination) {
        assemble0235((byte) 0xD3, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 4967, Serial#: 1165
    public void rclw(AMD64GeneralRegister16 destination, byte imm8) {
        assemble0032((byte) 0xC1, (byte) 0x02, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcll  }<i>destination</i>
     */
    // Template#: 4968, Serial#: 1329
    public void rcll___1(AMD64GeneralRegister32 destination) {
        assemble0381((byte) 0xD1, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcll  }<i>destination</i>
     */
    // Template#: 4969, Serial#: 1581
    public void rcll___CL(AMD64GeneralRegister32 destination) {
        assemble0381((byte) 0xD3, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcll  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 4970, Serial#: 1039
    public void rcll(AMD64GeneralRegister32 destination, byte imm8) {
        assemble0043((byte) 0xC1, (byte) 0x02, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclq  }<i>destination</i>
     */
    // Template#: 4971, Serial#: 1392
    public void rclq___1(AMD64GeneralRegister64 destination) {
        assemble0382((byte) 0xD1, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclq  }<i>destination</i>
     */
    // Template#: 4972, Serial#: 1644
    public void rclq___CL(AMD64GeneralRegister64 destination) {
        assemble0382((byte) 0xD3, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 4973, Serial#: 1102
    public void rclq(AMD64GeneralRegister64 destination, byte imm8) {
        assemble0054((byte) 0xC1, (byte) 0x02, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclb  }<i>destination</i>
     */
    // Template#: 4974, Serial#: 1266
    public void rclb___1(AMD64GeneralRegister8 destination) {
        assemble0383((byte) 0xD0, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclb  }<i>destination</i>
     */
    // Template#: 4975, Serial#: 1518
    public void rclb___CL(AMD64GeneralRegister8 destination) {
        assemble0383((byte) 0xD2, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclb  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 4976, Serial#: 976
    public void rclb(AMD64GeneralRegister8 destination, byte imm8) {
        assemble0065((byte) 0xC0, (byte) 0x02, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclb  }<i>destination</i>
     */
    // Template#: 4977, Serial#: 1216
    public void rclb___1(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD0, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcll  }<i>destination</i>
     */
    // Template#: 4978, Serial#: 1279
    public void rcll___1(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD1, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclq  }<i>destination</i>
     */
    // Template#: 4979, Serial#: 1342
    public void rclq___1(AMD64IndirectRegister64 destination) {
        assemble0384((byte) 0xD1, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclw  }<i>destination</i>
     */
    // Template#: 4980, Serial#: 1405
    public void rclw___1(AMD64IndirectRegister64 destination) {
        assemble0385((byte) 0xD1, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclb  }<i>destination</i>
     */
    // Template#: 4981, Serial#: 1468
    public void rclb___CL(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD2, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcll  }<i>destination</i>
     */
    // Template#: 4982, Serial#: 1531
    public void rcll___CL(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD3, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclq  }<i>destination</i>
     */
    // Template#: 4983, Serial#: 1594
    public void rclq___CL(AMD64IndirectRegister64 destination) {
        assemble0384((byte) 0xD3, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclw  }<i>destination</i>
     */
    // Template#: 4984, Serial#: 1657
    public void rclw___CL(AMD64IndirectRegister64 destination) {
        assemble0385((byte) 0xD3, (byte) 0x02, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclb  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 4985, Serial#: 926
    public void rclb(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0075((byte) 0xC0, (byte) 0x02, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcll  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 4986, Serial#: 989
    public void rcll(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0075((byte) 0xC1, (byte) 0x02, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 4987, Serial#: 1052
    public void rclq(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0076((byte) 0xC1, (byte) 0x02, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 4988, Serial#: 1115
    public void rclw(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0077((byte) 0xC1, (byte) 0x02, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclb  }<i>rel32</i>
     */
    // Template#: 4989, Serial#: 1219
    public void rip_rclb___1(int rel32) {
        assemble0239((byte) 0xD0, (byte) 0x02, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcll  }<i>rel32</i>
     */
    // Template#: 4990, Serial#: 1282
    public void rip_rcll___1(int rel32) {
        assemble0239((byte) 0xD1, (byte) 0x02, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclq  }<i>rel32</i>
     */
    // Template#: 4991, Serial#: 1345
    public void rip_rclq___1(int rel32) {
        assemble0386((byte) 0xD1, (byte) 0x02, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclw  }<i>rel32</i>
     */
    // Template#: 4992, Serial#: 1408
    public void rip_rclw___1(int rel32) {
        assemble0387((byte) 0xD1, (byte) 0x02, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclb  }<i>rel32</i>
     */
    // Template#: 4993, Serial#: 1471
    public void rip_rclb___CL(int rel32) {
        assemble0239((byte) 0xD2, (byte) 0x02, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcll  }<i>rel32</i>
     */
    // Template#: 4994, Serial#: 1534
    public void rip_rcll___CL(int rel32) {
        assemble0239((byte) 0xD3, (byte) 0x02, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclq  }<i>rel32</i>
     */
    // Template#: 4995, Serial#: 1597
    public void rip_rclq___CL(int rel32) {
        assemble0386((byte) 0xD3, (byte) 0x02, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclw  }<i>rel32</i>
     */
    // Template#: 4996, Serial#: 1660
    public void rip_rclw___CL(int rel32) {
        assemble0387((byte) 0xD3, (byte) 0x02, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclb  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 4997, Serial#: 929
    public void rip_rclb(int rel32, byte imm8) {
        assemble0087((byte) 0xC0, (byte) 0x02, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcll  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 4998, Serial#: 992
    public void rip_rcll(int rel32, byte imm8) {
        assemble0087((byte) 0xC1, (byte) 0x02, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclq  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 4999, Serial#: 1055
    public void rip_rclq(int rel32, byte imm8) {
        assemble0088((byte) 0xC1, (byte) 0x02, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclw  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 5000, Serial#: 1118
    public void rip_rclw(int rel32, byte imm8) {
        assemble0089((byte) 0xC1, (byte) 0x02, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5001, Serial#: 1255
    public void rclb___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD0, (byte) 0x02, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcll  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5002, Serial#: 1318
    public void rcll___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD1, (byte) 0x02, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5003, Serial#: 1381
    public void rclq___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0388((byte) 0xD1, (byte) 0x02, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5004, Serial#: 1444
    public void rclw___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0389((byte) 0xD1, (byte) 0x02, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5005, Serial#: 1507
    public void rclb___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD2, (byte) 0x02, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcll  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5006, Serial#: 1570
    public void rcll___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD3, (byte) 0x02, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5007, Serial#: 1633
    public void rclq___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0388((byte) 0xD3, (byte) 0x02, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5008, Serial#: 1696
    public void rclw___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0389((byte) 0xD3, (byte) 0x02, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5009, Serial#: 965
    public void rclb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0090((byte) 0xC0, (byte) 0x02, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcll  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5010, Serial#: 1028
    public void rcll(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0090((byte) 0xC1, (byte) 0x02, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5011, Serial#: 1091
    public void rclq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0091((byte) 0xC1, (byte) 0x02, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5012, Serial#: 1154
    public void rclw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0092((byte) 0xC1, (byte) 0x02, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclb  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5013, Serial#: 1218
    public void m_rclb___1(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD0, (byte) 0x02, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcll  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5014, Serial#: 1281
    public void m_rcll___1(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD1, (byte) 0x02, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclq  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5015, Serial#: 1344
    public void m_rclq___1(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0390((byte) 0xD1, (byte) 0x02, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclw  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5016, Serial#: 1407
    public void m_rclw___1(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0391((byte) 0xD1, (byte) 0x02, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclb  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5017, Serial#: 1470
    public void m_rclb___CL(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD2, (byte) 0x02, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcll  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5018, Serial#: 1533
    public void m_rcll___CL(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD3, (byte) 0x02, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclq  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5019, Serial#: 1596
    public void m_rclq___CL(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0390((byte) 0xD3, (byte) 0x02, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclw  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5020, Serial#: 1659
    public void m_rclw___CL(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0391((byte) 0xD3, (byte) 0x02, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclb  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5021, Serial#: 928
    public void m_rclb(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0104((byte) 0xC0, (byte) 0x02, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcll  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5022, Serial#: 991
    public void m_rcll(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0104((byte) 0xC1, (byte) 0x02, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclq  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5023, Serial#: 1054
    public void m_rclq(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0105((byte) 0xC1, (byte) 0x02, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclw  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5024, Serial#: 1117
    public void m_rclw(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0106((byte) 0xC1, (byte) 0x02, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclb  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5025, Serial#: 1254
    public void rclb___1(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD0, (byte) 0x02, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcll  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5026, Serial#: 1317
    public void rcll___1(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD1, (byte) 0x02, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclq  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5027, Serial#: 1380
    public void rclq___1(int disp32, AMD64IndirectRegister64 destination) {
        assemble0392((byte) 0xD1, (byte) 0x02, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclw  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5028, Serial#: 1443
    public void rclw___1(int disp32, AMD64IndirectRegister64 destination) {
        assemble0393((byte) 0xD1, (byte) 0x02, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclb  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5029, Serial#: 1506
    public void rclb___CL(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD2, (byte) 0x02, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcll  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5030, Serial#: 1569
    public void rcll___CL(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD3, (byte) 0x02, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclq  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5031, Serial#: 1632
    public void rclq___CL(int disp32, AMD64IndirectRegister64 destination) {
        assemble0392((byte) 0xD3, (byte) 0x02, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclw  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5032, Serial#: 1695
    public void rclw___CL(int disp32, AMD64IndirectRegister64 destination) {
        assemble0393((byte) 0xD3, (byte) 0x02, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclb  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5033, Serial#: 964
    public void rclb(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0114((byte) 0xC0, (byte) 0x02, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcll  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5034, Serial#: 1027
    public void rcll(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0114((byte) 0xC1, (byte) 0x02, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclq  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5035, Serial#: 1090
    public void rclq(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0115((byte) 0xC1, (byte) 0x02, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclw  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5036, Serial#: 1153
    public void rclw(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0116((byte) 0xC1, (byte) 0x02, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcpps  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5037, Serial#: 3684
    public void rcpps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0137((byte) 0x53, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcpps  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 5038, Serial#: 3683
    public void rcpps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0138((byte) 0x53, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcpps  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5039, Serial#: 3680
    public void rcpps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0139((byte) 0x53, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcpps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 5040, Serial#: 3679
    public void rcpps(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0140((byte) 0x53, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcpps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 5041, Serial#: 3687
    public void rcpps(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0141((byte) 0x53, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcpps  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 5042, Serial#: 3682
    public void rip_rcpps(AMD64XMMRegister destination, int rel32) {
        assemble0142((byte) 0x53, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcpps  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5043, Serial#: 3686
    public void rcpps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0143((byte) 0x53, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcpps  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5044, Serial#: 3681
    public void m_rcpps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0144((byte) 0x53, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcpps  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 5045, Serial#: 3685
    public void rcpps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0145((byte) 0x53, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcpss  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5046, Serial#: 3802
    public void rcpss(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0156((byte) 0x53, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcpss  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 5047, Serial#: 3801
    public void rcpss(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0157((byte) 0x53, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcpss  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5048, Serial#: 3798
    public void rcpss(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0158((byte) 0x53, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcpss  }<i>destination</i>, <i>source</i>
     */
    // Template#: 5049, Serial#: 3797
    public void rcpss(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0159((byte) 0x53, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcpss  }<i>destination</i>, <i>source</i>
     */
    // Template#: 5050, Serial#: 3805
    public void rcpss(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0160((byte) 0x53, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcpss  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 5051, Serial#: 3800
    public void rip_rcpss(AMD64XMMRegister destination, int rel32) {
        assemble0161((byte) 0x53, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcpss  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5052, Serial#: 3804
    public void rcpss(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0162((byte) 0x53, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcpss  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5053, Serial#: 3799
    public void m_rcpss(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0163((byte) 0x53, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcpss  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 5054, Serial#: 3803
    public void rcpss(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0164((byte) 0x53, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5055, Serial#: 1243
    public void rcrb___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD0, (byte) 0x03, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5056, Serial#: 1306
    public void rcrl___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD1, (byte) 0x03, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5057, Serial#: 1369
    public void rcrq___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0375((byte) 0xD1, (byte) 0x03, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5058, Serial#: 1432
    public void rcrw___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0376((byte) 0xD1, (byte) 0x03, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5059, Serial#: 1495
    public void rcrb___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD2, (byte) 0x03, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5060, Serial#: 1558
    public void rcrl___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD3, (byte) 0x03, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5061, Serial#: 1621
    public void rcrq___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0375((byte) 0xD3, (byte) 0x03, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5062, Serial#: 1684
    public void rcrw___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0376((byte) 0xD3, (byte) 0x03, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5063, Serial#: 953
    public void rcrb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0002((byte) 0xC0, (byte) 0x03, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5064, Serial#: 1016
    public void rcrl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0002((byte) 0xC1, (byte) 0x03, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5065, Serial#: 1079
    public void rcrq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0003((byte) 0xC1, (byte) 0x03, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5066, Serial#: 1142
    public void rcrw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0004((byte) 0xC1, (byte) 0x03, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrb  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5067, Serial#: 1242
    public void rcrb___1(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD0, (byte) 0x03, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrl  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5068, Serial#: 1305
    public void rcrl___1(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD1, (byte) 0x03, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrq  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5069, Serial#: 1368
    public void rcrq___1(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0377((byte) 0xD1, (byte) 0x03, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrw  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5070, Serial#: 1431
    public void rcrw___1(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0378((byte) 0xD1, (byte) 0x03, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrb  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5071, Serial#: 1494
    public void rcrb___CL(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD2, (byte) 0x03, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrl  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5072, Serial#: 1557
    public void rcrl___CL(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD3, (byte) 0x03, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrq  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5073, Serial#: 1620
    public void rcrq___CL(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0377((byte) 0xD3, (byte) 0x03, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrw  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5074, Serial#: 1683
    public void rcrw___CL(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0378((byte) 0xD3, (byte) 0x03, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrb  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5075, Serial#: 952
    public void rcrb(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0012((byte) 0xC0, (byte) 0x03, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrl  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5076, Serial#: 1015
    public void rcrl(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0012((byte) 0xC1, (byte) 0x03, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrq  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5077, Serial#: 1078
    public void rcrq(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0013((byte) 0xC1, (byte) 0x03, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrw  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5078, Serial#: 1141
    public void rcrw(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0014((byte) 0xC1, (byte) 0x03, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrb  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5079, Serial#: 1221
    public void rcrb___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD0, (byte) 0x03, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrl  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5080, Serial#: 1284
    public void rcrl___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD1, (byte) 0x03, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrq  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5081, Serial#: 1347
    public void rcrq___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0379((byte) 0xD1, (byte) 0x03, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrw  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5082, Serial#: 1410
    public void rcrw___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0380((byte) 0xD1, (byte) 0x03, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrb  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5083, Serial#: 1473
    public void rcrb___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD2, (byte) 0x03, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrl  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5084, Serial#: 1536
    public void rcrl___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD3, (byte) 0x03, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrq  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5085, Serial#: 1599
    public void rcrq___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0379((byte) 0xD3, (byte) 0x03, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrw  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5086, Serial#: 1662
    public void rcrw___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0380((byte) 0xD3, (byte) 0x03, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrb  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5087, Serial#: 931
    public void rcrb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0022((byte) 0xC0, (byte) 0x03, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrl  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5088, Serial#: 994
    public void rcrl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0022((byte) 0xC1, (byte) 0x03, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrq  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5089, Serial#: 1057
    public void rcrq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0023((byte) 0xC1, (byte) 0x03, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrw  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5090, Serial#: 1120
    public void rcrw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0024((byte) 0xC1, (byte) 0x03, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrw  }<i>destination</i>
     */
    // Template#: 5091, Serial#: 1456
    public void rcrw___1(AMD64GeneralRegister16 destination) {
        assemble0235((byte) 0xD1, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrw  }<i>destination</i>
     */
    // Template#: 5092, Serial#: 1708
    public void rcrw___CL(AMD64GeneralRegister16 destination) {
        assemble0235((byte) 0xD3, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5093, Serial#: 1166
    public void rcrw(AMD64GeneralRegister16 destination, byte imm8) {
        assemble0032((byte) 0xC1, (byte) 0x03, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrl  }<i>destination</i>
     */
    // Template#: 5094, Serial#: 1330
    public void rcrl___1(AMD64GeneralRegister32 destination) {
        assemble0381((byte) 0xD1, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrl  }<i>destination</i>
     */
    // Template#: 5095, Serial#: 1582
    public void rcrl___CL(AMD64GeneralRegister32 destination) {
        assemble0381((byte) 0xD3, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrl  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5096, Serial#: 1040
    public void rcrl(AMD64GeneralRegister32 destination, byte imm8) {
        assemble0043((byte) 0xC1, (byte) 0x03, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrq  }<i>destination</i>
     */
    // Template#: 5097, Serial#: 1393
    public void rcrq___1(AMD64GeneralRegister64 destination) {
        assemble0382((byte) 0xD1, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrq  }<i>destination</i>
     */
    // Template#: 5098, Serial#: 1645
    public void rcrq___CL(AMD64GeneralRegister64 destination) {
        assemble0382((byte) 0xD3, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5099, Serial#: 1103
    public void rcrq(AMD64GeneralRegister64 destination, byte imm8) {
        assemble0054((byte) 0xC1, (byte) 0x03, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrb  }<i>destination</i>
     */
    // Template#: 5100, Serial#: 1267
    public void rcrb___1(AMD64GeneralRegister8 destination) {
        assemble0383((byte) 0xD0, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrb  }<i>destination</i>
     */
    // Template#: 5101, Serial#: 1519
    public void rcrb___CL(AMD64GeneralRegister8 destination) {
        assemble0383((byte) 0xD2, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrb  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5102, Serial#: 977
    public void rcrb(AMD64GeneralRegister8 destination, byte imm8) {
        assemble0065((byte) 0xC0, (byte) 0x03, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrb  }<i>destination</i>
     */
    // Template#: 5103, Serial#: 1220
    public void rcrb___1(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD0, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrl  }<i>destination</i>
     */
    // Template#: 5104, Serial#: 1283
    public void rcrl___1(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD1, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrq  }<i>destination</i>
     */
    // Template#: 5105, Serial#: 1346
    public void rcrq___1(AMD64IndirectRegister64 destination) {
        assemble0384((byte) 0xD1, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrw  }<i>destination</i>
     */
    // Template#: 5106, Serial#: 1409
    public void rcrw___1(AMD64IndirectRegister64 destination) {
        assemble0385((byte) 0xD1, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrb  }<i>destination</i>
     */
    // Template#: 5107, Serial#: 1472
    public void rcrb___CL(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD2, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrl  }<i>destination</i>
     */
    // Template#: 5108, Serial#: 1535
    public void rcrl___CL(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD3, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrq  }<i>destination</i>
     */
    // Template#: 5109, Serial#: 1598
    public void rcrq___CL(AMD64IndirectRegister64 destination) {
        assemble0384((byte) 0xD3, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrw  }<i>destination</i>
     */
    // Template#: 5110, Serial#: 1661
    public void rcrw___CL(AMD64IndirectRegister64 destination) {
        assemble0385((byte) 0xD3, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrb  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5111, Serial#: 930
    public void rcrb(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0075((byte) 0xC0, (byte) 0x03, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrl  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5112, Serial#: 993
    public void rcrl(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0075((byte) 0xC1, (byte) 0x03, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5113, Serial#: 1056
    public void rcrq(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0076((byte) 0xC1, (byte) 0x03, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5114, Serial#: 1119
    public void rcrw(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0077((byte) 0xC1, (byte) 0x03, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrb  }<i>rel32</i>
     */
    // Template#: 5115, Serial#: 1223
    public void rip_rcrb___1(int rel32) {
        assemble0239((byte) 0xD0, (byte) 0x03, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrl  }<i>rel32</i>
     */
    // Template#: 5116, Serial#: 1286
    public void rip_rcrl___1(int rel32) {
        assemble0239((byte) 0xD1, (byte) 0x03, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrq  }<i>rel32</i>
     */
    // Template#: 5117, Serial#: 1349
    public void rip_rcrq___1(int rel32) {
        assemble0386((byte) 0xD1, (byte) 0x03, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrw  }<i>rel32</i>
     */
    // Template#: 5118, Serial#: 1412
    public void rip_rcrw___1(int rel32) {
        assemble0387((byte) 0xD1, (byte) 0x03, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrb  }<i>rel32</i>
     */
    // Template#: 5119, Serial#: 1475
    public void rip_rcrb___CL(int rel32) {
        assemble0239((byte) 0xD2, (byte) 0x03, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrl  }<i>rel32</i>
     */
    // Template#: 5120, Serial#: 1538
    public void rip_rcrl___CL(int rel32) {
        assemble0239((byte) 0xD3, (byte) 0x03, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrq  }<i>rel32</i>
     */
    // Template#: 5121, Serial#: 1601
    public void rip_rcrq___CL(int rel32) {
        assemble0386((byte) 0xD3, (byte) 0x03, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrw  }<i>rel32</i>
     */
    // Template#: 5122, Serial#: 1664
    public void rip_rcrw___CL(int rel32) {
        assemble0387((byte) 0xD3, (byte) 0x03, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrb  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 5123, Serial#: 933
    public void rip_rcrb(int rel32, byte imm8) {
        assemble0087((byte) 0xC0, (byte) 0x03, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrl  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 5124, Serial#: 996
    public void rip_rcrl(int rel32, byte imm8) {
        assemble0087((byte) 0xC1, (byte) 0x03, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrq  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 5125, Serial#: 1059
    public void rip_rcrq(int rel32, byte imm8) {
        assemble0088((byte) 0xC1, (byte) 0x03, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrw  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 5126, Serial#: 1122
    public void rip_rcrw(int rel32, byte imm8) {
        assemble0089((byte) 0xC1, (byte) 0x03, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5127, Serial#: 1257
    public void rcrb___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD0, (byte) 0x03, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5128, Serial#: 1320
    public void rcrl___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD1, (byte) 0x03, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5129, Serial#: 1383
    public void rcrq___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0388((byte) 0xD1, (byte) 0x03, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5130, Serial#: 1446
    public void rcrw___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0389((byte) 0xD1, (byte) 0x03, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5131, Serial#: 1509
    public void rcrb___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD2, (byte) 0x03, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5132, Serial#: 1572
    public void rcrl___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD3, (byte) 0x03, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5133, Serial#: 1635
    public void rcrq___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0388((byte) 0xD3, (byte) 0x03, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5134, Serial#: 1698
    public void rcrw___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0389((byte) 0xD3, (byte) 0x03, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5135, Serial#: 967
    public void rcrb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0090((byte) 0xC0, (byte) 0x03, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5136, Serial#: 1030
    public void rcrl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0090((byte) 0xC1, (byte) 0x03, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5137, Serial#: 1093
    public void rcrq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0091((byte) 0xC1, (byte) 0x03, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5138, Serial#: 1156
    public void rcrw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0092((byte) 0xC1, (byte) 0x03, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrb  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5139, Serial#: 1222
    public void m_rcrb___1(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD0, (byte) 0x03, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrl  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5140, Serial#: 1285
    public void m_rcrl___1(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD1, (byte) 0x03, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrq  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5141, Serial#: 1348
    public void m_rcrq___1(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0390((byte) 0xD1, (byte) 0x03, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrw  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5142, Serial#: 1411
    public void m_rcrw___1(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0391((byte) 0xD1, (byte) 0x03, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrb  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5143, Serial#: 1474
    public void m_rcrb___CL(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD2, (byte) 0x03, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrl  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5144, Serial#: 1537
    public void m_rcrl___CL(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD3, (byte) 0x03, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrq  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5145, Serial#: 1600
    public void m_rcrq___CL(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0390((byte) 0xD3, (byte) 0x03, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrw  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5146, Serial#: 1663
    public void m_rcrw___CL(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0391((byte) 0xD3, (byte) 0x03, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrb  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5147, Serial#: 932
    public void m_rcrb(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0104((byte) 0xC0, (byte) 0x03, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrl  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5148, Serial#: 995
    public void m_rcrl(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0104((byte) 0xC1, (byte) 0x03, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrq  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5149, Serial#: 1058
    public void m_rcrq(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0105((byte) 0xC1, (byte) 0x03, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrw  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5150, Serial#: 1121
    public void m_rcrw(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0106((byte) 0xC1, (byte) 0x03, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrb  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5151, Serial#: 1256
    public void rcrb___1(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD0, (byte) 0x03, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrl  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5152, Serial#: 1319
    public void rcrl___1(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD1, (byte) 0x03, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrq  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5153, Serial#: 1382
    public void rcrq___1(int disp32, AMD64IndirectRegister64 destination) {
        assemble0392((byte) 0xD1, (byte) 0x03, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrw  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5154, Serial#: 1445
    public void rcrw___1(int disp32, AMD64IndirectRegister64 destination) {
        assemble0393((byte) 0xD1, (byte) 0x03, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrb  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5155, Serial#: 1508
    public void rcrb___CL(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD2, (byte) 0x03, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrl  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5156, Serial#: 1571
    public void rcrl___CL(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD3, (byte) 0x03, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrq  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5157, Serial#: 1634
    public void rcrq___CL(int disp32, AMD64IndirectRegister64 destination) {
        assemble0392((byte) 0xD3, (byte) 0x03, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrw  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5158, Serial#: 1697
    public void rcrw___CL(int disp32, AMD64IndirectRegister64 destination) {
        assemble0393((byte) 0xD3, (byte) 0x03, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrb  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5159, Serial#: 966
    public void rcrb(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0114((byte) 0xC0, (byte) 0x03, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrl  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5160, Serial#: 1029
    public void rcrl(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0114((byte) 0xC1, (byte) 0x03, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrq  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5161, Serial#: 1092
    public void rcrq(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0115((byte) 0xC1, (byte) 0x03, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrw  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5162, Serial#: 1155
    public void rcrw(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0116((byte) 0xC1, (byte) 0x03, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rdmsr  }
     */
    // Template#: 5163, Serial#: 3442
    public void rdmsr() {
        assemble0252((byte) 0x32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rdpmc  }
     */
    // Template#: 5164, Serial#: 3443
    public void rdpmc() {
        assemble0252((byte) 0x33);
    }

    /**
     * Pseudo-external assembler syntax: {@code rdtsc  }
     */
    // Template#: 5165, Serial#: 3441
    public void rdtsc() {
        assemble0252((byte) 0x31);
    }

    /**
     * Pseudo-external assembler syntax: {@code repe  }
     */
    // Template#: 5166, Serial#: 1728
    public void repe() {
        assemble0146((byte) 0xF3);
    }

    /**
     * Pseudo-external assembler syntax: {@code repne  }
     */
    // Template#: 5167, Serial#: 1727
    public void repne() {
        assemble0146((byte) 0xF2);
    }

    /**
     * Pseudo-external assembler syntax: {@code ret  }
     */
    // Template#: 5168, Serial#: 1171
    public void ret() {
        assemble0146((byte) 0xC3);
    }

    /**
     * Pseudo-external assembler syntax: {@code ret  }<i>imm16</i>
     */
    // Template#: 5169, Serial#: 1170
    public void ret(short imm16) {
        assemble0687((byte) 0xC2, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code retf  }
     */
    // Template#: 5170, Serial#: 2497
    public void retf() {
        assemble0146((byte) 0xCB);
    }

    /**
     * Pseudo-external assembler syntax: {@code retf  }<i>imm16</i>
     */
    // Template#: 5171, Serial#: 2496
    public void retf(short imm16) {
        assemble0687((byte) 0xCA, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5172, Serial#: 1237
    public void rolb___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD0, (byte) 0x00, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code roll  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5173, Serial#: 1300
    public void roll___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD1, (byte) 0x00, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5174, Serial#: 1363
    public void rolq___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0375((byte) 0xD1, (byte) 0x00, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5175, Serial#: 1426
    public void rolw___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0376((byte) 0xD1, (byte) 0x00, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5176, Serial#: 1489
    public void rolb___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD2, (byte) 0x00, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code roll  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5177, Serial#: 1552
    public void roll___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD3, (byte) 0x00, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5178, Serial#: 1615
    public void rolq___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0375((byte) 0xD3, (byte) 0x00, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5179, Serial#: 1678
    public void rolw___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0376((byte) 0xD3, (byte) 0x00, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5180, Serial#: 947
    public void rolb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0002((byte) 0xC0, (byte) 0x00, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code roll  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5181, Serial#: 1010
    public void roll(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0002((byte) 0xC1, (byte) 0x00, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5182, Serial#: 1073
    public void rolq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0003((byte) 0xC1, (byte) 0x00, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5183, Serial#: 1136
    public void rolw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0004((byte) 0xC1, (byte) 0x00, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolb  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5184, Serial#: 1236
    public void rolb___1(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD0, (byte) 0x00, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code roll  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5185, Serial#: 1299
    public void roll___1(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD1, (byte) 0x00, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolq  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5186, Serial#: 1362
    public void rolq___1(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0377((byte) 0xD1, (byte) 0x00, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolw  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5187, Serial#: 1425
    public void rolw___1(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0378((byte) 0xD1, (byte) 0x00, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolb  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5188, Serial#: 1488
    public void rolb___CL(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD2, (byte) 0x00, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code roll  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5189, Serial#: 1551
    public void roll___CL(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD3, (byte) 0x00, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolq  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5190, Serial#: 1614
    public void rolq___CL(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0377((byte) 0xD3, (byte) 0x00, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolw  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5191, Serial#: 1677
    public void rolw___CL(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0378((byte) 0xD3, (byte) 0x00, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolb  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5192, Serial#: 946
    public void rolb(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0012((byte) 0xC0, (byte) 0x00, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code roll  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5193, Serial#: 1009
    public void roll(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0012((byte) 0xC1, (byte) 0x00, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolq  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5194, Serial#: 1072
    public void rolq(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0013((byte) 0xC1, (byte) 0x00, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolw  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5195, Serial#: 1135
    public void rolw(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0014((byte) 0xC1, (byte) 0x00, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolb  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5196, Serial#: 1209
    public void rolb___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD0, (byte) 0x00, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code roll  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5197, Serial#: 1272
    public void roll___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD1, (byte) 0x00, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolq  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5198, Serial#: 1335
    public void rolq___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0379((byte) 0xD1, (byte) 0x00, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolw  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5199, Serial#: 1398
    public void rolw___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0380((byte) 0xD1, (byte) 0x00, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolb  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5200, Serial#: 1461
    public void rolb___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD2, (byte) 0x00, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code roll  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5201, Serial#: 1524
    public void roll___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD3, (byte) 0x00, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolq  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5202, Serial#: 1587
    public void rolq___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0379((byte) 0xD3, (byte) 0x00, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolw  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5203, Serial#: 1650
    public void rolw___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0380((byte) 0xD3, (byte) 0x00, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolb  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5204, Serial#: 919
    public void rolb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0022((byte) 0xC0, (byte) 0x00, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code roll  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5205, Serial#: 982
    public void roll(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0022((byte) 0xC1, (byte) 0x00, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolq  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5206, Serial#: 1045
    public void rolq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0023((byte) 0xC1, (byte) 0x00, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolw  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5207, Serial#: 1108
    public void rolw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0024((byte) 0xC1, (byte) 0x00, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolw  }<i>destination</i>
     */
    // Template#: 5208, Serial#: 1453
    public void rolw___1(AMD64GeneralRegister16 destination) {
        assemble0235((byte) 0xD1, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolw  }<i>destination</i>
     */
    // Template#: 5209, Serial#: 1705
    public void rolw___CL(AMD64GeneralRegister16 destination) {
        assemble0235((byte) 0xD3, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5210, Serial#: 1163
    public void rolw(AMD64GeneralRegister16 destination, byte imm8) {
        assemble0032((byte) 0xC1, (byte) 0x00, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code roll  }<i>destination</i>
     */
    // Template#: 5211, Serial#: 1327
    public void roll___1(AMD64GeneralRegister32 destination) {
        assemble0381((byte) 0xD1, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code roll  }<i>destination</i>
     */
    // Template#: 5212, Serial#: 1579
    public void roll___CL(AMD64GeneralRegister32 destination) {
        assemble0381((byte) 0xD3, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code roll  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5213, Serial#: 1037
    public void roll(AMD64GeneralRegister32 destination, byte imm8) {
        assemble0043((byte) 0xC1, (byte) 0x00, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolq  }<i>destination</i>
     */
    // Template#: 5214, Serial#: 1390
    public void rolq___1(AMD64GeneralRegister64 destination) {
        assemble0382((byte) 0xD1, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolq  }<i>destination</i>
     */
    // Template#: 5215, Serial#: 1642
    public void rolq___CL(AMD64GeneralRegister64 destination) {
        assemble0382((byte) 0xD3, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5216, Serial#: 1100
    public void rolq(AMD64GeneralRegister64 destination, byte imm8) {
        assemble0054((byte) 0xC1, (byte) 0x00, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolb  }<i>destination</i>
     */
    // Template#: 5217, Serial#: 1264
    public void rolb___1(AMD64GeneralRegister8 destination) {
        assemble0383((byte) 0xD0, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolb  }<i>destination</i>
     */
    // Template#: 5218, Serial#: 1516
    public void rolb___CL(AMD64GeneralRegister8 destination) {
        assemble0383((byte) 0xD2, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolb  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5219, Serial#: 974
    public void rolb(AMD64GeneralRegister8 destination, byte imm8) {
        assemble0065((byte) 0xC0, (byte) 0x00, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolb  }<i>destination</i>
     */
    // Template#: 5220, Serial#: 1208
    public void rolb___1(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD0, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code roll  }<i>destination</i>
     */
    // Template#: 5221, Serial#: 1271
    public void roll___1(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD1, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolq  }<i>destination</i>
     */
    // Template#: 5222, Serial#: 1334
    public void rolq___1(AMD64IndirectRegister64 destination) {
        assemble0384((byte) 0xD1, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolw  }<i>destination</i>
     */
    // Template#: 5223, Serial#: 1397
    public void rolw___1(AMD64IndirectRegister64 destination) {
        assemble0385((byte) 0xD1, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolb  }<i>destination</i>
     */
    // Template#: 5224, Serial#: 1460
    public void rolb___CL(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD2, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code roll  }<i>destination</i>
     */
    // Template#: 5225, Serial#: 1523
    public void roll___CL(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD3, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolq  }<i>destination</i>
     */
    // Template#: 5226, Serial#: 1586
    public void rolq___CL(AMD64IndirectRegister64 destination) {
        assemble0384((byte) 0xD3, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolw  }<i>destination</i>
     */
    // Template#: 5227, Serial#: 1649
    public void rolw___CL(AMD64IndirectRegister64 destination) {
        assemble0385((byte) 0xD3, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolb  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5228, Serial#: 918
    public void rolb(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0075((byte) 0xC0, (byte) 0x00, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code roll  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5229, Serial#: 981
    public void roll(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0075((byte) 0xC1, (byte) 0x00, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5230, Serial#: 1044
    public void rolq(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0076((byte) 0xC1, (byte) 0x00, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5231, Serial#: 1107
    public void rolw(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0077((byte) 0xC1, (byte) 0x00, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolb  }<i>rel32</i>
     */
    // Template#: 5232, Serial#: 1211
    public void rip_rolb___1(int rel32) {
        assemble0239((byte) 0xD0, (byte) 0x00, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code roll  }<i>rel32</i>
     */
    // Template#: 5233, Serial#: 1274
    public void rip_roll___1(int rel32) {
        assemble0239((byte) 0xD1, (byte) 0x00, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolq  }<i>rel32</i>
     */
    // Template#: 5234, Serial#: 1337
    public void rip_rolq___1(int rel32) {
        assemble0386((byte) 0xD1, (byte) 0x00, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolw  }<i>rel32</i>
     */
    // Template#: 5235, Serial#: 1400
    public void rip_rolw___1(int rel32) {
        assemble0387((byte) 0xD1, (byte) 0x00, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolb  }<i>rel32</i>
     */
    // Template#: 5236, Serial#: 1463
    public void rip_rolb___CL(int rel32) {
        assemble0239((byte) 0xD2, (byte) 0x00, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code roll  }<i>rel32</i>
     */
    // Template#: 5237, Serial#: 1526
    public void rip_roll___CL(int rel32) {
        assemble0239((byte) 0xD3, (byte) 0x00, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolq  }<i>rel32</i>
     */
    // Template#: 5238, Serial#: 1589
    public void rip_rolq___CL(int rel32) {
        assemble0386((byte) 0xD3, (byte) 0x00, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolw  }<i>rel32</i>
     */
    // Template#: 5239, Serial#: 1652
    public void rip_rolw___CL(int rel32) {
        assemble0387((byte) 0xD3, (byte) 0x00, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolb  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 5240, Serial#: 921
    public void rip_rolb(int rel32, byte imm8) {
        assemble0087((byte) 0xC0, (byte) 0x00, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code roll  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 5241, Serial#: 984
    public void rip_roll(int rel32, byte imm8) {
        assemble0087((byte) 0xC1, (byte) 0x00, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolq  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 5242, Serial#: 1047
    public void rip_rolq(int rel32, byte imm8) {
        assemble0088((byte) 0xC1, (byte) 0x00, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolw  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 5243, Serial#: 1110
    public void rip_rolw(int rel32, byte imm8) {
        assemble0089((byte) 0xC1, (byte) 0x00, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5244, Serial#: 1251
    public void rolb___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD0, (byte) 0x00, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code roll  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5245, Serial#: 1314
    public void roll___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD1, (byte) 0x00, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5246, Serial#: 1377
    public void rolq___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0388((byte) 0xD1, (byte) 0x00, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5247, Serial#: 1440
    public void rolw___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0389((byte) 0xD1, (byte) 0x00, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5248, Serial#: 1503
    public void rolb___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD2, (byte) 0x00, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code roll  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5249, Serial#: 1566
    public void roll___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD3, (byte) 0x00, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5250, Serial#: 1629
    public void rolq___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0388((byte) 0xD3, (byte) 0x00, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5251, Serial#: 1692
    public void rolw___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0389((byte) 0xD3, (byte) 0x00, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5252, Serial#: 961
    public void rolb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0090((byte) 0xC0, (byte) 0x00, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code roll  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5253, Serial#: 1024
    public void roll(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0090((byte) 0xC1, (byte) 0x00, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5254, Serial#: 1087
    public void rolq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0091((byte) 0xC1, (byte) 0x00, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5255, Serial#: 1150
    public void rolw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0092((byte) 0xC1, (byte) 0x00, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolb  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5256, Serial#: 1210
    public void m_rolb___1(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD0, (byte) 0x00, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code roll  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5257, Serial#: 1273
    public void m_roll___1(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD1, (byte) 0x00, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolq  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5258, Serial#: 1336
    public void m_rolq___1(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0390((byte) 0xD1, (byte) 0x00, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolw  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5259, Serial#: 1399
    public void m_rolw___1(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0391((byte) 0xD1, (byte) 0x00, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolb  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5260, Serial#: 1462
    public void m_rolb___CL(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD2, (byte) 0x00, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code roll  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5261, Serial#: 1525
    public void m_roll___CL(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD3, (byte) 0x00, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolq  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5262, Serial#: 1588
    public void m_rolq___CL(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0390((byte) 0xD3, (byte) 0x00, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolw  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5263, Serial#: 1651
    public void m_rolw___CL(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0391((byte) 0xD3, (byte) 0x00, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolb  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5264, Serial#: 920
    public void m_rolb(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0104((byte) 0xC0, (byte) 0x00, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code roll  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5265, Serial#: 983
    public void m_roll(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0104((byte) 0xC1, (byte) 0x00, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolq  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5266, Serial#: 1046
    public void m_rolq(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0105((byte) 0xC1, (byte) 0x00, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolw  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5267, Serial#: 1109
    public void m_rolw(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0106((byte) 0xC1, (byte) 0x00, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolb  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5268, Serial#: 1250
    public void rolb___1(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD0, (byte) 0x00, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code roll  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5269, Serial#: 1313
    public void roll___1(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD1, (byte) 0x00, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolq  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5270, Serial#: 1376
    public void rolq___1(int disp32, AMD64IndirectRegister64 destination) {
        assemble0392((byte) 0xD1, (byte) 0x00, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolw  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5271, Serial#: 1439
    public void rolw___1(int disp32, AMD64IndirectRegister64 destination) {
        assemble0393((byte) 0xD1, (byte) 0x00, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolb  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5272, Serial#: 1502
    public void rolb___CL(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD2, (byte) 0x00, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code roll  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5273, Serial#: 1565
    public void roll___CL(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD3, (byte) 0x00, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolq  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5274, Serial#: 1628
    public void rolq___CL(int disp32, AMD64IndirectRegister64 destination) {
        assemble0392((byte) 0xD3, (byte) 0x00, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolw  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5275, Serial#: 1691
    public void rolw___CL(int disp32, AMD64IndirectRegister64 destination) {
        assemble0393((byte) 0xD3, (byte) 0x00, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolb  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5276, Serial#: 960
    public void rolb(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0114((byte) 0xC0, (byte) 0x00, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code roll  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5277, Serial#: 1023
    public void roll(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0114((byte) 0xC1, (byte) 0x00, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolq  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5278, Serial#: 1086
    public void rolq(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0115((byte) 0xC1, (byte) 0x00, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolw  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5279, Serial#: 1149
    public void rolw(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0116((byte) 0xC1, (byte) 0x00, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5280, Serial#: 1239
    public void rorb___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD0, (byte) 0x01, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5281, Serial#: 1302
    public void rorl___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD1, (byte) 0x01, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5282, Serial#: 1365
    public void rorq___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0375((byte) 0xD1, (byte) 0x01, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5283, Serial#: 1428
    public void rorw___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0376((byte) 0xD1, (byte) 0x01, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5284, Serial#: 1491
    public void rorb___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD2, (byte) 0x01, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5285, Serial#: 1554
    public void rorl___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD3, (byte) 0x01, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5286, Serial#: 1617
    public void rorq___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0375((byte) 0xD3, (byte) 0x01, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5287, Serial#: 1680
    public void rorw___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0376((byte) 0xD3, (byte) 0x01, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5288, Serial#: 949
    public void rorb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0002((byte) 0xC0, (byte) 0x01, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5289, Serial#: 1012
    public void rorl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0002((byte) 0xC1, (byte) 0x01, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5290, Serial#: 1075
    public void rorq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0003((byte) 0xC1, (byte) 0x01, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5291, Serial#: 1138
    public void rorw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0004((byte) 0xC1, (byte) 0x01, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorb  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5292, Serial#: 1238
    public void rorb___1(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD0, (byte) 0x01, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorl  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5293, Serial#: 1301
    public void rorl___1(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD1, (byte) 0x01, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorq  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5294, Serial#: 1364
    public void rorq___1(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0377((byte) 0xD1, (byte) 0x01, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorw  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5295, Serial#: 1427
    public void rorw___1(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0378((byte) 0xD1, (byte) 0x01, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorb  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5296, Serial#: 1490
    public void rorb___CL(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD2, (byte) 0x01, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorl  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5297, Serial#: 1553
    public void rorl___CL(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD3, (byte) 0x01, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorq  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5298, Serial#: 1616
    public void rorq___CL(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0377((byte) 0xD3, (byte) 0x01, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorw  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5299, Serial#: 1679
    public void rorw___CL(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0378((byte) 0xD3, (byte) 0x01, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorb  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5300, Serial#: 948
    public void rorb(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0012((byte) 0xC0, (byte) 0x01, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorl  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5301, Serial#: 1011
    public void rorl(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0012((byte) 0xC1, (byte) 0x01, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorq  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5302, Serial#: 1074
    public void rorq(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0013((byte) 0xC1, (byte) 0x01, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorw  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5303, Serial#: 1137
    public void rorw(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0014((byte) 0xC1, (byte) 0x01, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorb  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5304, Serial#: 1213
    public void rorb___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD0, (byte) 0x01, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorl  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5305, Serial#: 1276
    public void rorl___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD1, (byte) 0x01, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorq  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5306, Serial#: 1339
    public void rorq___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0379((byte) 0xD1, (byte) 0x01, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorw  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5307, Serial#: 1402
    public void rorw___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0380((byte) 0xD1, (byte) 0x01, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorb  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5308, Serial#: 1465
    public void rorb___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD2, (byte) 0x01, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorl  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5309, Serial#: 1528
    public void rorl___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD3, (byte) 0x01, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorq  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5310, Serial#: 1591
    public void rorq___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0379((byte) 0xD3, (byte) 0x01, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorw  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5311, Serial#: 1654
    public void rorw___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0380((byte) 0xD3, (byte) 0x01, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorb  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5312, Serial#: 923
    public void rorb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0022((byte) 0xC0, (byte) 0x01, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorl  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5313, Serial#: 986
    public void rorl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0022((byte) 0xC1, (byte) 0x01, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorq  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5314, Serial#: 1049
    public void rorq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0023((byte) 0xC1, (byte) 0x01, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorw  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5315, Serial#: 1112
    public void rorw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0024((byte) 0xC1, (byte) 0x01, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorw  }<i>destination</i>
     */
    // Template#: 5316, Serial#: 1454
    public void rorw___1(AMD64GeneralRegister16 destination) {
        assemble0235((byte) 0xD1, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorw  }<i>destination</i>
     */
    // Template#: 5317, Serial#: 1706
    public void rorw___CL(AMD64GeneralRegister16 destination) {
        assemble0235((byte) 0xD3, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5318, Serial#: 1164
    public void rorw(AMD64GeneralRegister16 destination, byte imm8) {
        assemble0032((byte) 0xC1, (byte) 0x01, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorl  }<i>destination</i>
     */
    // Template#: 5319, Serial#: 1328
    public void rorl___1(AMD64GeneralRegister32 destination) {
        assemble0381((byte) 0xD1, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorl  }<i>destination</i>
     */
    // Template#: 5320, Serial#: 1580
    public void rorl___CL(AMD64GeneralRegister32 destination) {
        assemble0381((byte) 0xD3, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorl  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5321, Serial#: 1038
    public void rorl(AMD64GeneralRegister32 destination, byte imm8) {
        assemble0043((byte) 0xC1, (byte) 0x01, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorq  }<i>destination</i>
     */
    // Template#: 5322, Serial#: 1391
    public void rorq___1(AMD64GeneralRegister64 destination) {
        assemble0382((byte) 0xD1, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorq  }<i>destination</i>
     */
    // Template#: 5323, Serial#: 1643
    public void rorq___CL(AMD64GeneralRegister64 destination) {
        assemble0382((byte) 0xD3, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5324, Serial#: 1101
    public void rorq(AMD64GeneralRegister64 destination, byte imm8) {
        assemble0054((byte) 0xC1, (byte) 0x01, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorb  }<i>destination</i>
     */
    // Template#: 5325, Serial#: 1265
    public void rorb___1(AMD64GeneralRegister8 destination) {
        assemble0383((byte) 0xD0, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorb  }<i>destination</i>
     */
    // Template#: 5326, Serial#: 1517
    public void rorb___CL(AMD64GeneralRegister8 destination) {
        assemble0383((byte) 0xD2, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorb  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5327, Serial#: 975
    public void rorb(AMD64GeneralRegister8 destination, byte imm8) {
        assemble0065((byte) 0xC0, (byte) 0x01, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorb  }<i>destination</i>
     */
    // Template#: 5328, Serial#: 1212
    public void rorb___1(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD0, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorl  }<i>destination</i>
     */
    // Template#: 5329, Serial#: 1275
    public void rorl___1(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD1, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorq  }<i>destination</i>
     */
    // Template#: 5330, Serial#: 1338
    public void rorq___1(AMD64IndirectRegister64 destination) {
        assemble0384((byte) 0xD1, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorw  }<i>destination</i>
     */
    // Template#: 5331, Serial#: 1401
    public void rorw___1(AMD64IndirectRegister64 destination) {
        assemble0385((byte) 0xD1, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorb  }<i>destination</i>
     */
    // Template#: 5332, Serial#: 1464
    public void rorb___CL(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD2, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorl  }<i>destination</i>
     */
    // Template#: 5333, Serial#: 1527
    public void rorl___CL(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD3, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorq  }<i>destination</i>
     */
    // Template#: 5334, Serial#: 1590
    public void rorq___CL(AMD64IndirectRegister64 destination) {
        assemble0384((byte) 0xD3, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorw  }<i>destination</i>
     */
    // Template#: 5335, Serial#: 1653
    public void rorw___CL(AMD64IndirectRegister64 destination) {
        assemble0385((byte) 0xD3, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorb  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5336, Serial#: 922
    public void rorb(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0075((byte) 0xC0, (byte) 0x01, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorl  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5337, Serial#: 985
    public void rorl(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0075((byte) 0xC1, (byte) 0x01, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5338, Serial#: 1048
    public void rorq(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0076((byte) 0xC1, (byte) 0x01, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5339, Serial#: 1111
    public void rorw(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0077((byte) 0xC1, (byte) 0x01, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorb  }<i>rel32</i>
     */
    // Template#: 5340, Serial#: 1215
    public void rip_rorb___1(int rel32) {
        assemble0239((byte) 0xD0, (byte) 0x01, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorl  }<i>rel32</i>
     */
    // Template#: 5341, Serial#: 1278
    public void rip_rorl___1(int rel32) {
        assemble0239((byte) 0xD1, (byte) 0x01, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorq  }<i>rel32</i>
     */
    // Template#: 5342, Serial#: 1341
    public void rip_rorq___1(int rel32) {
        assemble0386((byte) 0xD1, (byte) 0x01, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorw  }<i>rel32</i>
     */
    // Template#: 5343, Serial#: 1404
    public void rip_rorw___1(int rel32) {
        assemble0387((byte) 0xD1, (byte) 0x01, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorb  }<i>rel32</i>
     */
    // Template#: 5344, Serial#: 1467
    public void rip_rorb___CL(int rel32) {
        assemble0239((byte) 0xD2, (byte) 0x01, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorl  }<i>rel32</i>
     */
    // Template#: 5345, Serial#: 1530
    public void rip_rorl___CL(int rel32) {
        assemble0239((byte) 0xD3, (byte) 0x01, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorq  }<i>rel32</i>
     */
    // Template#: 5346, Serial#: 1593
    public void rip_rorq___CL(int rel32) {
        assemble0386((byte) 0xD3, (byte) 0x01, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorw  }<i>rel32</i>
     */
    // Template#: 5347, Serial#: 1656
    public void rip_rorw___CL(int rel32) {
        assemble0387((byte) 0xD3, (byte) 0x01, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorb  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 5348, Serial#: 925
    public void rip_rorb(int rel32, byte imm8) {
        assemble0087((byte) 0xC0, (byte) 0x01, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorl  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 5349, Serial#: 988
    public void rip_rorl(int rel32, byte imm8) {
        assemble0087((byte) 0xC1, (byte) 0x01, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorq  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 5350, Serial#: 1051
    public void rip_rorq(int rel32, byte imm8) {
        assemble0088((byte) 0xC1, (byte) 0x01, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorw  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 5351, Serial#: 1114
    public void rip_rorw(int rel32, byte imm8) {
        assemble0089((byte) 0xC1, (byte) 0x01, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5352, Serial#: 1253
    public void rorb___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD0, (byte) 0x01, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5353, Serial#: 1316
    public void rorl___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD1, (byte) 0x01, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5354, Serial#: 1379
    public void rorq___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0388((byte) 0xD1, (byte) 0x01, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5355, Serial#: 1442
    public void rorw___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0389((byte) 0xD1, (byte) 0x01, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5356, Serial#: 1505
    public void rorb___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD2, (byte) 0x01, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5357, Serial#: 1568
    public void rorl___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD3, (byte) 0x01, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5358, Serial#: 1631
    public void rorq___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0388((byte) 0xD3, (byte) 0x01, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5359, Serial#: 1694
    public void rorw___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0389((byte) 0xD3, (byte) 0x01, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5360, Serial#: 963
    public void rorb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0090((byte) 0xC0, (byte) 0x01, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5361, Serial#: 1026
    public void rorl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0090((byte) 0xC1, (byte) 0x01, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5362, Serial#: 1089
    public void rorq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0091((byte) 0xC1, (byte) 0x01, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5363, Serial#: 1152
    public void rorw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0092((byte) 0xC1, (byte) 0x01, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorb  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5364, Serial#: 1214
    public void m_rorb___1(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD0, (byte) 0x01, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorl  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5365, Serial#: 1277
    public void m_rorl___1(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD1, (byte) 0x01, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorq  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5366, Serial#: 1340
    public void m_rorq___1(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0390((byte) 0xD1, (byte) 0x01, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorw  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5367, Serial#: 1403
    public void m_rorw___1(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0391((byte) 0xD1, (byte) 0x01, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorb  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5368, Serial#: 1466
    public void m_rorb___CL(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD2, (byte) 0x01, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorl  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5369, Serial#: 1529
    public void m_rorl___CL(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD3, (byte) 0x01, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorq  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5370, Serial#: 1592
    public void m_rorq___CL(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0390((byte) 0xD3, (byte) 0x01, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorw  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5371, Serial#: 1655
    public void m_rorw___CL(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0391((byte) 0xD3, (byte) 0x01, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorb  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5372, Serial#: 924
    public void m_rorb(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0104((byte) 0xC0, (byte) 0x01, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorl  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5373, Serial#: 987
    public void m_rorl(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0104((byte) 0xC1, (byte) 0x01, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorq  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5374, Serial#: 1050
    public void m_rorq(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0105((byte) 0xC1, (byte) 0x01, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorw  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5375, Serial#: 1113
    public void m_rorw(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0106((byte) 0xC1, (byte) 0x01, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorb  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5376, Serial#: 1252
    public void rorb___1(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD0, (byte) 0x01, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorl  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5377, Serial#: 1315
    public void rorl___1(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD1, (byte) 0x01, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorq  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5378, Serial#: 1378
    public void rorq___1(int disp32, AMD64IndirectRegister64 destination) {
        assemble0392((byte) 0xD1, (byte) 0x01, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorw  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5379, Serial#: 1441
    public void rorw___1(int disp32, AMD64IndirectRegister64 destination) {
        assemble0393((byte) 0xD1, (byte) 0x01, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorb  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5380, Serial#: 1504
    public void rorb___CL(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD2, (byte) 0x01, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorl  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5381, Serial#: 1567
    public void rorl___CL(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD3, (byte) 0x01, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorq  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5382, Serial#: 1630
    public void rorq___CL(int disp32, AMD64IndirectRegister64 destination) {
        assemble0392((byte) 0xD3, (byte) 0x01, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorw  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5383, Serial#: 1693
    public void rorw___CL(int disp32, AMD64IndirectRegister64 destination) {
        assemble0393((byte) 0xD3, (byte) 0x01, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorb  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5384, Serial#: 962
    public void rorb(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0114((byte) 0xC0, (byte) 0x01, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorl  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5385, Serial#: 1025
    public void rorl(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0114((byte) 0xC1, (byte) 0x01, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorq  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5386, Serial#: 1088
    public void rorq(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0115((byte) 0xC1, (byte) 0x01, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorw  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5387, Serial#: 1151
    public void rorw(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0116((byte) 0xC1, (byte) 0x01, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code rsm  }
     */
    // Template#: 5388, Serial#: 5980
    public void rsm() {
        assemble0252((byte) 0xAA);
    }

    /**
     * Pseudo-external assembler syntax: {@code rsqrtps  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5389, Serial#: 3675
    public void rsqrtps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0137((byte) 0x52, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rsqrtps  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 5390, Serial#: 3674
    public void rsqrtps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0138((byte) 0x52, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code rsqrtps  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5391, Serial#: 3671
    public void rsqrtps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0139((byte) 0x52, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rsqrtps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 5392, Serial#: 3670
    public void rsqrtps(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0140((byte) 0x52, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code rsqrtps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 5393, Serial#: 3678
    public void rsqrtps(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0141((byte) 0x52, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code rsqrtps  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 5394, Serial#: 3673
    public void rip_rsqrtps(AMD64XMMRegister destination, int rel32) {
        assemble0142((byte) 0x52, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rsqrtps  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5395, Serial#: 3677
    public void rsqrtps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0143((byte) 0x52, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rsqrtps  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5396, Serial#: 3672
    public void m_rsqrtps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0144((byte) 0x52, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rsqrtps  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 5397, Serial#: 3676
    public void rsqrtps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0145((byte) 0x52, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code rsqrtss  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5398, Serial#: 3793
    public void rsqrtss(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0156((byte) 0x52, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rsqrtss  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 5399, Serial#: 3792
    public void rsqrtss(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0157((byte) 0x52, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code rsqrtss  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5400, Serial#: 3789
    public void rsqrtss(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0158((byte) 0x52, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rsqrtss  }<i>destination</i>, <i>source</i>
     */
    // Template#: 5401, Serial#: 3788
    public void rsqrtss(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0159((byte) 0x52, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code rsqrtss  }<i>destination</i>, <i>source</i>
     */
    // Template#: 5402, Serial#: 3796
    public void rsqrtss(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0160((byte) 0x52, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code rsqrtss  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 5403, Serial#: 3791
    public void rip_rsqrtss(AMD64XMMRegister destination, int rel32) {
        assemble0161((byte) 0x52, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code rsqrtss  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5404, Serial#: 3795
    public void rsqrtss(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0162((byte) 0x52, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rsqrtss  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5405, Serial#: 3790
    public void m_rsqrtss(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0163((byte) 0x52, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code rsqrtss  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 5406, Serial#: 3794
    public void rsqrtss(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0164((byte) 0x52, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sahf  }
     */
    // Template#: 5407, Serial#: 2473
    public void sahf() {
        assemble0146((byte) 0x9E);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5408, Serial#: 1249
    public void sarb___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD0, (byte) 0x07, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5409, Serial#: 1312
    public void sarl___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD1, (byte) 0x07, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5410, Serial#: 1375
    public void sarq___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0375((byte) 0xD1, (byte) 0x07, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5411, Serial#: 1438
    public void sarw___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0376((byte) 0xD1, (byte) 0x07, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5412, Serial#: 1501
    public void sarb___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD2, (byte) 0x07, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5413, Serial#: 1564
    public void sarl___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD3, (byte) 0x07, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5414, Serial#: 1627
    public void sarq___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0375((byte) 0xD3, (byte) 0x07, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5415, Serial#: 1690
    public void sarw___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0376((byte) 0xD3, (byte) 0x07, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5416, Serial#: 959
    public void sarb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0002((byte) 0xC0, (byte) 0x07, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5417, Serial#: 1022
    public void sarl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0002((byte) 0xC1, (byte) 0x07, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5418, Serial#: 1085
    public void sarq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0003((byte) 0xC1, (byte) 0x07, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5419, Serial#: 1148
    public void sarw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0004((byte) 0xC1, (byte) 0x07, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarb  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5420, Serial#: 1248
    public void sarb___1(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD0, (byte) 0x07, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarl  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5421, Serial#: 1311
    public void sarl___1(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD1, (byte) 0x07, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarq  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5422, Serial#: 1374
    public void sarq___1(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0377((byte) 0xD1, (byte) 0x07, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarw  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5423, Serial#: 1437
    public void sarw___1(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0378((byte) 0xD1, (byte) 0x07, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarb  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5424, Serial#: 1500
    public void sarb___CL(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD2, (byte) 0x07, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarl  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5425, Serial#: 1563
    public void sarl___CL(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD3, (byte) 0x07, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarq  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5426, Serial#: 1626
    public void sarq___CL(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0377((byte) 0xD3, (byte) 0x07, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarw  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5427, Serial#: 1689
    public void sarw___CL(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0378((byte) 0xD3, (byte) 0x07, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarb  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5428, Serial#: 958
    public void sarb(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0012((byte) 0xC0, (byte) 0x07, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarl  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5429, Serial#: 1021
    public void sarl(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0012((byte) 0xC1, (byte) 0x07, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarq  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5430, Serial#: 1084
    public void sarq(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0013((byte) 0xC1, (byte) 0x07, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarw  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5431, Serial#: 1147
    public void sarw(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0014((byte) 0xC1, (byte) 0x07, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarb  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5432, Serial#: 1233
    public void sarb___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD0, (byte) 0x07, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarl  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5433, Serial#: 1296
    public void sarl___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD1, (byte) 0x07, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarq  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5434, Serial#: 1359
    public void sarq___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0379((byte) 0xD1, (byte) 0x07, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarw  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5435, Serial#: 1422
    public void sarw___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0380((byte) 0xD1, (byte) 0x07, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarb  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5436, Serial#: 1485
    public void sarb___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD2, (byte) 0x07, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarl  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5437, Serial#: 1548
    public void sarl___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD3, (byte) 0x07, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarq  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5438, Serial#: 1611
    public void sarq___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0379((byte) 0xD3, (byte) 0x07, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarw  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5439, Serial#: 1674
    public void sarw___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0380((byte) 0xD3, (byte) 0x07, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarb  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5440, Serial#: 943
    public void sarb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0022((byte) 0xC0, (byte) 0x07, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarl  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5441, Serial#: 1006
    public void sarl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0022((byte) 0xC1, (byte) 0x07, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarq  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5442, Serial#: 1069
    public void sarq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0023((byte) 0xC1, (byte) 0x07, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarw  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5443, Serial#: 1132
    public void sarw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0024((byte) 0xC1, (byte) 0x07, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarw  }<i>destination</i>
     */
    // Template#: 5444, Serial#: 1459
    public void sarw___1(AMD64GeneralRegister16 destination) {
        assemble0235((byte) 0xD1, (byte) 0x07, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarw  }<i>destination</i>
     */
    // Template#: 5445, Serial#: 1711
    public void sarw___CL(AMD64GeneralRegister16 destination) {
        assemble0235((byte) 0xD3, (byte) 0x07, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5446, Serial#: 1169
    public void sarw(AMD64GeneralRegister16 destination, byte imm8) {
        assemble0032((byte) 0xC1, (byte) 0x07, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarl  }<i>destination</i>
     */
    // Template#: 5447, Serial#: 1333
    public void sarl___1(AMD64GeneralRegister32 destination) {
        assemble0381((byte) 0xD1, (byte) 0x07, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarl  }<i>destination</i>
     */
    // Template#: 5448, Serial#: 1585
    public void sarl___CL(AMD64GeneralRegister32 destination) {
        assemble0381((byte) 0xD3, (byte) 0x07, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarl  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5449, Serial#: 1043
    public void sarl(AMD64GeneralRegister32 destination, byte imm8) {
        assemble0043((byte) 0xC1, (byte) 0x07, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarq  }<i>destination</i>
     */
    // Template#: 5450, Serial#: 1396
    public void sarq___1(AMD64GeneralRegister64 destination) {
        assemble0382((byte) 0xD1, (byte) 0x07, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarq  }<i>destination</i>
     */
    // Template#: 5451, Serial#: 1648
    public void sarq___CL(AMD64GeneralRegister64 destination) {
        assemble0382((byte) 0xD3, (byte) 0x07, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5452, Serial#: 1106
    public void sarq(AMD64GeneralRegister64 destination, byte imm8) {
        assemble0054((byte) 0xC1, (byte) 0x07, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarb  }<i>destination</i>
     */
    // Template#: 5453, Serial#: 1270
    public void sarb___1(AMD64GeneralRegister8 destination) {
        assemble0383((byte) 0xD0, (byte) 0x07, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarb  }<i>destination</i>
     */
    // Template#: 5454, Serial#: 1522
    public void sarb___CL(AMD64GeneralRegister8 destination) {
        assemble0383((byte) 0xD2, (byte) 0x07, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarb  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5455, Serial#: 980
    public void sarb(AMD64GeneralRegister8 destination, byte imm8) {
        assemble0065((byte) 0xC0, (byte) 0x07, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarb  }<i>destination</i>
     */
    // Template#: 5456, Serial#: 1232
    public void sarb___1(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD0, (byte) 0x07, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarl  }<i>destination</i>
     */
    // Template#: 5457, Serial#: 1295
    public void sarl___1(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD1, (byte) 0x07, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarq  }<i>destination</i>
     */
    // Template#: 5458, Serial#: 1358
    public void sarq___1(AMD64IndirectRegister64 destination) {
        assemble0384((byte) 0xD1, (byte) 0x07, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarw  }<i>destination</i>
     */
    // Template#: 5459, Serial#: 1421
    public void sarw___1(AMD64IndirectRegister64 destination) {
        assemble0385((byte) 0xD1, (byte) 0x07, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarb  }<i>destination</i>
     */
    // Template#: 5460, Serial#: 1484
    public void sarb___CL(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD2, (byte) 0x07, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarl  }<i>destination</i>
     */
    // Template#: 5461, Serial#: 1547
    public void sarl___CL(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD3, (byte) 0x07, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarq  }<i>destination</i>
     */
    // Template#: 5462, Serial#: 1610
    public void sarq___CL(AMD64IndirectRegister64 destination) {
        assemble0384((byte) 0xD3, (byte) 0x07, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarw  }<i>destination</i>
     */
    // Template#: 5463, Serial#: 1673
    public void sarw___CL(AMD64IndirectRegister64 destination) {
        assemble0385((byte) 0xD3, (byte) 0x07, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarb  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5464, Serial#: 942
    public void sarb(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0075((byte) 0xC0, (byte) 0x07, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarl  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5465, Serial#: 1005
    public void sarl(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0075((byte) 0xC1, (byte) 0x07, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5466, Serial#: 1068
    public void sarq(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0076((byte) 0xC1, (byte) 0x07, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5467, Serial#: 1131
    public void sarw(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0077((byte) 0xC1, (byte) 0x07, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarb  }<i>rel32</i>
     */
    // Template#: 5468, Serial#: 1235
    public void rip_sarb___1(int rel32) {
        assemble0239((byte) 0xD0, (byte) 0x07, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarl  }<i>rel32</i>
     */
    // Template#: 5469, Serial#: 1298
    public void rip_sarl___1(int rel32) {
        assemble0239((byte) 0xD1, (byte) 0x07, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarq  }<i>rel32</i>
     */
    // Template#: 5470, Serial#: 1361
    public void rip_sarq___1(int rel32) {
        assemble0386((byte) 0xD1, (byte) 0x07, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarw  }<i>rel32</i>
     */
    // Template#: 5471, Serial#: 1424
    public void rip_sarw___1(int rel32) {
        assemble0387((byte) 0xD1, (byte) 0x07, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarb  }<i>rel32</i>
     */
    // Template#: 5472, Serial#: 1487
    public void rip_sarb___CL(int rel32) {
        assemble0239((byte) 0xD2, (byte) 0x07, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarl  }<i>rel32</i>
     */
    // Template#: 5473, Serial#: 1550
    public void rip_sarl___CL(int rel32) {
        assemble0239((byte) 0xD3, (byte) 0x07, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarq  }<i>rel32</i>
     */
    // Template#: 5474, Serial#: 1613
    public void rip_sarq___CL(int rel32) {
        assemble0386((byte) 0xD3, (byte) 0x07, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarw  }<i>rel32</i>
     */
    // Template#: 5475, Serial#: 1676
    public void rip_sarw___CL(int rel32) {
        assemble0387((byte) 0xD3, (byte) 0x07, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarb  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 5476, Serial#: 945
    public void rip_sarb(int rel32, byte imm8) {
        assemble0087((byte) 0xC0, (byte) 0x07, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarl  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 5477, Serial#: 1008
    public void rip_sarl(int rel32, byte imm8) {
        assemble0087((byte) 0xC1, (byte) 0x07, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarq  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 5478, Serial#: 1071
    public void rip_sarq(int rel32, byte imm8) {
        assemble0088((byte) 0xC1, (byte) 0x07, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarw  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 5479, Serial#: 1134
    public void rip_sarw(int rel32, byte imm8) {
        assemble0089((byte) 0xC1, (byte) 0x07, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5480, Serial#: 1263
    public void sarb___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD0, (byte) 0x07, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5481, Serial#: 1326
    public void sarl___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD1, (byte) 0x07, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5482, Serial#: 1389
    public void sarq___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0388((byte) 0xD1, (byte) 0x07, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5483, Serial#: 1452
    public void sarw___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0389((byte) 0xD1, (byte) 0x07, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5484, Serial#: 1515
    public void sarb___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD2, (byte) 0x07, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5485, Serial#: 1578
    public void sarl___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD3, (byte) 0x07, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5486, Serial#: 1641
    public void sarq___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0388((byte) 0xD3, (byte) 0x07, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5487, Serial#: 1704
    public void sarw___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0389((byte) 0xD3, (byte) 0x07, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5488, Serial#: 973
    public void sarb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0090((byte) 0xC0, (byte) 0x07, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5489, Serial#: 1036
    public void sarl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0090((byte) 0xC1, (byte) 0x07, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5490, Serial#: 1099
    public void sarq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0091((byte) 0xC1, (byte) 0x07, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5491, Serial#: 1162
    public void sarw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0092((byte) 0xC1, (byte) 0x07, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarb  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5492, Serial#: 1234
    public void m_sarb___1(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD0, (byte) 0x07, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarl  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5493, Serial#: 1297
    public void m_sarl___1(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD1, (byte) 0x07, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarq  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5494, Serial#: 1360
    public void m_sarq___1(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0390((byte) 0xD1, (byte) 0x07, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarw  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5495, Serial#: 1423
    public void m_sarw___1(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0391((byte) 0xD1, (byte) 0x07, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarb  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5496, Serial#: 1486
    public void m_sarb___CL(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD2, (byte) 0x07, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarl  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5497, Serial#: 1549
    public void m_sarl___CL(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD3, (byte) 0x07, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarq  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5498, Serial#: 1612
    public void m_sarq___CL(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0390((byte) 0xD3, (byte) 0x07, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarw  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5499, Serial#: 1675
    public void m_sarw___CL(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0391((byte) 0xD3, (byte) 0x07, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarb  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5500, Serial#: 944
    public void m_sarb(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0104((byte) 0xC0, (byte) 0x07, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarl  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5501, Serial#: 1007
    public void m_sarl(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0104((byte) 0xC1, (byte) 0x07, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarq  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5502, Serial#: 1070
    public void m_sarq(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0105((byte) 0xC1, (byte) 0x07, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarw  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5503, Serial#: 1133
    public void m_sarw(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0106((byte) 0xC1, (byte) 0x07, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarb  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5504, Serial#: 1262
    public void sarb___1(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD0, (byte) 0x07, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarl  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5505, Serial#: 1325
    public void sarl___1(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD1, (byte) 0x07, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarq  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5506, Serial#: 1388
    public void sarq___1(int disp32, AMD64IndirectRegister64 destination) {
        assemble0392((byte) 0xD1, (byte) 0x07, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarw  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5507, Serial#: 1451
    public void sarw___1(int disp32, AMD64IndirectRegister64 destination) {
        assemble0393((byte) 0xD1, (byte) 0x07, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarb  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5508, Serial#: 1514
    public void sarb___CL(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD2, (byte) 0x07, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarl  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5509, Serial#: 1577
    public void sarl___CL(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD3, (byte) 0x07, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarq  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5510, Serial#: 1640
    public void sarq___CL(int disp32, AMD64IndirectRegister64 destination) {
        assemble0392((byte) 0xD3, (byte) 0x07, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarw  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5511, Serial#: 1703
    public void sarw___CL(int disp32, AMD64IndirectRegister64 destination) {
        assemble0393((byte) 0xD3, (byte) 0x07, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarb  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5512, Serial#: 972
    public void sarb(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0114((byte) 0xC0, (byte) 0x07, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarl  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5513, Serial#: 1035
    public void sarl(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0114((byte) 0xC1, (byte) 0x07, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarq  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5514, Serial#: 1098
    public void sarq(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0115((byte) 0xC1, (byte) 0x07, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarw  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5515, Serial#: 1161
    public void sarw(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0116((byte) 0xC1, (byte) 0x07, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>imm8</i>
     */
    // Template#: 5516, Serial#: 2123
    public void sbb_AL(byte imm8) {
        assemble0001((byte) 0x1C, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5517, Serial#: 360
    public void sbbb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0002((byte) 0x80, (byte) 0x03, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5518, Serial#: 648
    public void sbbl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0002((byte) 0x83, (byte) 0x03, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5519, Serial#: 720
    public void sbbq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0003((byte) 0x83, (byte) 0x03, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5520, Serial#: 792
    public void sbbw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0004((byte) 0x83, (byte) 0x03, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 5521, Serial#: 2087
    public void sbb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0005((byte) 0x19, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 5522, Serial#: 2069
    public void sbb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0006((byte) 0x19, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 5523, Serial#: 2078
    public void sbb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0007((byte) 0x19, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 5524, Serial#: 2060
    public void sbb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0008((byte) 0x18, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 5525, Serial#: 432
    public void sbbl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0009((byte) 0x81, (byte) 0x03, disp8, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 5526, Serial#: 504
    public void sbbq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0010((byte) 0x81, (byte) 0x03, disp8, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 5527, Serial#: 576
    public void sbbw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0011((byte) 0x81, (byte) 0x03, disp8, base, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbb  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5528, Serial#: 359
    public void sbbb(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0012((byte) 0x80, (byte) 0x03, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbl  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5529, Serial#: 647
    public void sbbl(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0012((byte) 0x83, (byte) 0x03, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbq  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5530, Serial#: 719
    public void sbbq(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0013((byte) 0x83, (byte) 0x03, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbw  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5531, Serial#: 791
    public void sbbw(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0014((byte) 0x83, (byte) 0x03, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 5532, Serial#: 2086
    public void sbb(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0015((byte) 0x19, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 5533, Serial#: 2068
    public void sbb(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0016((byte) 0x19, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 5534, Serial#: 2077
    public void sbb(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0017((byte) 0x19, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 5535, Serial#: 2059
    public void sbb(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0018((byte) 0x18, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbl  }<i>disp8</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 5536, Serial#: 431
    public void sbbl(byte disp8, AMD64IndirectRegister64 destination, int imm32) {
        assemble0019((byte) 0x81, (byte) 0x03, disp8, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbq  }<i>disp8</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 5537, Serial#: 503
    public void sbbq(byte disp8, AMD64IndirectRegister64 destination, int imm32) {
        assemble0020((byte) 0x81, (byte) 0x03, disp8, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbw  }<i>disp8</i>, <i>destination</i>, <i>imm16</i>
     */
    // Template#: 5538, Serial#: 575
    public void sbbw(byte disp8, AMD64IndirectRegister64 destination, short imm16) {
        assemble0021((byte) 0x81, (byte) 0x03, disp8, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbb  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5539, Serial#: 334
    public void sbbb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0022((byte) 0x80, (byte) 0x03, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbl  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5540, Serial#: 622
    public void sbbl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0022((byte) 0x83, (byte) 0x03, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbq  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5541, Serial#: 694
    public void sbbq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0023((byte) 0x83, (byte) 0x03, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbw  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5542, Serial#: 766
    public void sbbw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0024((byte) 0x83, (byte) 0x03, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 5543, Serial#: 2083
    public void sbb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0025((byte) 0x19, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 5544, Serial#: 2065
    public void sbb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0026((byte) 0x19, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 5545, Serial#: 2074
    public void sbb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0027((byte) 0x19, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 5546, Serial#: 2056
    public void sbb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0028((byte) 0x18, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbl  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 5547, Serial#: 406
    public void sbbl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0029((byte) 0x81, (byte) 0x03, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbq  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 5548, Serial#: 478
    public void sbbq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0030((byte) 0x81, (byte) 0x03, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbw  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 5549, Serial#: 550
    public void sbbw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0031((byte) 0x81, (byte) 0x03, base, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5550, Serial#: 820
    public void sbbw(AMD64GeneralRegister16 destination, byte imm8) {
        assemble0032((byte) 0x83, (byte) 0x03, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5551, Serial#: 2120
    public void sbb(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0033((byte) 0x1B, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 5552, Serial#: 2119
    public void sbb(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0034((byte) 0x1B, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5553, Serial#: 2116
    public void sbb(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0035((byte) 0x1B, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 5554, Serial#: 2090
    public void sbb(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0036((byte) 0x19, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 5555, Serial#: 2115
    public void sbb(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        assemble0037((byte) 0x1B, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 5556, Serial#: 2118
    public void rip_sbb(AMD64GeneralRegister16 destination, int rel32) {
        assemble0038((byte) 0x1B, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5557, Serial#: 2122
    public void sbb(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0039((byte) 0x1B, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5558, Serial#: 2117
    public void m_sbb(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0040((byte) 0x1B, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 5559, Serial#: 2121
    public void sbb(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0041((byte) 0x1B, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbw  }<i>destination</i>, <i>imm16</i>
     */
    // Template#: 5560, Serial#: 604
    public void sbbw(AMD64GeneralRegister16 destination, short imm16) {
        assemble0042((byte) 0x81, (byte) 0x03, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbl  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5561, Serial#: 676
    public void sbbl(AMD64GeneralRegister32 destination, byte imm8) {
        assemble0043((byte) 0x83, (byte) 0x03, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5562, Serial#: 2104
    public void sbb(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0044((byte) 0x1B, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 5563, Serial#: 2103
    public void sbb(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0045((byte) 0x1B, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5564, Serial#: 2100
    public void sbb(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0046((byte) 0x1B, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 5565, Serial#: 2072
    public void sbb(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0047((byte) 0x19, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 5566, Serial#: 2099
    public void sbb(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0048((byte) 0x1B, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbl  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 5567, Serial#: 460
    public void sbbl(AMD64GeneralRegister32 destination, int imm32) {
        assemble0050((byte) 0x81, (byte) 0x03, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 5568, Serial#: 2102
    public void rip_sbb(AMD64GeneralRegister32 destination, int rel32) {
        assemble0049((byte) 0x1B, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5569, Serial#: 2106
    public void sbb(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0051((byte) 0x1B, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5570, Serial#: 2101
    public void m_sbb(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0052((byte) 0x1B, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 5571, Serial#: 2105
    public void sbb(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0053((byte) 0x1B, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5572, Serial#: 748
    public void sbbq(AMD64GeneralRegister64 destination, byte imm8) {
        assemble0054((byte) 0x83, (byte) 0x03, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5573, Serial#: 2112
    public void sbb(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0055((byte) 0x1B, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 5574, Serial#: 2111
    public void sbb(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0056((byte) 0x1B, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5575, Serial#: 2108
    public void sbb(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0057((byte) 0x1B, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 5576, Serial#: 2081
    public void sbb(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0058((byte) 0x19, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 5577, Serial#: 2107
    public void sbb(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0059((byte) 0x1B, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbq  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 5578, Serial#: 532
    public void sbbq(AMD64GeneralRegister64 destination, int imm32) {
        assemble0061((byte) 0x81, (byte) 0x03, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 5579, Serial#: 2110
    public void rip_sbb(AMD64GeneralRegister64 destination, int rel32) {
        assemble0060((byte) 0x1B, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5580, Serial#: 2114
    public void sbb(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0062((byte) 0x1B, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5581, Serial#: 2109
    public void m_sbb(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0063((byte) 0x1B, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 5582, Serial#: 2113
    public void sbb(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0064((byte) 0x1B, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbb  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5583, Serial#: 388
    public void sbbb(AMD64GeneralRegister8 destination, byte imm8) {
        assemble0065((byte) 0x80, (byte) 0x03, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5584, Serial#: 2096
    public void sbb(AMD64GeneralRegister8 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0066((byte) 0x1A, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 5585, Serial#: 2095
    public void sbb(AMD64GeneralRegister8 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0067((byte) 0x1A, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5586, Serial#: 2092
    public void sbb(AMD64GeneralRegister8 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0068((byte) 0x1A, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 5587, Serial#: 2063
    public void sbb(AMD64GeneralRegister8 destination, AMD64GeneralRegister8 source) {
        assemble0069((byte) 0x18, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 5588, Serial#: 2091
    public void sbb(AMD64GeneralRegister8 destination, AMD64IndirectRegister64 source) {
        assemble0070((byte) 0x1A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 5589, Serial#: 2094
    public void rip_sbb(AMD64GeneralRegister8 destination, int rel32) {
        assemble0071((byte) 0x1A, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5590, Serial#: 2098
    public void sbb(AMD64GeneralRegister8 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0072((byte) 0x1A, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5591, Serial#: 2093
    public void m_sbb(AMD64GeneralRegister8 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0073((byte) 0x1A, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 5592, Serial#: 2097
    public void sbb(AMD64GeneralRegister8 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0074((byte) 0x1A, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbb  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5593, Serial#: 333
    public void sbbb(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0075((byte) 0x80, (byte) 0x03, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbl  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5594, Serial#: 621
    public void sbbl(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0075((byte) 0x83, (byte) 0x03, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5595, Serial#: 693
    public void sbbq(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0076((byte) 0x83, (byte) 0x03, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5596, Serial#: 765
    public void sbbw(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0077((byte) 0x83, (byte) 0x03, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 5597, Serial#: 2082
    public void sbb(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0078((byte) 0x19, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 5598, Serial#: 2064
    public void sbb(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0079((byte) 0x19, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 5599, Serial#: 2073
    public void sbb(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0080((byte) 0x19, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>source</i>
     */
    // Template#: 5600, Serial#: 2055
    public void sbb(AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0081((byte) 0x18, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbl  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 5601, Serial#: 405
    public void sbbl(AMD64IndirectRegister64 destination, int imm32) {
        assemble0082((byte) 0x81, (byte) 0x03, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbq  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 5602, Serial#: 477
    public void sbbq(AMD64IndirectRegister64 destination, int imm32) {
        assemble0083((byte) 0x81, (byte) 0x03, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbw  }<i>destination</i>, <i>imm16</i>
     */
    // Template#: 5603, Serial#: 549
    public void sbbw(AMD64IndirectRegister64 destination, short imm16) {
        assemble0084((byte) 0x81, (byte) 0x03, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>imm32</i>
     */
    // Template#: 5604, Serial#: 2124
    public void sbb_EAX(int imm32) {
        assemble0085((byte) 0x1D, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>imm32</i>
     */
    // Template#: 5605, Serial#: 2125
    public void sbb_RAX(int imm32) {
        assemble0086((byte) 0x1D, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbb  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 5606, Serial#: 336
    public void rip_sbbb(int rel32, byte imm8) {
        assemble0087((byte) 0x80, (byte) 0x03, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbl  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 5607, Serial#: 624
    public void rip_sbbl(int rel32, byte imm8) {
        assemble0087((byte) 0x83, (byte) 0x03, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbq  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 5608, Serial#: 696
    public void rip_sbbq(int rel32, byte imm8) {
        assemble0088((byte) 0x83, (byte) 0x03, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbw  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 5609, Serial#: 768
    public void rip_sbbw(int rel32, byte imm8) {
        assemble0089((byte) 0x83, (byte) 0x03, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5610, Serial#: 376
    public void sbbb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0090((byte) 0x80, (byte) 0x03, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5611, Serial#: 664
    public void sbbl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0090((byte) 0x83, (byte) 0x03, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5612, Serial#: 736
    public void sbbq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0091((byte) 0x83, (byte) 0x03, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5613, Serial#: 808
    public void sbbw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0092((byte) 0x83, (byte) 0x03, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 5614, Serial#: 2089
    public void sbb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0093((byte) 0x19, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 5615, Serial#: 2071
    public void sbb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0094((byte) 0x19, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 5616, Serial#: 2080
    public void sbb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0095((byte) 0x19, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 5617, Serial#: 2062
    public void sbb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0096((byte) 0x18, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 5618, Serial#: 448
    public void sbbl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0097((byte) 0x81, (byte) 0x03, disp32, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 5619, Serial#: 520
    public void sbbq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0098((byte) 0x81, (byte) 0x03, disp32, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 5620, Serial#: 592
    public void sbbw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0099((byte) 0x81, (byte) 0x03, disp32, base, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 5621, Serial#: 2085
    public void rip_sbb(int rel32, AMD64GeneralRegister16 source) {
        assemble0100((byte) 0x19, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 5622, Serial#: 2067
    public void rip_sbb(int rel32, AMD64GeneralRegister32 source) {
        assemble0101((byte) 0x19, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 5623, Serial#: 2076
    public void rip_sbb(int rel32, AMD64GeneralRegister64 source) {
        assemble0102((byte) 0x19, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 5624, Serial#: 2058
    public void rip_sbb(int rel32, AMD64GeneralRegister8 source) {
        assemble0103((byte) 0x18, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbb  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5625, Serial#: 335
    public void m_sbbb(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0104((byte) 0x80, (byte) 0x03, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbl  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5626, Serial#: 623
    public void m_sbbl(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0104((byte) 0x83, (byte) 0x03, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbq  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5627, Serial#: 695
    public void m_sbbq(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0105((byte) 0x83, (byte) 0x03, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbw  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5628, Serial#: 767
    public void m_sbbw(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0106((byte) 0x83, (byte) 0x03, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 5629, Serial#: 2084
    public void m_sbb(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0107((byte) 0x19, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 5630, Serial#: 2066
    public void m_sbb(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0108((byte) 0x19, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 5631, Serial#: 2075
    public void m_sbb(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0109((byte) 0x19, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 5632, Serial#: 2057
    public void m_sbb(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0110((byte) 0x18, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbl  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 5633, Serial#: 407
    public void m_sbbl(int m32, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0111((byte) 0x81, (byte) 0x03, m32, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbq  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 5634, Serial#: 479
    public void m_sbbq(int m32, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0112((byte) 0x81, (byte) 0x03, m32, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbw  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 5635, Serial#: 551
    public void m_sbbw(int m32, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0113((byte) 0x81, (byte) 0x03, m32, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbb  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5636, Serial#: 375
    public void sbbb(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0114((byte) 0x80, (byte) 0x03, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbl  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5637, Serial#: 663
    public void sbbl(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0114((byte) 0x83, (byte) 0x03, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbq  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5638, Serial#: 735
    public void sbbq(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0115((byte) 0x83, (byte) 0x03, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbw  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5639, Serial#: 807
    public void sbbw(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0116((byte) 0x83, (byte) 0x03, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 5640, Serial#: 2088
    public void sbb(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0117((byte) 0x19, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 5641, Serial#: 2070
    public void sbb(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0118((byte) 0x19, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 5642, Serial#: 2079
    public void sbb(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0119((byte) 0x19, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 5643, Serial#: 2061
    public void sbb(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0120((byte) 0x18, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbl  }<i>disp32</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 5644, Serial#: 447
    public void sbbl(int disp32, AMD64IndirectRegister64 destination, int imm32) {
        assemble0121((byte) 0x81, (byte) 0x03, disp32, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbq  }<i>disp32</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 5645, Serial#: 519
    public void sbbq(int disp32, AMD64IndirectRegister64 destination, int imm32) {
        assemble0122((byte) 0x81, (byte) 0x03, disp32, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbw  }<i>disp32</i>, <i>destination</i>, <i>imm16</i>
     */
    // Template#: 5646, Serial#: 591
    public void sbbw(int disp32, AMD64IndirectRegister64 destination, short imm16) {
        assemble0123((byte) 0x81, (byte) 0x03, disp32, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbl  }<i>rel32</i>, <i>imm32</i>
     */
    // Template#: 5647, Serial#: 408
    public void rip_sbbl(int rel32, int imm32) {
        assemble0124((byte) 0x81, (byte) 0x03, rel32, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbq  }<i>rel32</i>, <i>imm32</i>
     */
    // Template#: 5648, Serial#: 480
    public void rip_sbbq(int rel32, int imm32) {
        assemble0125((byte) 0x81, (byte) 0x03, rel32, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbw  }<i>rel32</i>, <i>imm16</i>
     */
    // Template#: 5649, Serial#: 552
    public void rip_sbbw(int rel32, short imm16) {
        assemble0126((byte) 0x81, (byte) 0x03, rel32, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>imm16</i>
     */
    // Template#: 5650, Serial#: 2126
    public void sbb_AX(short imm16) {
        assemble0127((byte) 0x1D, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code scasb  }
     */
    // Template#: 5651, Serial#: 2487
    public void scasb() {
        assemble0146((byte) 0xAE);
    }

    /**
     * Pseudo-external assembler syntax: {@code scasl  }
     */
    // Template#: 5652, Serial#: 2488
    public void scasl() {
        assemble0146((byte) 0xAF);
    }

    /**
     * Pseudo-external assembler syntax: {@code scasq  }
     */
    // Template#: 5653, Serial#: 2489
    public void scasq() {
        assemble0243((byte) 0xAF);
    }

    /**
     * Pseudo-external assembler syntax: {@code scasw  }
     */
    // Template#: 5654, Serial#: 2490
    public void scasw() {
        assemble0271((byte) 0xAF);
    }

    /**
     * Pseudo-external assembler syntax: {@code seg_cs  }
     */
    // Template#: 5655, Serial#: 2199
    public void seg_cs() {
        assemble0146((byte) 0x2E);
    }

    /**
     * Pseudo-external assembler syntax: {@code seg_fs  }
     */
    // Template#: 5656, Serial#: 309
    public void seg_fs() {
        assemble0146((byte) 0x64);
    }

    /**
     * Pseudo-external assembler syntax: {@code seg_gs  }
     */
    // Template#: 5657, Serial#: 310
    public void seg_gs() {
        assemble0146((byte) 0x65);
    }

    /**
     * Pseudo-external assembler syntax: {@code setb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5658, Serial#: 4090
    public void setb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0688((byte) 0x92, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setb  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5659, Serial#: 4089
    public void setb(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0689((byte) 0x92, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setb  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5660, Serial#: 4086
    public void setb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0690((byte) 0x92, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setb  }<i>destination</i>
     */
    // Template#: 5661, Serial#: 4093
    public void setb(AMD64GeneralRegister8 destination) {
        assemble0691((byte) 0x92, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setb  }<i>destination</i>
     */
    // Template#: 5662, Serial#: 4085
    public void setb(AMD64IndirectRegister64 destination) {
        assemble0692((byte) 0x92, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setb  }<i>rel32</i>
     */
    // Template#: 5663, Serial#: 4088
    public void rip_setb(int rel32) {
        assemble0693((byte) 0x92, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code setb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5664, Serial#: 4092
    public void setb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0694((byte) 0x92, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setb  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5665, Serial#: 4087
    public void m_setb(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0695((byte) 0x92, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setb  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5666, Serial#: 4091
    public void setb(int disp32, AMD64IndirectRegister64 destination) {
        assemble0696((byte) 0x92, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setbe  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5667, Serial#: 4126
    public void setbe(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0688((byte) 0x96, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setbe  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5668, Serial#: 4125
    public void setbe(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0689((byte) 0x96, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setbe  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5669, Serial#: 4122
    public void setbe(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0690((byte) 0x96, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setbe  }<i>destination</i>
     */
    // Template#: 5670, Serial#: 4129
    public void setbe(AMD64GeneralRegister8 destination) {
        assemble0691((byte) 0x96, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setbe  }<i>destination</i>
     */
    // Template#: 5671, Serial#: 4121
    public void setbe(AMD64IndirectRegister64 destination) {
        assemble0692((byte) 0x96, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setbe  }<i>rel32</i>
     */
    // Template#: 5672, Serial#: 4124
    public void rip_setbe(int rel32) {
        assemble0693((byte) 0x96, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code setbe  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5673, Serial#: 4128
    public void setbe(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0694((byte) 0x96, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setbe  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5674, Serial#: 4123
    public void m_setbe(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0695((byte) 0x96, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setbe  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5675, Serial#: 4127
    public void setbe(int disp32, AMD64IndirectRegister64 destination) {
        assemble0696((byte) 0x96, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5676, Serial#: 5947
    public void setl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0688((byte) 0x9C, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setl  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5677, Serial#: 5946
    public void setl(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0689((byte) 0x9C, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setl  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5678, Serial#: 5943
    public void setl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0690((byte) 0x9C, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setl  }<i>destination</i>
     */
    // Template#: 5679, Serial#: 5950
    public void setl(AMD64GeneralRegister8 destination) {
        assemble0691((byte) 0x9C, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setl  }<i>destination</i>
     */
    // Template#: 5680, Serial#: 5942
    public void setl(AMD64IndirectRegister64 destination) {
        assemble0692((byte) 0x9C, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setl  }<i>rel32</i>
     */
    // Template#: 5681, Serial#: 5945
    public void rip_setl(int rel32) {
        assemble0693((byte) 0x9C, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code setl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5682, Serial#: 5949
    public void setl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0694((byte) 0x9C, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setl  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5683, Serial#: 5944
    public void m_setl(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0695((byte) 0x9C, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setl  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5684, Serial#: 5948
    public void setl(int disp32, AMD64IndirectRegister64 destination) {
        assemble0696((byte) 0x9C, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setle  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5685, Serial#: 5965
    public void setle(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0688((byte) 0x9E, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setle  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5686, Serial#: 5964
    public void setle(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0689((byte) 0x9E, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setle  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5687, Serial#: 5961
    public void setle(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0690((byte) 0x9E, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setle  }<i>destination</i>
     */
    // Template#: 5688, Serial#: 5968
    public void setle(AMD64GeneralRegister8 destination) {
        assemble0691((byte) 0x9E, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setle  }<i>destination</i>
     */
    // Template#: 5689, Serial#: 5960
    public void setle(AMD64IndirectRegister64 destination) {
        assemble0692((byte) 0x9E, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setle  }<i>rel32</i>
     */
    // Template#: 5690, Serial#: 5963
    public void rip_setle(int rel32) {
        assemble0693((byte) 0x9E, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code setle  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5691, Serial#: 5967
    public void setle(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0694((byte) 0x9E, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setle  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5692, Serial#: 5962
    public void m_setle(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0695((byte) 0x9E, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setle  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5693, Serial#: 5966
    public void setle(int disp32, AMD64IndirectRegister64 destination) {
        assemble0696((byte) 0x9E, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5694, Serial#: 4099
    public void setnb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0688((byte) 0x93, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnb  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5695, Serial#: 4098
    public void setnb(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0689((byte) 0x93, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnb  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5696, Serial#: 4095
    public void setnb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0690((byte) 0x93, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnb  }<i>destination</i>
     */
    // Template#: 5697, Serial#: 4102
    public void setnb(AMD64GeneralRegister8 destination) {
        assemble0691((byte) 0x93, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnb  }<i>destination</i>
     */
    // Template#: 5698, Serial#: 4094
    public void setnb(AMD64IndirectRegister64 destination) {
        assemble0692((byte) 0x93, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnb  }<i>rel32</i>
     */
    // Template#: 5699, Serial#: 4097
    public void rip_setnb(int rel32) {
        assemble0693((byte) 0x93, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5700, Serial#: 4101
    public void setnb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0694((byte) 0x93, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnb  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5701, Serial#: 4096
    public void m_setnb(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0695((byte) 0x93, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnb  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5702, Serial#: 4100
    public void setnb(int disp32, AMD64IndirectRegister64 destination) {
        assemble0696((byte) 0x93, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnbe  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5703, Serial#: 4135
    public void setnbe(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0688((byte) 0x97, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnbe  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5704, Serial#: 4134
    public void setnbe(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0689((byte) 0x97, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnbe  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5705, Serial#: 4131
    public void setnbe(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0690((byte) 0x97, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnbe  }<i>destination</i>
     */
    // Template#: 5706, Serial#: 4138
    public void setnbe(AMD64GeneralRegister8 destination) {
        assemble0691((byte) 0x97, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnbe  }<i>destination</i>
     */
    // Template#: 5707, Serial#: 4130
    public void setnbe(AMD64IndirectRegister64 destination) {
        assemble0692((byte) 0x97, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnbe  }<i>rel32</i>
     */
    // Template#: 5708, Serial#: 4133
    public void rip_setnbe(int rel32) {
        assemble0693((byte) 0x97, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnbe  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5709, Serial#: 4137
    public void setnbe(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0694((byte) 0x97, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnbe  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5710, Serial#: 4132
    public void m_setnbe(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0695((byte) 0x97, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnbe  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5711, Serial#: 4136
    public void setnbe(int disp32, AMD64IndirectRegister64 destination) {
        assemble0696((byte) 0x97, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5712, Serial#: 5956
    public void setnl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0688((byte) 0x9D, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnl  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5713, Serial#: 5955
    public void setnl(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0689((byte) 0x9D, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnl  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5714, Serial#: 5952
    public void setnl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0690((byte) 0x9D, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnl  }<i>destination</i>
     */
    // Template#: 5715, Serial#: 5959
    public void setnl(AMD64GeneralRegister8 destination) {
        assemble0691((byte) 0x9D, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnl  }<i>destination</i>
     */
    // Template#: 5716, Serial#: 5951
    public void setnl(AMD64IndirectRegister64 destination) {
        assemble0692((byte) 0x9D, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnl  }<i>rel32</i>
     */
    // Template#: 5717, Serial#: 5954
    public void rip_setnl(int rel32) {
        assemble0693((byte) 0x9D, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5718, Serial#: 5958
    public void setnl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0694((byte) 0x9D, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnl  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5719, Serial#: 5953
    public void m_setnl(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0695((byte) 0x9D, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnl  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5720, Serial#: 5957
    public void setnl(int disp32, AMD64IndirectRegister64 destination) {
        assemble0696((byte) 0x9D, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnle  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5721, Serial#: 5974
    public void setnle(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0688((byte) 0x9F, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnle  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5722, Serial#: 5973
    public void setnle(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0689((byte) 0x9F, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnle  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5723, Serial#: 5970
    public void setnle(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0690((byte) 0x9F, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnle  }<i>destination</i>
     */
    // Template#: 5724, Serial#: 5977
    public void setnle(AMD64GeneralRegister8 destination) {
        assemble0691((byte) 0x9F, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnle  }<i>destination</i>
     */
    // Template#: 5725, Serial#: 5969
    public void setnle(AMD64IndirectRegister64 destination) {
        assemble0692((byte) 0x9F, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnle  }<i>rel32</i>
     */
    // Template#: 5726, Serial#: 5972
    public void rip_setnle(int rel32) {
        assemble0693((byte) 0x9F, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnle  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5727, Serial#: 5976
    public void setnle(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0694((byte) 0x9F, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnle  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5728, Serial#: 5971
    public void m_setnle(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0695((byte) 0x9F, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnle  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5729, Serial#: 5975
    public void setnle(int disp32, AMD64IndirectRegister64 destination) {
        assemble0696((byte) 0x9F, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setno  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5730, Serial#: 4081
    public void setno(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0688((byte) 0x91, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setno  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5731, Serial#: 4080
    public void setno(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0689((byte) 0x91, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setno  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5732, Serial#: 4077
    public void setno(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0690((byte) 0x91, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setno  }<i>destination</i>
     */
    // Template#: 5733, Serial#: 4084
    public void setno(AMD64GeneralRegister8 destination) {
        assemble0691((byte) 0x91, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setno  }<i>destination</i>
     */
    // Template#: 5734, Serial#: 4076
    public void setno(AMD64IndirectRegister64 destination) {
        assemble0692((byte) 0x91, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setno  }<i>rel32</i>
     */
    // Template#: 5735, Serial#: 4079
    public void rip_setno(int rel32) {
        assemble0693((byte) 0x91, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code setno  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5736, Serial#: 4083
    public void setno(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0694((byte) 0x91, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setno  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5737, Serial#: 4078
    public void m_setno(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0695((byte) 0x91, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setno  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5738, Serial#: 4082
    public void setno(int disp32, AMD64IndirectRegister64 destination) {
        assemble0696((byte) 0x91, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnp  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5739, Serial#: 5938
    public void setnp(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0688((byte) 0x9B, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnp  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5740, Serial#: 5937
    public void setnp(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0689((byte) 0x9B, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnp  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5741, Serial#: 5934
    public void setnp(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0690((byte) 0x9B, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnp  }<i>destination</i>
     */
    // Template#: 5742, Serial#: 5941
    public void setnp(AMD64GeneralRegister8 destination) {
        assemble0691((byte) 0x9B, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnp  }<i>destination</i>
     */
    // Template#: 5743, Serial#: 5933
    public void setnp(AMD64IndirectRegister64 destination) {
        assemble0692((byte) 0x9B, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnp  }<i>rel32</i>
     */
    // Template#: 5744, Serial#: 5936
    public void rip_setnp(int rel32) {
        assemble0693((byte) 0x9B, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnp  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5745, Serial#: 5940
    public void setnp(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0694((byte) 0x9B, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnp  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5746, Serial#: 5935
    public void m_setnp(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0695((byte) 0x9B, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnp  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5747, Serial#: 5939
    public void setnp(int disp32, AMD64IndirectRegister64 destination) {
        assemble0696((byte) 0x9B, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setns  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5748, Serial#: 5920
    public void setns(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0688((byte) 0x99, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setns  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5749, Serial#: 5919
    public void setns(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0689((byte) 0x99, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setns  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5750, Serial#: 5916
    public void setns(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0690((byte) 0x99, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setns  }<i>destination</i>
     */
    // Template#: 5751, Serial#: 5923
    public void setns(AMD64GeneralRegister8 destination) {
        assemble0691((byte) 0x99, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setns  }<i>destination</i>
     */
    // Template#: 5752, Serial#: 5915
    public void setns(AMD64IndirectRegister64 destination) {
        assemble0692((byte) 0x99, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setns  }<i>rel32</i>
     */
    // Template#: 5753, Serial#: 5918
    public void rip_setns(int rel32) {
        assemble0693((byte) 0x99, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code setns  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5754, Serial#: 5922
    public void setns(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0694((byte) 0x99, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setns  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5755, Serial#: 5917
    public void m_setns(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0695((byte) 0x99, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setns  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5756, Serial#: 5921
    public void setns(int disp32, AMD64IndirectRegister64 destination) {
        assemble0696((byte) 0x99, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnz  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5757, Serial#: 4117
    public void setnz(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0688((byte) 0x95, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnz  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5758, Serial#: 4116
    public void setnz(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0689((byte) 0x95, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnz  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5759, Serial#: 4113
    public void setnz(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0690((byte) 0x95, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnz  }<i>destination</i>
     */
    // Template#: 5760, Serial#: 4120
    public void setnz(AMD64GeneralRegister8 destination) {
        assemble0691((byte) 0x95, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnz  }<i>destination</i>
     */
    // Template#: 5761, Serial#: 4112
    public void setnz(AMD64IndirectRegister64 destination) {
        assemble0692((byte) 0x95, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnz  }<i>rel32</i>
     */
    // Template#: 5762, Serial#: 4115
    public void rip_setnz(int rel32) {
        assemble0693((byte) 0x95, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnz  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5763, Serial#: 4119
    public void setnz(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0694((byte) 0x95, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnz  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5764, Serial#: 4114
    public void m_setnz(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0695((byte) 0x95, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnz  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5765, Serial#: 4118
    public void setnz(int disp32, AMD64IndirectRegister64 destination) {
        assemble0696((byte) 0x95, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code seto  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5766, Serial#: 4072
    public void seto(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0688((byte) 0x90, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code seto  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5767, Serial#: 4071
    public void seto(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0689((byte) 0x90, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code seto  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5768, Serial#: 4068
    public void seto(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0690((byte) 0x90, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code seto  }<i>destination</i>
     */
    // Template#: 5769, Serial#: 4075
    public void seto(AMD64GeneralRegister8 destination) {
        assemble0691((byte) 0x90, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code seto  }<i>destination</i>
     */
    // Template#: 5770, Serial#: 4067
    public void seto(AMD64IndirectRegister64 destination) {
        assemble0692((byte) 0x90, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code seto  }<i>rel32</i>
     */
    // Template#: 5771, Serial#: 4070
    public void rip_seto(int rel32) {
        assemble0693((byte) 0x90, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code seto  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5772, Serial#: 4074
    public void seto(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0694((byte) 0x90, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code seto  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5773, Serial#: 4069
    public void m_seto(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0695((byte) 0x90, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code seto  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5774, Serial#: 4073
    public void seto(int disp32, AMD64IndirectRegister64 destination) {
        assemble0696((byte) 0x90, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setp  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5775, Serial#: 5929
    public void setp(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0688((byte) 0x9A, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setp  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5776, Serial#: 5928
    public void setp(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0689((byte) 0x9A, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setp  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5777, Serial#: 5925
    public void setp(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0690((byte) 0x9A, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setp  }<i>destination</i>
     */
    // Template#: 5778, Serial#: 5932
    public void setp(AMD64GeneralRegister8 destination) {
        assemble0691((byte) 0x9A, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setp  }<i>destination</i>
     */
    // Template#: 5779, Serial#: 5924
    public void setp(AMD64IndirectRegister64 destination) {
        assemble0692((byte) 0x9A, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setp  }<i>rel32</i>
     */
    // Template#: 5780, Serial#: 5927
    public void rip_setp(int rel32) {
        assemble0693((byte) 0x9A, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code setp  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5781, Serial#: 5931
    public void setp(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0694((byte) 0x9A, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setp  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5782, Serial#: 5926
    public void m_setp(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0695((byte) 0x9A, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setp  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5783, Serial#: 5930
    public void setp(int disp32, AMD64IndirectRegister64 destination) {
        assemble0696((byte) 0x9A, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sets  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5784, Serial#: 5911
    public void sets(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0688((byte) 0x98, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sets  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5785, Serial#: 5910
    public void sets(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0689((byte) 0x98, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sets  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5786, Serial#: 5907
    public void sets(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0690((byte) 0x98, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sets  }<i>destination</i>
     */
    // Template#: 5787, Serial#: 5914
    public void sets(AMD64GeneralRegister8 destination) {
        assemble0691((byte) 0x98, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sets  }<i>destination</i>
     */
    // Template#: 5788, Serial#: 5906
    public void sets(AMD64IndirectRegister64 destination) {
        assemble0692((byte) 0x98, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sets  }<i>rel32</i>
     */
    // Template#: 5789, Serial#: 5909
    public void rip_sets(int rel32) {
        assemble0693((byte) 0x98, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sets  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5790, Serial#: 5913
    public void sets(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0694((byte) 0x98, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sets  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5791, Serial#: 5908
    public void m_sets(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0695((byte) 0x98, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sets  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5792, Serial#: 5912
    public void sets(int disp32, AMD64IndirectRegister64 destination) {
        assemble0696((byte) 0x98, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setz  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5793, Serial#: 4108
    public void setz(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0688((byte) 0x94, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setz  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5794, Serial#: 4107
    public void setz(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0689((byte) 0x94, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setz  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5795, Serial#: 4104
    public void setz(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0690((byte) 0x94, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setz  }<i>destination</i>
     */
    // Template#: 5796, Serial#: 4111
    public void setz(AMD64GeneralRegister8 destination) {
        assemble0691((byte) 0x94, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setz  }<i>destination</i>
     */
    // Template#: 5797, Serial#: 4103
    public void setz(AMD64IndirectRegister64 destination) {
        assemble0692((byte) 0x94, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code setz  }<i>rel32</i>
     */
    // Template#: 5798, Serial#: 4106
    public void rip_setz(int rel32) {
        assemble0693((byte) 0x94, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code setz  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5799, Serial#: 4110
    public void setz(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0694((byte) 0x94, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setz  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5800, Serial#: 4105
    public void m_setz(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0695((byte) 0x94, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code setz  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5801, Serial#: 4109
    public void setz(int disp32, AMD64IndirectRegister64 destination) {
        assemble0696((byte) 0x94, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sfence  }
     */
    // Template#: 5802, Serial#: 6104
    public void sfence() {
        assemble0466((byte) 0xAE, (byte) 0x07);
    }

    /**
     * Pseudo-external assembler syntax: {@code sgdt  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5803, Serial#: 3161
    public void sgdt(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0244((byte) 0x01, (byte) 0x00, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sgdt  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5804, Serial#: 3160
    public void sgdt(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0245((byte) 0x01, (byte) 0x00, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sgdt  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5805, Serial#: 3133
    public void sgdt(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0246((byte) 0x01, (byte) 0x00, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sgdt  }<i>destination</i>
     */
    // Template#: 5806, Serial#: 3132
    public void sgdt(AMD64IndirectRegister64 destination) {
        assemble0247((byte) 0x01, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sgdt  }<i>rel32</i>
     */
    // Template#: 5807, Serial#: 3135
    public void rip_sgdt(int rel32) {
        assemble0248((byte) 0x01, (byte) 0x00, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sgdt  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5808, Serial#: 3175
    public void sgdt(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0249((byte) 0x01, (byte) 0x00, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sgdt  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5809, Serial#: 3134
    public void m_sgdt(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0250((byte) 0x01, (byte) 0x00, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sgdt  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5810, Serial#: 3174
    public void sgdt(int disp32, AMD64IndirectRegister64 destination) {
        assemble0251((byte) 0x01, (byte) 0x00, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5811, Serial#: 1245
    public void shlb___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD0, (byte) 0x04, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shll  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5812, Serial#: 1308
    public void shll___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD1, (byte) 0x04, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5813, Serial#: 1371
    public void shlq___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0375((byte) 0xD1, (byte) 0x04, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5814, Serial#: 1434
    public void shlw___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0376((byte) 0xD1, (byte) 0x04, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5815, Serial#: 1497
    public void shlb___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD2, (byte) 0x04, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shll  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5816, Serial#: 1560
    public void shll___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD3, (byte) 0x04, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5817, Serial#: 1623
    public void shlq___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0375((byte) 0xD3, (byte) 0x04, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5818, Serial#: 1686
    public void shlw___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0376((byte) 0xD3, (byte) 0x04, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5819, Serial#: 955
    public void shlb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0002((byte) 0xC0, (byte) 0x04, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shll  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5820, Serial#: 1018
    public void shll(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0002((byte) 0xC1, (byte) 0x04, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5821, Serial#: 1081
    public void shlq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0003((byte) 0xC1, (byte) 0x04, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5822, Serial#: 1144
    public void shlw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0004((byte) 0xC1, (byte) 0x04, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlb  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5823, Serial#: 1244
    public void shlb___1(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD0, (byte) 0x04, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shll  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5824, Serial#: 1307
    public void shll___1(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD1, (byte) 0x04, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlq  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5825, Serial#: 1370
    public void shlq___1(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0377((byte) 0xD1, (byte) 0x04, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlw  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5826, Serial#: 1433
    public void shlw___1(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0378((byte) 0xD1, (byte) 0x04, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlb  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5827, Serial#: 1496
    public void shlb___CL(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD2, (byte) 0x04, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shll  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5828, Serial#: 1559
    public void shll___CL(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD3, (byte) 0x04, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlq  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5829, Serial#: 1622
    public void shlq___CL(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0377((byte) 0xD3, (byte) 0x04, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlw  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5830, Serial#: 1685
    public void shlw___CL(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0378((byte) 0xD3, (byte) 0x04, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlb  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5831, Serial#: 954
    public void shlb(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0012((byte) 0xC0, (byte) 0x04, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shll  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5832, Serial#: 1017
    public void shll(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0012((byte) 0xC1, (byte) 0x04, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlq  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5833, Serial#: 1080
    public void shlq(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0013((byte) 0xC1, (byte) 0x04, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlw  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5834, Serial#: 1143
    public void shlw(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0014((byte) 0xC1, (byte) 0x04, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlb  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5835, Serial#: 1225
    public void shlb___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD0, (byte) 0x04, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shll  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5836, Serial#: 1288
    public void shll___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD1, (byte) 0x04, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlq  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5837, Serial#: 1351
    public void shlq___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0379((byte) 0xD1, (byte) 0x04, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlw  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5838, Serial#: 1414
    public void shlw___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0380((byte) 0xD1, (byte) 0x04, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlb  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5839, Serial#: 1477
    public void shlb___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD2, (byte) 0x04, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shll  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5840, Serial#: 1540
    public void shll___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD3, (byte) 0x04, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlq  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5841, Serial#: 1603
    public void shlq___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0379((byte) 0xD3, (byte) 0x04, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlw  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5842, Serial#: 1666
    public void shlw___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0380((byte) 0xD3, (byte) 0x04, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlb  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5843, Serial#: 935
    public void shlb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0022((byte) 0xC0, (byte) 0x04, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shll  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5844, Serial#: 998
    public void shll(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0022((byte) 0xC1, (byte) 0x04, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlq  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5845, Serial#: 1061
    public void shlq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0023((byte) 0xC1, (byte) 0x04, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlw  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5846, Serial#: 1124
    public void shlw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0024((byte) 0xC1, (byte) 0x04, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlw  }<i>destination</i>
     */
    // Template#: 5847, Serial#: 1457
    public void shlw___1(AMD64GeneralRegister16 destination) {
        assemble0235((byte) 0xD1, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlw  }<i>destination</i>
     */
    // Template#: 5848, Serial#: 1709
    public void shlw___CL(AMD64GeneralRegister16 destination) {
        assemble0235((byte) 0xD3, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5849, Serial#: 1167
    public void shlw(AMD64GeneralRegister16 destination, byte imm8) {
        assemble0032((byte) 0xC1, (byte) 0x04, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shll  }<i>destination</i>
     */
    // Template#: 5850, Serial#: 1331
    public void shll___1(AMD64GeneralRegister32 destination) {
        assemble0381((byte) 0xD1, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shll  }<i>destination</i>
     */
    // Template#: 5851, Serial#: 1583
    public void shll___CL(AMD64GeneralRegister32 destination) {
        assemble0381((byte) 0xD3, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shll  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5852, Serial#: 1041
    public void shll(AMD64GeneralRegister32 destination, byte imm8) {
        assemble0043((byte) 0xC1, (byte) 0x04, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlq  }<i>destination</i>
     */
    // Template#: 5853, Serial#: 1394
    public void shlq___1(AMD64GeneralRegister64 destination) {
        assemble0382((byte) 0xD1, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlq  }<i>destination</i>
     */
    // Template#: 5854, Serial#: 1646
    public void shlq___CL(AMD64GeneralRegister64 destination) {
        assemble0382((byte) 0xD3, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5855, Serial#: 1104
    public void shlq(AMD64GeneralRegister64 destination, byte imm8) {
        assemble0054((byte) 0xC1, (byte) 0x04, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlb  }<i>destination</i>
     */
    // Template#: 5856, Serial#: 1268
    public void shlb___1(AMD64GeneralRegister8 destination) {
        assemble0383((byte) 0xD0, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlb  }<i>destination</i>
     */
    // Template#: 5857, Serial#: 1520
    public void shlb___CL(AMD64GeneralRegister8 destination) {
        assemble0383((byte) 0xD2, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlb  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5858, Serial#: 978
    public void shlb(AMD64GeneralRegister8 destination, byte imm8) {
        assemble0065((byte) 0xC0, (byte) 0x04, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlb  }<i>destination</i>
     */
    // Template#: 5859, Serial#: 1224
    public void shlb___1(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD0, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shll  }<i>destination</i>
     */
    // Template#: 5860, Serial#: 1287
    public void shll___1(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD1, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlq  }<i>destination</i>
     */
    // Template#: 5861, Serial#: 1350
    public void shlq___1(AMD64IndirectRegister64 destination) {
        assemble0384((byte) 0xD1, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlw  }<i>destination</i>
     */
    // Template#: 5862, Serial#: 1413
    public void shlw___1(AMD64IndirectRegister64 destination) {
        assemble0385((byte) 0xD1, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlb  }<i>destination</i>
     */
    // Template#: 5863, Serial#: 1476
    public void shlb___CL(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD2, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shll  }<i>destination</i>
     */
    // Template#: 5864, Serial#: 1539
    public void shll___CL(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD3, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlq  }<i>destination</i>
     */
    // Template#: 5865, Serial#: 1602
    public void shlq___CL(AMD64IndirectRegister64 destination) {
        assemble0384((byte) 0xD3, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlw  }<i>destination</i>
     */
    // Template#: 5866, Serial#: 1665
    public void shlw___CL(AMD64IndirectRegister64 destination) {
        assemble0385((byte) 0xD3, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlb  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5867, Serial#: 934
    public void shlb(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0075((byte) 0xC0, (byte) 0x04, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shll  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5868, Serial#: 997
    public void shll(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0075((byte) 0xC1, (byte) 0x04, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5869, Serial#: 1060
    public void shlq(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0076((byte) 0xC1, (byte) 0x04, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 5870, Serial#: 1123
    public void shlw(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0077((byte) 0xC1, (byte) 0x04, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlb  }<i>rel32</i>
     */
    // Template#: 5871, Serial#: 1227
    public void rip_shlb___1(int rel32) {
        assemble0239((byte) 0xD0, (byte) 0x04, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code shll  }<i>rel32</i>
     */
    // Template#: 5872, Serial#: 1290
    public void rip_shll___1(int rel32) {
        assemble0239((byte) 0xD1, (byte) 0x04, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlq  }<i>rel32</i>
     */
    // Template#: 5873, Serial#: 1353
    public void rip_shlq___1(int rel32) {
        assemble0386((byte) 0xD1, (byte) 0x04, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlw  }<i>rel32</i>
     */
    // Template#: 5874, Serial#: 1416
    public void rip_shlw___1(int rel32) {
        assemble0387((byte) 0xD1, (byte) 0x04, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlb  }<i>rel32</i>
     */
    // Template#: 5875, Serial#: 1479
    public void rip_shlb___CL(int rel32) {
        assemble0239((byte) 0xD2, (byte) 0x04, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code shll  }<i>rel32</i>
     */
    // Template#: 5876, Serial#: 1542
    public void rip_shll___CL(int rel32) {
        assemble0239((byte) 0xD3, (byte) 0x04, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlq  }<i>rel32</i>
     */
    // Template#: 5877, Serial#: 1605
    public void rip_shlq___CL(int rel32) {
        assemble0386((byte) 0xD3, (byte) 0x04, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlw  }<i>rel32</i>
     */
    // Template#: 5878, Serial#: 1668
    public void rip_shlw___CL(int rel32) {
        assemble0387((byte) 0xD3, (byte) 0x04, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlb  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 5879, Serial#: 937
    public void rip_shlb(int rel32, byte imm8) {
        assemble0087((byte) 0xC0, (byte) 0x04, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shll  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 5880, Serial#: 1000
    public void rip_shll(int rel32, byte imm8) {
        assemble0087((byte) 0xC1, (byte) 0x04, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlq  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 5881, Serial#: 1063
    public void rip_shlq(int rel32, byte imm8) {
        assemble0088((byte) 0xC1, (byte) 0x04, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlw  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 5882, Serial#: 1126
    public void rip_shlw(int rel32, byte imm8) {
        assemble0089((byte) 0xC1, (byte) 0x04, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5883, Serial#: 1259
    public void shlb___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD0, (byte) 0x04, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shll  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5884, Serial#: 1322
    public void shll___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD1, (byte) 0x04, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5885, Serial#: 1385
    public void shlq___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0388((byte) 0xD1, (byte) 0x04, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5886, Serial#: 1448
    public void shlw___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0389((byte) 0xD1, (byte) 0x04, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5887, Serial#: 1511
    public void shlb___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD2, (byte) 0x04, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shll  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5888, Serial#: 1574
    public void shll___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD3, (byte) 0x04, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5889, Serial#: 1637
    public void shlq___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0388((byte) 0xD3, (byte) 0x04, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5890, Serial#: 1700
    public void shlw___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0389((byte) 0xD3, (byte) 0x04, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5891, Serial#: 969
    public void shlb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0090((byte) 0xC0, (byte) 0x04, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shll  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5892, Serial#: 1032
    public void shll(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0090((byte) 0xC1, (byte) 0x04, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5893, Serial#: 1095
    public void shlq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0091((byte) 0xC1, (byte) 0x04, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5894, Serial#: 1158
    public void shlw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0092((byte) 0xC1, (byte) 0x04, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlb  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5895, Serial#: 1226
    public void m_shlb___1(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD0, (byte) 0x04, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shll  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5896, Serial#: 1289
    public void m_shll___1(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD1, (byte) 0x04, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlq  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5897, Serial#: 1352
    public void m_shlq___1(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0390((byte) 0xD1, (byte) 0x04, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlw  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5898, Serial#: 1415
    public void m_shlw___1(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0391((byte) 0xD1, (byte) 0x04, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlb  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5899, Serial#: 1478
    public void m_shlb___CL(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD2, (byte) 0x04, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shll  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5900, Serial#: 1541
    public void m_shll___CL(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD3, (byte) 0x04, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlq  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5901, Serial#: 1604
    public void m_shlq___CL(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0390((byte) 0xD3, (byte) 0x04, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlw  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5902, Serial#: 1667
    public void m_shlw___CL(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0391((byte) 0xD3, (byte) 0x04, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlb  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5903, Serial#: 936
    public void m_shlb(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0104((byte) 0xC0, (byte) 0x04, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shll  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5904, Serial#: 999
    public void m_shll(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0104((byte) 0xC1, (byte) 0x04, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlq  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5905, Serial#: 1062
    public void m_shlq(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0105((byte) 0xC1, (byte) 0x04, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlw  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5906, Serial#: 1125
    public void m_shlw(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0106((byte) 0xC1, (byte) 0x04, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlb  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5907, Serial#: 1258
    public void shlb___1(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD0, (byte) 0x04, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shll  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5908, Serial#: 1321
    public void shll___1(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD1, (byte) 0x04, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlq  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5909, Serial#: 1384
    public void shlq___1(int disp32, AMD64IndirectRegister64 destination) {
        assemble0392((byte) 0xD1, (byte) 0x04, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlw  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5910, Serial#: 1447
    public void shlw___1(int disp32, AMD64IndirectRegister64 destination) {
        assemble0393((byte) 0xD1, (byte) 0x04, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlb  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5911, Serial#: 1510
    public void shlb___CL(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD2, (byte) 0x04, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shll  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5912, Serial#: 1573
    public void shll___CL(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD3, (byte) 0x04, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlq  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5913, Serial#: 1636
    public void shlq___CL(int disp32, AMD64IndirectRegister64 destination) {
        assemble0392((byte) 0xD3, (byte) 0x04, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlw  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 5914, Serial#: 1699
    public void shlw___CL(int disp32, AMD64IndirectRegister64 destination) {
        assemble0393((byte) 0xD3, (byte) 0x04, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlb  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5915, Serial#: 968
    public void shlb(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0114((byte) 0xC0, (byte) 0x04, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shll  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5916, Serial#: 1031
    public void shll(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0114((byte) 0xC1, (byte) 0x04, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlq  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5917, Serial#: 1094
    public void shlq(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0115((byte) 0xC1, (byte) 0x04, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlw  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5918, Serial#: 1157
    public void shlw(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0116((byte) 0xC1, (byte) 0x04, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 5919, Serial#: 4219
    public void shld_CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0195((byte) 0xA5, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 5920, Serial#: 4192
    public void shld(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source, byte imm8) {
        assemble0697((byte) 0xA4, disp8, base, index, scale, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 5921, Serial#: 4201
    public void shld_CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0196((byte) 0xA5, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 5922, Serial#: 4174
    public void shld(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source, byte imm8) {
        assemble0698((byte) 0xA4, disp8, base, index, scale, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 5923, Serial#: 4210
    public void shld_CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0197((byte) 0xA5, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 5924, Serial#: 4183
    public void shld(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source, byte imm8) {
        assemble0699((byte) 0xA4, disp8, base, index, scale, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 5925, Serial#: 4218
    public void shld_CL(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0199((byte) 0xA5, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>disp8</i>, <i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 5926, Serial#: 4191
    public void shld(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source, byte imm8) {
        assemble0700((byte) 0xA4, disp8, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 5927, Serial#: 4200
    public void shld_CL(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0200((byte) 0xA5, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>disp8</i>, <i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 5928, Serial#: 4173
    public void shld(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source, byte imm8) {
        assemble0701((byte) 0xA4, disp8, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 5929, Serial#: 4209
    public void shld_CL(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0201((byte) 0xA5, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>disp8</i>, <i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 5930, Serial#: 4182
    public void shld(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source, byte imm8) {
        assemble0702((byte) 0xA4, disp8, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 5931, Serial#: 4215
    public void shld_CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0203((byte) 0xA5, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 5932, Serial#: 4188
    public void shld(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source, byte imm8) {
        assemble0703((byte) 0xA4, base, index, scale, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 5933, Serial#: 4197
    public void shld_CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0204((byte) 0xA5, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 5934, Serial#: 4170
    public void shld(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source, byte imm8) {
        assemble0704((byte) 0xA4, base, index, scale, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 5935, Serial#: 4206
    public void shld_CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0205((byte) 0xA5, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 5936, Serial#: 4179
    public void shld(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source, byte imm8) {
        assemble0705((byte) 0xA4, base, index, scale, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>destination</i>, <i>source</i>
     */
    // Template#: 5937, Serial#: 4222
    public void shld_CL(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0207((byte) 0xA5, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 5938, Serial#: 4195
    public void shld(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source, byte imm8) {
        assemble0706((byte) 0xA4, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>destination</i>, <i>source</i>
     */
    // Template#: 5939, Serial#: 4204
    public void shld_CL(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0209((byte) 0xA5, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 5940, Serial#: 4177
    public void shld(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source, byte imm8) {
        assemble0707((byte) 0xA4, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>destination</i>, <i>source</i>
     */
    // Template#: 5941, Serial#: 4213
    public void shld_CL(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0211((byte) 0xA5, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 5942, Serial#: 4186
    public void shld(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source, byte imm8) {
        assemble0708((byte) 0xA4, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>destination</i>, <i>source</i>
     */
    // Template#: 5943, Serial#: 4214
    public void shld_CL(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0213((byte) 0xA5, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 5944, Serial#: 4187
    public void shld(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source, byte imm8) {
        assemble0709((byte) 0xA4, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>destination</i>, <i>source</i>
     */
    // Template#: 5945, Serial#: 4196
    public void shld_CL(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0214((byte) 0xA5, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 5946, Serial#: 4169
    public void shld(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source, byte imm8) {
        assemble0710((byte) 0xA4, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>destination</i>, <i>source</i>
     */
    // Template#: 5947, Serial#: 4205
    public void shld_CL(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0215((byte) 0xA5, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 5948, Serial#: 4178
    public void shld(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source, byte imm8) {
        assemble0711((byte) 0xA4, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 5949, Serial#: 4221
    public void shld_CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0218((byte) 0xA5, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 5950, Serial#: 4194
    public void shld(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source, byte imm8) {
        assemble0712((byte) 0xA4, disp32, base, index, scale, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 5951, Serial#: 4203
    public void shld_CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0219((byte) 0xA5, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 5952, Serial#: 4176
    public void shld(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source, byte imm8) {
        assemble0713((byte) 0xA4, disp32, base, index, scale, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 5953, Serial#: 4212
    public void shld_CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0220((byte) 0xA5, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 5954, Serial#: 4185
    public void shld(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source, byte imm8) {
        assemble0714((byte) 0xA4, disp32, base, index, scale, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 5955, Serial#: 4217
    public void rip_shld_CL(int rel32, AMD64GeneralRegister16 source) {
        assemble0221((byte) 0xA5, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>rel32</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 5956, Serial#: 4190
    public void rip_shld(int rel32, AMD64GeneralRegister16 source, byte imm8) {
        assemble0715((byte) 0xA4, rel32, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 5957, Serial#: 4199
    public void rip_shld_CL(int rel32, AMD64GeneralRegister32 source) {
        assemble0222((byte) 0xA5, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>rel32</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 5958, Serial#: 4172
    public void rip_shld(int rel32, AMD64GeneralRegister32 source, byte imm8) {
        assemble0716((byte) 0xA4, rel32, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 5959, Serial#: 4208
    public void rip_shld_CL(int rel32, AMD64GeneralRegister64 source) {
        assemble0223((byte) 0xA5, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>rel32</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 5960, Serial#: 4181
    public void rip_shld(int rel32, AMD64GeneralRegister64 source, byte imm8) {
        assemble0717((byte) 0xA4, rel32, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 5961, Serial#: 4216
    public void m_shld_CL(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0225((byte) 0xA5, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 5962, Serial#: 4189
    public void m_shld(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source, byte imm8) {
        assemble0718((byte) 0xA4, m32, index, scale, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 5963, Serial#: 4198
    public void m_shld_CL(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0226((byte) 0xA5, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 5964, Serial#: 4171
    public void m_shld(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source, byte imm8) {
        assemble0719((byte) 0xA4, m32, index, scale, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 5965, Serial#: 4207
    public void m_shld_CL(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0227((byte) 0xA5, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 5966, Serial#: 4180
    public void m_shld(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source, byte imm8) {
        assemble0720((byte) 0xA4, m32, index, scale, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 5967, Serial#: 4220
    public void shld_CL(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0229((byte) 0xA5, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>disp32</i>, <i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 5968, Serial#: 4193
    public void shld(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source, byte imm8) {
        assemble0721((byte) 0xA4, disp32, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 5969, Serial#: 4202
    public void shld_CL(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0230((byte) 0xA5, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>disp32</i>, <i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 5970, Serial#: 4175
    public void shld(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source, byte imm8) {
        assemble0722((byte) 0xA4, disp32, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 5971, Serial#: 4211
    public void shld_CL(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0231((byte) 0xA5, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>disp32</i>, <i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 5972, Serial#: 4184
    public void shld(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source, byte imm8) {
        assemble0723((byte) 0xA4, disp32, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5973, Serial#: 1247
    public void shrb___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD0, (byte) 0x05, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5974, Serial#: 1310
    public void shrl___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD1, (byte) 0x05, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5975, Serial#: 1373
    public void shrq___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0375((byte) 0xD1, (byte) 0x05, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5976, Serial#: 1436
    public void shrw___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0376((byte) 0xD1, (byte) 0x05, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5977, Serial#: 1499
    public void shrb___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD2, (byte) 0x05, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5978, Serial#: 1562
    public void shrl___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0232((byte) 0xD3, (byte) 0x05, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5979, Serial#: 1625
    public void shrq___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0375((byte) 0xD3, (byte) 0x05, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5980, Serial#: 1688
    public void shrw___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0376((byte) 0xD3, (byte) 0x05, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5981, Serial#: 957
    public void shrb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0002((byte) 0xC0, (byte) 0x05, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5982, Serial#: 1020
    public void shrl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0002((byte) 0xC1, (byte) 0x05, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5983, Serial#: 1083
    public void shrq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0003((byte) 0xC1, (byte) 0x05, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 5984, Serial#: 1146
    public void shrw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0004((byte) 0xC1, (byte) 0x05, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrb  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5985, Serial#: 1246
    public void shrb___1(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD0, (byte) 0x05, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrl  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5986, Serial#: 1309
    public void shrl___1(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD1, (byte) 0x05, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrq  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5987, Serial#: 1372
    public void shrq___1(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0377((byte) 0xD1, (byte) 0x05, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrw  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5988, Serial#: 1435
    public void shrw___1(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0378((byte) 0xD1, (byte) 0x05, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrb  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5989, Serial#: 1498
    public void shrb___CL(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD2, (byte) 0x05, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrl  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5990, Serial#: 1561
    public void shrl___CL(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0233((byte) 0xD3, (byte) 0x05, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrq  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5991, Serial#: 1624
    public void shrq___CL(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0377((byte) 0xD3, (byte) 0x05, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrw  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 5992, Serial#: 1687
    public void shrw___CL(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0378((byte) 0xD3, (byte) 0x05, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrb  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5993, Serial#: 956
    public void shrb(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0012((byte) 0xC0, (byte) 0x05, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrl  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5994, Serial#: 1019
    public void shrl(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0012((byte) 0xC1, (byte) 0x05, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrq  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5995, Serial#: 1082
    public void shrq(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0013((byte) 0xC1, (byte) 0x05, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrw  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 5996, Serial#: 1145
    public void shrw(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0014((byte) 0xC1, (byte) 0x05, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrb  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5997, Serial#: 1229
    public void shrb___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD0, (byte) 0x05, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrl  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5998, Serial#: 1292
    public void shrl___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD1, (byte) 0x05, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrq  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 5999, Serial#: 1355
    public void shrq___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0379((byte) 0xD1, (byte) 0x05, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrw  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6000, Serial#: 1418
    public void shrw___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0380((byte) 0xD1, (byte) 0x05, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrb  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6001, Serial#: 1481
    public void shrb___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD2, (byte) 0x05, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrl  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6002, Serial#: 1544
    public void shrl___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0234((byte) 0xD3, (byte) 0x05, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrq  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6003, Serial#: 1607
    public void shrq___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0379((byte) 0xD3, (byte) 0x05, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrw  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6004, Serial#: 1670
    public void shrw___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0380((byte) 0xD3, (byte) 0x05, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrb  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6005, Serial#: 939
    public void shrb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0022((byte) 0xC0, (byte) 0x05, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrl  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6006, Serial#: 1002
    public void shrl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0022((byte) 0xC1, (byte) 0x05, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrq  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6007, Serial#: 1065
    public void shrq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0023((byte) 0xC1, (byte) 0x05, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrw  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6008, Serial#: 1128
    public void shrw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0024((byte) 0xC1, (byte) 0x05, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrw  }<i>destination</i>
     */
    // Template#: 6009, Serial#: 1458
    public void shrw___1(AMD64GeneralRegister16 destination) {
        assemble0235((byte) 0xD1, (byte) 0x05, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrw  }<i>destination</i>
     */
    // Template#: 6010, Serial#: 1710
    public void shrw___CL(AMD64GeneralRegister16 destination) {
        assemble0235((byte) 0xD3, (byte) 0x05, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 6011, Serial#: 1168
    public void shrw(AMD64GeneralRegister16 destination, byte imm8) {
        assemble0032((byte) 0xC1, (byte) 0x05, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrl  }<i>destination</i>
     */
    // Template#: 6012, Serial#: 1332
    public void shrl___1(AMD64GeneralRegister32 destination) {
        assemble0381((byte) 0xD1, (byte) 0x05, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrl  }<i>destination</i>
     */
    // Template#: 6013, Serial#: 1584
    public void shrl___CL(AMD64GeneralRegister32 destination) {
        assemble0381((byte) 0xD3, (byte) 0x05, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrl  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 6014, Serial#: 1042
    public void shrl(AMD64GeneralRegister32 destination, byte imm8) {
        assemble0043((byte) 0xC1, (byte) 0x05, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrq  }<i>destination</i>
     */
    // Template#: 6015, Serial#: 1395
    public void shrq___1(AMD64GeneralRegister64 destination) {
        assemble0382((byte) 0xD1, (byte) 0x05, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrq  }<i>destination</i>
     */
    // Template#: 6016, Serial#: 1647
    public void shrq___CL(AMD64GeneralRegister64 destination) {
        assemble0382((byte) 0xD3, (byte) 0x05, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 6017, Serial#: 1105
    public void shrq(AMD64GeneralRegister64 destination, byte imm8) {
        assemble0054((byte) 0xC1, (byte) 0x05, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrb  }<i>destination</i>
     */
    // Template#: 6018, Serial#: 1269
    public void shrb___1(AMD64GeneralRegister8 destination) {
        assemble0383((byte) 0xD0, (byte) 0x05, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrb  }<i>destination</i>
     */
    // Template#: 6019, Serial#: 1521
    public void shrb___CL(AMD64GeneralRegister8 destination) {
        assemble0383((byte) 0xD2, (byte) 0x05, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrb  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 6020, Serial#: 979
    public void shrb(AMD64GeneralRegister8 destination, byte imm8) {
        assemble0065((byte) 0xC0, (byte) 0x05, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrb  }<i>destination</i>
     */
    // Template#: 6021, Serial#: 1228
    public void shrb___1(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD0, (byte) 0x05, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrl  }<i>destination</i>
     */
    // Template#: 6022, Serial#: 1291
    public void shrl___1(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD1, (byte) 0x05, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrq  }<i>destination</i>
     */
    // Template#: 6023, Serial#: 1354
    public void shrq___1(AMD64IndirectRegister64 destination) {
        assemble0384((byte) 0xD1, (byte) 0x05, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrw  }<i>destination</i>
     */
    // Template#: 6024, Serial#: 1417
    public void shrw___1(AMD64IndirectRegister64 destination) {
        assemble0385((byte) 0xD1, (byte) 0x05, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrb  }<i>destination</i>
     */
    // Template#: 6025, Serial#: 1480
    public void shrb___CL(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD2, (byte) 0x05, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrl  }<i>destination</i>
     */
    // Template#: 6026, Serial#: 1543
    public void shrl___CL(AMD64IndirectRegister64 destination) {
        assemble0237((byte) 0xD3, (byte) 0x05, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrq  }<i>destination</i>
     */
    // Template#: 6027, Serial#: 1606
    public void shrq___CL(AMD64IndirectRegister64 destination) {
        assemble0384((byte) 0xD3, (byte) 0x05, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrw  }<i>destination</i>
     */
    // Template#: 6028, Serial#: 1669
    public void shrw___CL(AMD64IndirectRegister64 destination) {
        assemble0385((byte) 0xD3, (byte) 0x05, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrb  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 6029, Serial#: 938
    public void shrb(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0075((byte) 0xC0, (byte) 0x05, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrl  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 6030, Serial#: 1001
    public void shrl(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0075((byte) 0xC1, (byte) 0x05, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 6031, Serial#: 1064
    public void shrq(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0076((byte) 0xC1, (byte) 0x05, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 6032, Serial#: 1127
    public void shrw(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0077((byte) 0xC1, (byte) 0x05, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrb  }<i>rel32</i>
     */
    // Template#: 6033, Serial#: 1231
    public void rip_shrb___1(int rel32) {
        assemble0239((byte) 0xD0, (byte) 0x05, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrl  }<i>rel32</i>
     */
    // Template#: 6034, Serial#: 1294
    public void rip_shrl___1(int rel32) {
        assemble0239((byte) 0xD1, (byte) 0x05, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrq  }<i>rel32</i>
     */
    // Template#: 6035, Serial#: 1357
    public void rip_shrq___1(int rel32) {
        assemble0386((byte) 0xD1, (byte) 0x05, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrw  }<i>rel32</i>
     */
    // Template#: 6036, Serial#: 1420
    public void rip_shrw___1(int rel32) {
        assemble0387((byte) 0xD1, (byte) 0x05, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrb  }<i>rel32</i>
     */
    // Template#: 6037, Serial#: 1483
    public void rip_shrb___CL(int rel32) {
        assemble0239((byte) 0xD2, (byte) 0x05, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrl  }<i>rel32</i>
     */
    // Template#: 6038, Serial#: 1546
    public void rip_shrl___CL(int rel32) {
        assemble0239((byte) 0xD3, (byte) 0x05, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrq  }<i>rel32</i>
     */
    // Template#: 6039, Serial#: 1609
    public void rip_shrq___CL(int rel32) {
        assemble0386((byte) 0xD3, (byte) 0x05, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrw  }<i>rel32</i>
     */
    // Template#: 6040, Serial#: 1672
    public void rip_shrw___CL(int rel32) {
        assemble0387((byte) 0xD3, (byte) 0x05, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrb  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 6041, Serial#: 941
    public void rip_shrb(int rel32, byte imm8) {
        assemble0087((byte) 0xC0, (byte) 0x05, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrl  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 6042, Serial#: 1004
    public void rip_shrl(int rel32, byte imm8) {
        assemble0087((byte) 0xC1, (byte) 0x05, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrq  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 6043, Serial#: 1067
    public void rip_shrq(int rel32, byte imm8) {
        assemble0088((byte) 0xC1, (byte) 0x05, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrw  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 6044, Serial#: 1130
    public void rip_shrw(int rel32, byte imm8) {
        assemble0089((byte) 0xC1, (byte) 0x05, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6045, Serial#: 1261
    public void shrb___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD0, (byte) 0x05, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6046, Serial#: 1324
    public void shrl___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD1, (byte) 0x05, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6047, Serial#: 1387
    public void shrq___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0388((byte) 0xD1, (byte) 0x05, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6048, Serial#: 1450
    public void shrw___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0389((byte) 0xD1, (byte) 0x05, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6049, Serial#: 1513
    public void shrb___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD2, (byte) 0x05, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6050, Serial#: 1576
    public void shrl___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0240((byte) 0xD3, (byte) 0x05, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6051, Serial#: 1639
    public void shrq___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0388((byte) 0xD3, (byte) 0x05, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6052, Serial#: 1702
    public void shrw___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0389((byte) 0xD3, (byte) 0x05, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6053, Serial#: 971
    public void shrb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0090((byte) 0xC0, (byte) 0x05, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6054, Serial#: 1034
    public void shrl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0090((byte) 0xC1, (byte) 0x05, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6055, Serial#: 1097
    public void shrq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0091((byte) 0xC1, (byte) 0x05, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6056, Serial#: 1160
    public void shrw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0092((byte) 0xC1, (byte) 0x05, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrb  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6057, Serial#: 1230
    public void m_shrb___1(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD0, (byte) 0x05, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrl  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6058, Serial#: 1293
    public void m_shrl___1(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD1, (byte) 0x05, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrq  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6059, Serial#: 1356
    public void m_shrq___1(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0390((byte) 0xD1, (byte) 0x05, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrw  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6060, Serial#: 1419
    public void m_shrw___1(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0391((byte) 0xD1, (byte) 0x05, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrb  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6061, Serial#: 1482
    public void m_shrb___CL(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD2, (byte) 0x05, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrl  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6062, Serial#: 1545
    public void m_shrl___CL(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0241((byte) 0xD3, (byte) 0x05, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrq  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6063, Serial#: 1608
    public void m_shrq___CL(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0390((byte) 0xD3, (byte) 0x05, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrw  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6064, Serial#: 1671
    public void m_shrw___CL(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0391((byte) 0xD3, (byte) 0x05, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrb  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6065, Serial#: 940
    public void m_shrb(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0104((byte) 0xC0, (byte) 0x05, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrl  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6066, Serial#: 1003
    public void m_shrl(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0104((byte) 0xC1, (byte) 0x05, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrq  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6067, Serial#: 1066
    public void m_shrq(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0105((byte) 0xC1, (byte) 0x05, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrw  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6068, Serial#: 1129
    public void m_shrw(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0106((byte) 0xC1, (byte) 0x05, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrb  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 6069, Serial#: 1260
    public void shrb___1(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD0, (byte) 0x05, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrl  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 6070, Serial#: 1323
    public void shrl___1(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD1, (byte) 0x05, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrq  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 6071, Serial#: 1386
    public void shrq___1(int disp32, AMD64IndirectRegister64 destination) {
        assemble0392((byte) 0xD1, (byte) 0x05, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrw  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 6072, Serial#: 1449
    public void shrw___1(int disp32, AMD64IndirectRegister64 destination) {
        assemble0393((byte) 0xD1, (byte) 0x05, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrb  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 6073, Serial#: 1512
    public void shrb___CL(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD2, (byte) 0x05, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrl  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 6074, Serial#: 1575
    public void shrl___CL(int disp32, AMD64IndirectRegister64 destination) {
        assemble0242((byte) 0xD3, (byte) 0x05, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrq  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 6075, Serial#: 1638
    public void shrq___CL(int disp32, AMD64IndirectRegister64 destination) {
        assemble0392((byte) 0xD3, (byte) 0x05, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrw  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 6076, Serial#: 1701
    public void shrw___CL(int disp32, AMD64IndirectRegister64 destination) {
        assemble0393((byte) 0xD3, (byte) 0x05, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrb  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 6077, Serial#: 970
    public void shrb(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0114((byte) 0xC0, (byte) 0x05, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrl  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 6078, Serial#: 1033
    public void shrl(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0114((byte) 0xC1, (byte) 0x05, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrq  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 6079, Serial#: 1096
    public void shrq(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0115((byte) 0xC1, (byte) 0x05, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrw  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 6080, Serial#: 1159
    public void shrw(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0116((byte) 0xC1, (byte) 0x05, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6081, Serial#: 6058
    public void shrd_CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0195((byte) 0xAD, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6082, Serial#: 6031
    public void shrd(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source, byte imm8) {
        assemble0697((byte) 0xAC, disp8, base, index, scale, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6083, Serial#: 6040
    public void shrd_CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0196((byte) 0xAD, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6084, Serial#: 6013
    public void shrd(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source, byte imm8) {
        assemble0698((byte) 0xAC, disp8, base, index, scale, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6085, Serial#: 6049
    public void shrd_CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0197((byte) 0xAD, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6086, Serial#: 6022
    public void shrd(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source, byte imm8) {
        assemble0699((byte) 0xAC, disp8, base, index, scale, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6087, Serial#: 6057
    public void shrd_CL(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0199((byte) 0xAD, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>disp8</i>, <i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6088, Serial#: 6030
    public void shrd(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source, byte imm8) {
        assemble0700((byte) 0xAC, disp8, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6089, Serial#: 6039
    public void shrd_CL(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0200((byte) 0xAD, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>disp8</i>, <i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6090, Serial#: 6012
    public void shrd(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source, byte imm8) {
        assemble0701((byte) 0xAC, disp8, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6091, Serial#: 6048
    public void shrd_CL(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0201((byte) 0xAD, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>disp8</i>, <i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6092, Serial#: 6021
    public void shrd(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source, byte imm8) {
        assemble0702((byte) 0xAC, disp8, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6093, Serial#: 6054
    public void shrd_CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0203((byte) 0xAD, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6094, Serial#: 6027
    public void shrd(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source, byte imm8) {
        assemble0703((byte) 0xAC, base, index, scale, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6095, Serial#: 6036
    public void shrd_CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0204((byte) 0xAD, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6096, Serial#: 6009
    public void shrd(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source, byte imm8) {
        assemble0704((byte) 0xAC, base, index, scale, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6097, Serial#: 6045
    public void shrd_CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0205((byte) 0xAD, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6098, Serial#: 6018
    public void shrd(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source, byte imm8) {
        assemble0705((byte) 0xAC, base, index, scale, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6099, Serial#: 6061
    public void shrd_CL(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0207((byte) 0xAD, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6100, Serial#: 6034
    public void shrd(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source, byte imm8) {
        assemble0706((byte) 0xAC, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6101, Serial#: 6043
    public void shrd_CL(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0209((byte) 0xAD, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6102, Serial#: 6016
    public void shrd(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source, byte imm8) {
        assemble0707((byte) 0xAC, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6103, Serial#: 6052
    public void shrd_CL(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0211((byte) 0xAD, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6104, Serial#: 6025
    public void shrd(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source, byte imm8) {
        assemble0708((byte) 0xAC, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6105, Serial#: 6053
    public void shrd_CL(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0213((byte) 0xAD, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6106, Serial#: 6026
    public void shrd(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source, byte imm8) {
        assemble0709((byte) 0xAC, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6107, Serial#: 6035
    public void shrd_CL(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0214((byte) 0xAD, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6108, Serial#: 6008
    public void shrd(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source, byte imm8) {
        assemble0710((byte) 0xAC, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6109, Serial#: 6044
    public void shrd_CL(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0215((byte) 0xAD, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6110, Serial#: 6017
    public void shrd(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source, byte imm8) {
        assemble0711((byte) 0xAC, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6111, Serial#: 6060
    public void shrd_CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0218((byte) 0xAD, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6112, Serial#: 6033
    public void shrd(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source, byte imm8) {
        assemble0712((byte) 0xAC, disp32, base, index, scale, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6113, Serial#: 6042
    public void shrd_CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0219((byte) 0xAD, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6114, Serial#: 6015
    public void shrd(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source, byte imm8) {
        assemble0713((byte) 0xAC, disp32, base, index, scale, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6115, Serial#: 6051
    public void shrd_CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0220((byte) 0xAD, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6116, Serial#: 6024
    public void shrd(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source, byte imm8) {
        assemble0714((byte) 0xAC, disp32, base, index, scale, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 6117, Serial#: 6056
    public void rip_shrd_CL(int rel32, AMD64GeneralRegister16 source) {
        assemble0221((byte) 0xAD, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>rel32</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6118, Serial#: 6029
    public void rip_shrd(int rel32, AMD64GeneralRegister16 source, byte imm8) {
        assemble0715((byte) 0xAC, rel32, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 6119, Serial#: 6038
    public void rip_shrd_CL(int rel32, AMD64GeneralRegister32 source) {
        assemble0222((byte) 0xAD, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>rel32</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6120, Serial#: 6011
    public void rip_shrd(int rel32, AMD64GeneralRegister32 source, byte imm8) {
        assemble0716((byte) 0xAC, rel32, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 6121, Serial#: 6047
    public void rip_shrd_CL(int rel32, AMD64GeneralRegister64 source) {
        assemble0223((byte) 0xAD, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>rel32</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6122, Serial#: 6020
    public void rip_shrd(int rel32, AMD64GeneralRegister64 source, byte imm8) {
        assemble0717((byte) 0xAC, rel32, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6123, Serial#: 6055
    public void m_shrd_CL(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0225((byte) 0xAD, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6124, Serial#: 6028
    public void m_shrd(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source, byte imm8) {
        assemble0718((byte) 0xAC, m32, index, scale, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6125, Serial#: 6037
    public void m_shrd_CL(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0226((byte) 0xAD, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6126, Serial#: 6010
    public void m_shrd(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source, byte imm8) {
        assemble0719((byte) 0xAC, m32, index, scale, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6127, Serial#: 6046
    public void m_shrd_CL(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0227((byte) 0xAD, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6128, Serial#: 6019
    public void m_shrd(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source, byte imm8) {
        assemble0720((byte) 0xAC, m32, index, scale, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6129, Serial#: 6059
    public void shrd_CL(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0229((byte) 0xAD, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>disp32</i>, <i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6130, Serial#: 6032
    public void shrd(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source, byte imm8) {
        assemble0721((byte) 0xAC, disp32, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6131, Serial#: 6041
    public void shrd_CL(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0230((byte) 0xAD, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>disp32</i>, <i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6132, Serial#: 6014
    public void shrd(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source, byte imm8) {
        assemble0722((byte) 0xAC, disp32, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6133, Serial#: 6050
    public void shrd_CL(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0231((byte) 0xAD, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>disp32</i>, <i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6134, Serial#: 6023
    public void shrd(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source, byte imm8) {
        assemble0723((byte) 0xAC, disp32, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shufpd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6135, Serial#: 4443
    public void shufpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0636((byte) 0xC6, destination, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shufpd  }<i>destination</i>, <i>disp8</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6136, Serial#: 4442
    public void shufpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source, byte imm8) {
        assemble0637((byte) 0xC6, destination, disp8, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shufpd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6137, Serial#: 4439
    public void shufpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0638((byte) 0xC6, destination, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shufpd  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6138, Serial#: 4438
    public void shufpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source, byte imm8) {
        assemble0640((byte) 0xC6, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shufpd  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6139, Serial#: 4446
    public void shufpd(AMD64XMMRegister destination, AMD64XMMRegister source, byte imm8) {
        assemble0665((byte) 0xC6, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shufpd  }<i>destination</i>, <i>rel32</i>, <i>imm8</i>
     */
    // Template#: 6140, Serial#: 4441
    public void rip_shufpd(AMD64XMMRegister destination, int rel32, byte imm8) {
        assemble0641((byte) 0xC6, destination, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shufpd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6141, Serial#: 4445
    public void shufpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0642((byte) 0xC6, destination, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shufpd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6142, Serial#: 4440
    public void m_shufpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0643((byte) 0xC6, destination, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shufpd  }<i>destination</i>, <i>disp32</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6143, Serial#: 4444
    public void shufpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source, byte imm8) {
        assemble0644((byte) 0xC6, destination, disp32, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shufps  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6144, Serial#: 4407
    public void shufps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0724((byte) 0xC6, destination, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shufps  }<i>destination</i>, <i>disp8</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6145, Serial#: 4406
    public void shufps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source, byte imm8) {
        assemble0725((byte) 0xC6, destination, disp8, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shufps  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6146, Serial#: 4403
    public void shufps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0726((byte) 0xC6, destination, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shufps  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6147, Serial#: 4402
    public void shufps(AMD64XMMRegister destination, AMD64IndirectRegister64 source, byte imm8) {
        assemble0727((byte) 0xC6, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shufps  }<i>destination</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6148, Serial#: 4410
    public void shufps(AMD64XMMRegister destination, AMD64XMMRegister source, byte imm8) {
        assemble0728((byte) 0xC6, destination, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shufps  }<i>destination</i>, <i>rel32</i>, <i>imm8</i>
     */
    // Template#: 6149, Serial#: 4405
    public void rip_shufps(AMD64XMMRegister destination, int rel32, byte imm8) {
        assemble0729((byte) 0xC6, destination, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shufps  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6150, Serial#: 4409
    public void shufps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0730((byte) 0xC6, destination, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shufps  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6151, Serial#: 4404
    public void m_shufps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0731((byte) 0xC6, destination, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code shufps  }<i>destination</i>, <i>disp32</i>, <i>source</i>, <i>imm8</i>
     */
    // Template#: 6152, Serial#: 4408
    public void shufps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source, byte imm8) {
        assemble0732((byte) 0xC6, destination, disp32, source, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sidt  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6153, Serial#: 3163
    public void sidt(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0244((byte) 0x01, (byte) 0x01, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sidt  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 6154, Serial#: 3162
    public void sidt(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0245((byte) 0x01, (byte) 0x01, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sidt  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6155, Serial#: 3137
    public void sidt(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0246((byte) 0x01, (byte) 0x01, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sidt  }<i>destination</i>
     */
    // Template#: 6156, Serial#: 3136
    public void sidt(AMD64IndirectRegister64 destination) {
        assemble0247((byte) 0x01, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sidt  }<i>rel32</i>
     */
    // Template#: 6157, Serial#: 3139
    public void rip_sidt(int rel32) {
        assemble0248((byte) 0x01, (byte) 0x01, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sidt  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6158, Serial#: 3177
    public void sidt(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0249((byte) 0x01, (byte) 0x01, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sidt  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6159, Serial#: 3138
    public void m_sidt(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0250((byte) 0x01, (byte) 0x01, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sidt  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 6160, Serial#: 3176
    public void sidt(int disp32, AMD64IndirectRegister64 destination) {
        assemble0251((byte) 0x01, (byte) 0x01, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sldt  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6161, Serial#: 3099
    public void sldt(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0244((byte) 0x00, (byte) 0x00, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sldt  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 6162, Serial#: 3098
    public void sldt(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0245((byte) 0x00, (byte) 0x00, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sldt  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6163, Serial#: 3075
    public void sldt(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0246((byte) 0x00, (byte) 0x00, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sldt  }<i>destination</i>
     */
    // Template#: 6164, Serial#: 3130
    public void sldt(AMD64GeneralRegister16 destination) {
        assemble0733((byte) 0x00, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sldt  }<i>destination</i>
     */
    // Template#: 6165, Serial#: 3126
    public void sldt(AMD64GeneralRegister32 destination) {
        assemble0734((byte) 0x00, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sldt  }<i>destination</i>
     */
    // Template#: 6166, Serial#: 3128
    public void sldt(AMD64GeneralRegister64 destination) {
        assemble0735((byte) 0x00, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sldt  }<i>destination</i>
     */
    // Template#: 6167, Serial#: 3074
    public void sldt(AMD64IndirectRegister64 destination) {
        assemble0247((byte) 0x00, (byte) 0x00, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sldt  }<i>rel32</i>
     */
    // Template#: 6168, Serial#: 3077
    public void rip_sldt(int rel32) {
        assemble0248((byte) 0x00, (byte) 0x00, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sldt  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6169, Serial#: 3111
    public void sldt(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0249((byte) 0x00, (byte) 0x00, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sldt  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6170, Serial#: 3076
    public void m_sldt(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0250((byte) 0x00, (byte) 0x00, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sldt  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 6171, Serial#: 3110
    public void sldt(int disp32, AMD64IndirectRegister64 destination) {
        assemble0251((byte) 0x00, (byte) 0x00, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code smsw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6172, Serial#: 3169
    public void smsw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0244((byte) 0x01, (byte) 0x04, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code smsw  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 6173, Serial#: 3168
    public void smsw(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0245((byte) 0x01, (byte) 0x04, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code smsw  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6174, Serial#: 3149
    public void smsw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0246((byte) 0x01, (byte) 0x04, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code smsw  }<i>destination</i>
     */
    // Template#: 6175, Serial#: 3192
    public void smsw(AMD64GeneralRegister16 destination) {
        assemble0733((byte) 0x01, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code smsw  }<i>destination</i>
     */
    // Template#: 6176, Serial#: 3189
    public void smsw(AMD64GeneralRegister32 destination) {
        assemble0734((byte) 0x01, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code smsw  }<i>destination</i>
     */
    // Template#: 6177, Serial#: 3191
    public void smsw(AMD64GeneralRegister64 destination) {
        assemble0735((byte) 0x01, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code smsw  }<i>destination</i>
     */
    // Template#: 6178, Serial#: 3148
    public void smsw(AMD64IndirectRegister64 destination) {
        assemble0247((byte) 0x01, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code smsw  }<i>rel32</i>
     */
    // Template#: 6179, Serial#: 3151
    public void rip_smsw(int rel32) {
        assemble0248((byte) 0x01, (byte) 0x04, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code smsw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6180, Serial#: 3183
    public void smsw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0249((byte) 0x01, (byte) 0x04, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code smsw  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6181, Serial#: 3150
    public void m_smsw(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0250((byte) 0x01, (byte) 0x04, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code smsw  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 6182, Serial#: 3182
    public void smsw(int disp32, AMD64IndirectRegister64 destination) {
        assemble0251((byte) 0x01, (byte) 0x04, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtpd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6183, Serial#: 3730
    public void sqrtpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x51, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtpd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 6184, Serial#: 3729
    public void sqrtpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x51, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtpd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6185, Serial#: 3726
    public void sqrtpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x51, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6186, Serial#: 3725
    public void sqrtpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x51, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6187, Serial#: 3733
    public void sqrtpd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x51, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtpd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 6188, Serial#: 3728
    public void rip_sqrtpd(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x51, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtpd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6189, Serial#: 3732
    public void sqrtpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x51, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtpd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6190, Serial#: 3727
    public void m_sqrtpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x51, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtpd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 6191, Serial#: 3731
    public void sqrtpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x51, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtps  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6192, Serial#: 3666
    public void sqrtps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0137((byte) 0x51, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtps  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 6193, Serial#: 3665
    public void sqrtps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0138((byte) 0x51, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtps  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6194, Serial#: 3662
    public void sqrtps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0139((byte) 0x51, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6195, Serial#: 3661
    public void sqrtps(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0140((byte) 0x51, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6196, Serial#: 3669
    public void sqrtps(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0141((byte) 0x51, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtps  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 6197, Serial#: 3664
    public void rip_sqrtps(AMD64XMMRegister destination, int rel32) {
        assemble0142((byte) 0x51, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtps  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6198, Serial#: 3668
    public void sqrtps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0143((byte) 0x51, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtps  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6199, Serial#: 3663
    public void m_sqrtps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0144((byte) 0x51, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtps  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 6200, Serial#: 3667
    public void sqrtps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0145((byte) 0x51, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtsd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6201, Serial#: 3775
    public void sqrtsd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0147((byte) 0x51, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtsd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 6202, Serial#: 3774
    public void sqrtsd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0148((byte) 0x51, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtsd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6203, Serial#: 3771
    public void sqrtsd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0149((byte) 0x51, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtsd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6204, Serial#: 3770
    public void sqrtsd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0150((byte) 0x51, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtsd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6205, Serial#: 3778
    public void sqrtsd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0151((byte) 0x51, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtsd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 6206, Serial#: 3773
    public void rip_sqrtsd(AMD64XMMRegister destination, int rel32) {
        assemble0152((byte) 0x51, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtsd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6207, Serial#: 3777
    public void sqrtsd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0153((byte) 0x51, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtsd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6208, Serial#: 3772
    public void m_sqrtsd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0154((byte) 0x51, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtsd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 6209, Serial#: 3776
    public void sqrtsd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0155((byte) 0x51, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtss  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6210, Serial#: 3784
    public void sqrtss(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0156((byte) 0x51, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtss  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 6211, Serial#: 3783
    public void sqrtss(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0157((byte) 0x51, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtss  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6212, Serial#: 3780
    public void sqrtss(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0158((byte) 0x51, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtss  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6213, Serial#: 3779
    public void sqrtss(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0159((byte) 0x51, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtss  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6214, Serial#: 3787
    public void sqrtss(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0160((byte) 0x51, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtss  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 6215, Serial#: 3782
    public void rip_sqrtss(AMD64XMMRegister destination, int rel32) {
        assemble0161((byte) 0x51, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtss  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6216, Serial#: 3786
    public void sqrtss(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0162((byte) 0x51, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtss  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6217, Serial#: 3781
    public void m_sqrtss(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0163((byte) 0x51, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtss  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 6218, Serial#: 3785
    public void sqrtss(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0164((byte) 0x51, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code stc  }
     */
    // Template#: 6219, Serial#: 2969
    public void stc() {
        assemble0146((byte) 0xF9);
    }

    /**
     * Pseudo-external assembler syntax: {@code std  }
     */
    // Template#: 6220, Serial#: 2973
    public void std() {
        assemble0146((byte) 0xFD);
    }

    /**
     * Pseudo-external assembler syntax: {@code sti  }
     */
    // Template#: 6221, Serial#: 2971
    public void sti() {
        assemble0146((byte) 0xFB);
    }

    /**
     * Pseudo-external assembler syntax: {@code stmxcsr  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6222, Serial#: 6089
    public void stmxcsr(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0244((byte) 0xAE, (byte) 0x03, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code stmxcsr  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 6223, Serial#: 6088
    public void stmxcsr(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0245((byte) 0xAE, (byte) 0x03, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code stmxcsr  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6224, Serial#: 6075
    public void stmxcsr(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0246((byte) 0xAE, (byte) 0x03, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code stmxcsr  }<i>destination</i>
     */
    // Template#: 6225, Serial#: 6074
    public void stmxcsr(AMD64IndirectRegister64 destination) {
        assemble0247((byte) 0xAE, (byte) 0x03, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code stmxcsr  }<i>rel32</i>
     */
    // Template#: 6226, Serial#: 6077
    public void rip_stmxcsr(int rel32) {
        assemble0248((byte) 0xAE, (byte) 0x03, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code stmxcsr  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6227, Serial#: 6099
    public void stmxcsr(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0249((byte) 0xAE, (byte) 0x03, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code stmxcsr  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6228, Serial#: 6076
    public void m_stmxcsr(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0250((byte) 0xAE, (byte) 0x03, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code stmxcsr  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 6229, Serial#: 6098
    public void stmxcsr(int disp32, AMD64IndirectRegister64 destination) {
        assemble0251((byte) 0xAE, (byte) 0x03, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code stosb  }
     */
    // Template#: 6230, Serial#: 2479
    public void stosb() {
        assemble0146((byte) 0xAA);
    }

    /**
     * Pseudo-external assembler syntax: {@code stosl  }
     */
    // Template#: 6231, Serial#: 2480
    public void stosl() {
        assemble0146((byte) 0xAB);
    }

    /**
     * Pseudo-external assembler syntax: {@code stosq  }
     */
    // Template#: 6232, Serial#: 2481
    public void stosq() {
        assemble0243((byte) 0xAB);
    }

    /**
     * Pseudo-external assembler syntax: {@code stosw  }
     */
    // Template#: 6233, Serial#: 2482
    public void stosw() {
        assemble0271((byte) 0xAB);
    }

    /**
     * Pseudo-external assembler syntax: {@code str  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6234, Serial#: 3101
    public void str(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0244((byte) 0x00, (byte) 0x01, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code str  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 6235, Serial#: 3100
    public void str(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0245((byte) 0x00, (byte) 0x01, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code str  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6236, Serial#: 3079
    public void str(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0246((byte) 0x00, (byte) 0x01, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code str  }<i>destination</i>
     */
    // Template#: 6237, Serial#: 3131
    public void str(AMD64GeneralRegister16 destination) {
        assemble0733((byte) 0x00, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code str  }<i>destination</i>
     */
    // Template#: 6238, Serial#: 3127
    public void str(AMD64GeneralRegister32 destination) {
        assemble0734((byte) 0x00, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code str  }<i>destination</i>
     */
    // Template#: 6239, Serial#: 3129
    public void str(AMD64GeneralRegister64 destination) {
        assemble0735((byte) 0x00, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code str  }<i>destination</i>
     */
    // Template#: 6240, Serial#: 3078
    public void str(AMD64IndirectRegister64 destination) {
        assemble0247((byte) 0x00, (byte) 0x01, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code str  }<i>rel32</i>
     */
    // Template#: 6241, Serial#: 3081
    public void rip_str(int rel32) {
        assemble0248((byte) 0x00, (byte) 0x01, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code str  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6242, Serial#: 3113
    public void str(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0249((byte) 0x00, (byte) 0x01, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code str  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6243, Serial#: 3080
    public void m_str(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0250((byte) 0x00, (byte) 0x01, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code str  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 6244, Serial#: 3112
    public void str(int disp32, AMD64IndirectRegister64 destination) {
        assemble0251((byte) 0x00, (byte) 0x01, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>imm8</i>
     */
    // Template#: 6245, Serial#: 2195
    public void sub_AL(byte imm8) {
        assemble0001((byte) 0x2C, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code subb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6246, Serial#: 364
    public void subb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0002((byte) 0x80, (byte) 0x05, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code subl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6247, Serial#: 652
    public void subl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0002((byte) 0x83, (byte) 0x05, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code subq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6248, Serial#: 724
    public void subq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0003((byte) 0x83, (byte) 0x05, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code subw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6249, Serial#: 796
    public void subw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0004((byte) 0x83, (byte) 0x05, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6250, Serial#: 2159
    public void sub(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0005((byte) 0x29, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6251, Serial#: 2141
    public void sub(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0006((byte) 0x29, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6252, Serial#: 2150
    public void sub(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0007((byte) 0x29, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6253, Serial#: 2132
    public void sub(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0008((byte) 0x28, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code subl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 6254, Serial#: 436
    public void subl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0009((byte) 0x81, (byte) 0x05, disp8, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code subq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 6255, Serial#: 508
    public void subq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0010((byte) 0x81, (byte) 0x05, disp8, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code subw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 6256, Serial#: 580
    public void subw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0011((byte) 0x81, (byte) 0x05, disp8, base, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code subb  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 6257, Serial#: 363
    public void subb(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0012((byte) 0x80, (byte) 0x05, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code subl  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 6258, Serial#: 651
    public void subl(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0012((byte) 0x83, (byte) 0x05, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code subq  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 6259, Serial#: 723
    public void subq(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0013((byte) 0x83, (byte) 0x05, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code subw  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 6260, Serial#: 795
    public void subw(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0014((byte) 0x83, (byte) 0x05, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6261, Serial#: 2158
    public void sub(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0015((byte) 0x29, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6262, Serial#: 2140
    public void sub(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0016((byte) 0x29, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6263, Serial#: 2149
    public void sub(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0017((byte) 0x29, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6264, Serial#: 2131
    public void sub(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0018((byte) 0x28, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code subl  }<i>disp8</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 6265, Serial#: 435
    public void subl(byte disp8, AMD64IndirectRegister64 destination, int imm32) {
        assemble0019((byte) 0x81, (byte) 0x05, disp8, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code subq  }<i>disp8</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 6266, Serial#: 507
    public void subq(byte disp8, AMD64IndirectRegister64 destination, int imm32) {
        assemble0020((byte) 0x81, (byte) 0x05, disp8, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code subw  }<i>disp8</i>, <i>destination</i>, <i>imm16</i>
     */
    // Template#: 6267, Serial#: 579
    public void subw(byte disp8, AMD64IndirectRegister64 destination, short imm16) {
        assemble0021((byte) 0x81, (byte) 0x05, disp8, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code subb  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6268, Serial#: 342
    public void subb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0022((byte) 0x80, (byte) 0x05, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code subl  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6269, Serial#: 630
    public void subl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0022((byte) 0x83, (byte) 0x05, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code subq  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6270, Serial#: 702
    public void subq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0023((byte) 0x83, (byte) 0x05, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code subw  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6271, Serial#: 774
    public void subw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0024((byte) 0x83, (byte) 0x05, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6272, Serial#: 2155
    public void sub(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0025((byte) 0x29, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6273, Serial#: 2137
    public void sub(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0026((byte) 0x29, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6274, Serial#: 2146
    public void sub(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0027((byte) 0x29, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6275, Serial#: 2128
    public void sub(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0028((byte) 0x28, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code subl  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 6276, Serial#: 414
    public void subl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0029((byte) 0x81, (byte) 0x05, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code subq  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 6277, Serial#: 486
    public void subq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0030((byte) 0x81, (byte) 0x05, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code subw  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 6278, Serial#: 558
    public void subw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0031((byte) 0x81, (byte) 0x05, base, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code subw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 6279, Serial#: 822
    public void subw(AMD64GeneralRegister16 destination, byte imm8) {
        assemble0032((byte) 0x83, (byte) 0x05, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6280, Serial#: 2192
    public void sub(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0033((byte) 0x2B, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 6281, Serial#: 2191
    public void sub(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0034((byte) 0x2B, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6282, Serial#: 2188
    public void sub(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0035((byte) 0x2B, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6283, Serial#: 2162
    public void sub(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0036((byte) 0x29, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6284, Serial#: 2187
    public void sub(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        assemble0037((byte) 0x2B, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 6285, Serial#: 2190
    public void rip_sub(AMD64GeneralRegister16 destination, int rel32) {
        assemble0038((byte) 0x2B, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6286, Serial#: 2194
    public void sub(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0039((byte) 0x2B, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6287, Serial#: 2189
    public void m_sub(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0040((byte) 0x2B, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 6288, Serial#: 2193
    public void sub(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0041((byte) 0x2B, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code subw  }<i>destination</i>, <i>imm16</i>
     */
    // Template#: 6289, Serial#: 606
    public void subw(AMD64GeneralRegister16 destination, short imm16) {
        assemble0042((byte) 0x81, (byte) 0x05, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code subl  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 6290, Serial#: 678
    public void subl(AMD64GeneralRegister32 destination, byte imm8) {
        assemble0043((byte) 0x83, (byte) 0x05, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6291, Serial#: 2176
    public void sub(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0044((byte) 0x2B, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 6292, Serial#: 2175
    public void sub(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0045((byte) 0x2B, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6293, Serial#: 2172
    public void sub(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0046((byte) 0x2B, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6294, Serial#: 2144
    public void sub(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0047((byte) 0x29, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6295, Serial#: 2171
    public void sub(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0048((byte) 0x2B, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code subl  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 6296, Serial#: 462
    public void subl(AMD64GeneralRegister32 destination, int imm32) {
        assemble0050((byte) 0x81, (byte) 0x05, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 6297, Serial#: 2174
    public void rip_sub(AMD64GeneralRegister32 destination, int rel32) {
        assemble0049((byte) 0x2B, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6298, Serial#: 2178
    public void sub(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0051((byte) 0x2B, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6299, Serial#: 2173
    public void m_sub(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0052((byte) 0x2B, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 6300, Serial#: 2177
    public void sub(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0053((byte) 0x2B, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code subq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 6301, Serial#: 750
    public void subq(AMD64GeneralRegister64 destination, byte imm8) {
        assemble0054((byte) 0x83, (byte) 0x05, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6302, Serial#: 2184
    public void sub(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0055((byte) 0x2B, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 6303, Serial#: 2183
    public void sub(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0056((byte) 0x2B, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6304, Serial#: 2180
    public void sub(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0057((byte) 0x2B, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6305, Serial#: 2153
    public void sub(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0058((byte) 0x29, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6306, Serial#: 2179
    public void sub(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0059((byte) 0x2B, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code subq  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 6307, Serial#: 534
    public void subq(AMD64GeneralRegister64 destination, int imm32) {
        assemble0061((byte) 0x81, (byte) 0x05, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 6308, Serial#: 2182
    public void rip_sub(AMD64GeneralRegister64 destination, int rel32) {
        assemble0060((byte) 0x2B, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6309, Serial#: 2186
    public void sub(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0062((byte) 0x2B, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6310, Serial#: 2181
    public void m_sub(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0063((byte) 0x2B, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 6311, Serial#: 2185
    public void sub(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0064((byte) 0x2B, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code subb  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 6312, Serial#: 390
    public void subb(AMD64GeneralRegister8 destination, byte imm8) {
        assemble0065((byte) 0x80, (byte) 0x05, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6313, Serial#: 2168
    public void sub(AMD64GeneralRegister8 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0066((byte) 0x2A, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 6314, Serial#: 2167
    public void sub(AMD64GeneralRegister8 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0067((byte) 0x2A, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6315, Serial#: 2164
    public void sub(AMD64GeneralRegister8 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0068((byte) 0x2A, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6316, Serial#: 2135
    public void sub(AMD64GeneralRegister8 destination, AMD64GeneralRegister8 source) {
        assemble0069((byte) 0x28, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6317, Serial#: 2163
    public void sub(AMD64GeneralRegister8 destination, AMD64IndirectRegister64 source) {
        assemble0070((byte) 0x2A, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 6318, Serial#: 2166
    public void rip_sub(AMD64GeneralRegister8 destination, int rel32) {
        assemble0071((byte) 0x2A, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6319, Serial#: 2170
    public void sub(AMD64GeneralRegister8 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0072((byte) 0x2A, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6320, Serial#: 2165
    public void m_sub(AMD64GeneralRegister8 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0073((byte) 0x2A, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 6321, Serial#: 2169
    public void sub(AMD64GeneralRegister8 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0074((byte) 0x2A, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code subb  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 6322, Serial#: 341
    public void subb(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0075((byte) 0x80, (byte) 0x05, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code subl  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 6323, Serial#: 629
    public void subl(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0075((byte) 0x83, (byte) 0x05, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code subq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 6324, Serial#: 701
    public void subq(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0076((byte) 0x83, (byte) 0x05, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code subw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 6325, Serial#: 773
    public void subw(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0077((byte) 0x83, (byte) 0x05, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6326, Serial#: 2154
    public void sub(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0078((byte) 0x29, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6327, Serial#: 2136
    public void sub(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0079((byte) 0x29, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6328, Serial#: 2145
    public void sub(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0080((byte) 0x29, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6329, Serial#: 2127
    public void sub(AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0081((byte) 0x28, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code subl  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 6330, Serial#: 413
    public void subl(AMD64IndirectRegister64 destination, int imm32) {
        assemble0082((byte) 0x81, (byte) 0x05, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code subq  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 6331, Serial#: 485
    public void subq(AMD64IndirectRegister64 destination, int imm32) {
        assemble0083((byte) 0x81, (byte) 0x05, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code subw  }<i>destination</i>, <i>imm16</i>
     */
    // Template#: 6332, Serial#: 557
    public void subw(AMD64IndirectRegister64 destination, short imm16) {
        assemble0084((byte) 0x81, (byte) 0x05, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>imm32</i>
     */
    // Template#: 6333, Serial#: 2196
    public void sub_EAX(int imm32) {
        assemble0085((byte) 0x2D, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>imm32</i>
     */
    // Template#: 6334, Serial#: 2197
    public void sub_RAX(int imm32) {
        assemble0086((byte) 0x2D, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code subb  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 6335, Serial#: 344
    public void rip_subb(int rel32, byte imm8) {
        assemble0087((byte) 0x80, (byte) 0x05, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code subl  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 6336, Serial#: 632
    public void rip_subl(int rel32, byte imm8) {
        assemble0087((byte) 0x83, (byte) 0x05, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code subq  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 6337, Serial#: 704
    public void rip_subq(int rel32, byte imm8) {
        assemble0088((byte) 0x83, (byte) 0x05, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code subw  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 6338, Serial#: 776
    public void rip_subw(int rel32, byte imm8) {
        assemble0089((byte) 0x83, (byte) 0x05, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code subb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6339, Serial#: 380
    public void subb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0090((byte) 0x80, (byte) 0x05, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code subl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6340, Serial#: 668
    public void subl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0090((byte) 0x83, (byte) 0x05, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code subq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6341, Serial#: 740
    public void subq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0091((byte) 0x83, (byte) 0x05, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code subw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6342, Serial#: 812
    public void subw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0092((byte) 0x83, (byte) 0x05, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6343, Serial#: 2161
    public void sub(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0093((byte) 0x29, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6344, Serial#: 2143
    public void sub(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0094((byte) 0x29, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6345, Serial#: 2152
    public void sub(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0095((byte) 0x29, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6346, Serial#: 2134
    public void sub(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0096((byte) 0x28, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code subl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 6347, Serial#: 452
    public void subl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0097((byte) 0x81, (byte) 0x05, disp32, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code subq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 6348, Serial#: 524
    public void subq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0098((byte) 0x81, (byte) 0x05, disp32, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code subw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 6349, Serial#: 596
    public void subw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0099((byte) 0x81, (byte) 0x05, disp32, base, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 6350, Serial#: 2157
    public void rip_sub(int rel32, AMD64GeneralRegister16 source) {
        assemble0100((byte) 0x29, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 6351, Serial#: 2139
    public void rip_sub(int rel32, AMD64GeneralRegister32 source) {
        assemble0101((byte) 0x29, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 6352, Serial#: 2148
    public void rip_sub(int rel32, AMD64GeneralRegister64 source) {
        assemble0102((byte) 0x29, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 6353, Serial#: 2130
    public void rip_sub(int rel32, AMD64GeneralRegister8 source) {
        assemble0103((byte) 0x28, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code subb  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6354, Serial#: 343
    public void m_subb(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0104((byte) 0x80, (byte) 0x05, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code subl  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6355, Serial#: 631
    public void m_subl(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0104((byte) 0x83, (byte) 0x05, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code subq  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6356, Serial#: 703
    public void m_subq(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0105((byte) 0x83, (byte) 0x05, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code subw  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6357, Serial#: 775
    public void m_subw(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0106((byte) 0x83, (byte) 0x05, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6358, Serial#: 2156
    public void m_sub(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0107((byte) 0x29, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6359, Serial#: 2138
    public void m_sub(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0108((byte) 0x29, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6360, Serial#: 2147
    public void m_sub(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0109((byte) 0x29, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6361, Serial#: 2129
    public void m_sub(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0110((byte) 0x28, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code subl  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 6362, Serial#: 415
    public void m_subl(int m32, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0111((byte) 0x81, (byte) 0x05, m32, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code subq  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 6363, Serial#: 487
    public void m_subq(int m32, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0112((byte) 0x81, (byte) 0x05, m32, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code subw  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 6364, Serial#: 559
    public void m_subw(int m32, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0113((byte) 0x81, (byte) 0x05, m32, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code subb  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 6365, Serial#: 379
    public void subb(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0114((byte) 0x80, (byte) 0x05, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code subl  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 6366, Serial#: 667
    public void subl(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0114((byte) 0x83, (byte) 0x05, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code subq  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 6367, Serial#: 739
    public void subq(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0115((byte) 0x83, (byte) 0x05, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code subw  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 6368, Serial#: 811
    public void subw(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0116((byte) 0x83, (byte) 0x05, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6369, Serial#: 2160
    public void sub(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0117((byte) 0x29, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6370, Serial#: 2142
    public void sub(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0118((byte) 0x29, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6371, Serial#: 2151
    public void sub(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0119((byte) 0x29, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6372, Serial#: 2133
    public void sub(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0120((byte) 0x28, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code subl  }<i>disp32</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 6373, Serial#: 451
    public void subl(int disp32, AMD64IndirectRegister64 destination, int imm32) {
        assemble0121((byte) 0x81, (byte) 0x05, disp32, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code subq  }<i>disp32</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 6374, Serial#: 523
    public void subq(int disp32, AMD64IndirectRegister64 destination, int imm32) {
        assemble0122((byte) 0x81, (byte) 0x05, disp32, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code subw  }<i>disp32</i>, <i>destination</i>, <i>imm16</i>
     */
    // Template#: 6375, Serial#: 595
    public void subw(int disp32, AMD64IndirectRegister64 destination, short imm16) {
        assemble0123((byte) 0x81, (byte) 0x05, disp32, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code subl  }<i>rel32</i>, <i>imm32</i>
     */
    // Template#: 6376, Serial#: 416
    public void rip_subl(int rel32, int imm32) {
        assemble0124((byte) 0x81, (byte) 0x05, rel32, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code subq  }<i>rel32</i>, <i>imm32</i>
     */
    // Template#: 6377, Serial#: 488
    public void rip_subq(int rel32, int imm32) {
        assemble0125((byte) 0x81, (byte) 0x05, rel32, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code subw  }<i>rel32</i>, <i>imm16</i>
     */
    // Template#: 6378, Serial#: 560
    public void rip_subw(int rel32, short imm16) {
        assemble0126((byte) 0x81, (byte) 0x05, rel32, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>imm16</i>
     */
    // Template#: 6379, Serial#: 2198
    public void sub_AX(short imm16) {
        assemble0127((byte) 0x2D, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code subpd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6380, Serial#: 5475
    public void subpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x5C, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code subpd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 6381, Serial#: 5474
    public void subpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x5C, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code subpd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6382, Serial#: 5471
    public void subpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x5C, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code subpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6383, Serial#: 5470
    public void subpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x5C, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code subpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6384, Serial#: 5478
    public void subpd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x5C, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code subpd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 6385, Serial#: 5473
    public void rip_subpd(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x5C, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code subpd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6386, Serial#: 5477
    public void subpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x5C, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code subpd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6387, Serial#: 5472
    public void m_subpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x5C, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code subpd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 6388, Serial#: 5476
    public void subpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x5C, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code subps  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6389, Serial#: 5403
    public void subps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0137((byte) 0x5C, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code subps  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 6390, Serial#: 5402
    public void subps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0138((byte) 0x5C, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code subps  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6391, Serial#: 5399
    public void subps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0139((byte) 0x5C, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code subps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6392, Serial#: 5398
    public void subps(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0140((byte) 0x5C, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code subps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6393, Serial#: 5406
    public void subps(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0141((byte) 0x5C, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code subps  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 6394, Serial#: 5401
    public void rip_subps(AMD64XMMRegister destination, int rel32) {
        assemble0142((byte) 0x5C, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code subps  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6395, Serial#: 5405
    public void subps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0143((byte) 0x5C, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code subps  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6396, Serial#: 5400
    public void m_subps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0144((byte) 0x5C, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code subps  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 6397, Serial#: 5404
    public void subps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0145((byte) 0x5C, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code subsd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6398, Serial#: 5538
    public void subsd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0147((byte) 0x5C, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code subsd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 6399, Serial#: 5537
    public void subsd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0148((byte) 0x5C, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code subsd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6400, Serial#: 5534
    public void subsd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0149((byte) 0x5C, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code subsd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6401, Serial#: 5533
    public void subsd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0150((byte) 0x5C, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code subsd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6402, Serial#: 5541
    public void subsd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0151((byte) 0x5C, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code subsd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 6403, Serial#: 5536
    public void rip_subsd(AMD64XMMRegister destination, int rel32) {
        assemble0152((byte) 0x5C, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code subsd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6404, Serial#: 5540
    public void subsd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0153((byte) 0x5C, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code subsd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6405, Serial#: 5535
    public void m_subsd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0154((byte) 0x5C, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code subsd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 6406, Serial#: 5539
    public void subsd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0155((byte) 0x5C, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code subss  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6407, Serial#: 5610
    public void subss(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0156((byte) 0x5C, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code subss  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 6408, Serial#: 5609
    public void subss(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0157((byte) 0x5C, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code subss  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6409, Serial#: 5606
    public void subss(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0158((byte) 0x5C, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code subss  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6410, Serial#: 5605
    public void subss(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0159((byte) 0x5C, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code subss  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6411, Serial#: 5613
    public void subss(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0160((byte) 0x5C, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code subss  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 6412, Serial#: 5608
    public void rip_subss(AMD64XMMRegister destination, int rel32) {
        assemble0161((byte) 0x5C, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code subss  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6413, Serial#: 5612
    public void subss(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0162((byte) 0x5C, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code subss  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6414, Serial#: 5607
    public void m_subss(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0163((byte) 0x5C, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code subss  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 6415, Serial#: 5611
    public void subss(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0164((byte) 0x5C, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code swapgs  }
     */
    // Template#: 6416, Serial#: 3190
    public void swapgs() {
        assemble0466((byte) 0x01, (byte) 0x07);
    }

    /**
     * Pseudo-external assembler syntax: {@code syscall  }
     */
    // Template#: 6417, Serial#: 3247
    public void syscall() {
        assemble0252((byte) 0x05);
    }

    /**
     * Pseudo-external assembler syntax: {@code sysret  }
     */
    // Template#: 6418, Serial#: 3249
    public void sysret() {
        assemble0252((byte) 0x07);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>imm8</i>
     */
    // Template#: 6419, Serial#: 2475
    public void test_AL(byte imm8) {
        assemble0001((byte) 0xA8, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code testb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6420, Serial#: 1760
    public void testb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0002((byte) 0xF6, (byte) 0x00, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6421, Serial#: 857
    public void test(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0005((byte) 0x85, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6422, Serial#: 839
    public void test(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0006((byte) 0x85, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6423, Serial#: 848
    public void test(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0007((byte) 0x85, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6424, Serial#: 830
    public void test(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0008((byte) 0x84, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code testl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 6425, Serial#: 1823
    public void testl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0009((byte) 0xF7, (byte) 0x00, disp8, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code testq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 6426, Serial#: 1886
    public void testq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0010((byte) 0xF7, (byte) 0x00, disp8, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code testw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 6427, Serial#: 1949
    public void testw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0011((byte) 0xF7, (byte) 0x00, disp8, base, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code testb  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 6428, Serial#: 1759
    public void testb(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0012((byte) 0xF6, (byte) 0x00, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6429, Serial#: 856
    public void test(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0015((byte) 0x85, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6430, Serial#: 838
    public void test(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0016((byte) 0x85, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6431, Serial#: 847
    public void test(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0017((byte) 0x85, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6432, Serial#: 829
    public void test(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0018((byte) 0x84, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code testl  }<i>disp8</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 6433, Serial#: 1822
    public void testl(byte disp8, AMD64IndirectRegister64 destination, int imm32) {
        assemble0019((byte) 0xF7, (byte) 0x00, disp8, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code testq  }<i>disp8</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 6434, Serial#: 1885
    public void testq(byte disp8, AMD64IndirectRegister64 destination, int imm32) {
        assemble0020((byte) 0xF7, (byte) 0x00, disp8, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code testw  }<i>disp8</i>, <i>destination</i>, <i>imm16</i>
     */
    // Template#: 6435, Serial#: 1948
    public void testw(byte disp8, AMD64IndirectRegister64 destination, short imm16) {
        assemble0021((byte) 0xF7, (byte) 0x00, disp8, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code testb  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6436, Serial#: 1732
    public void testb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0022((byte) 0xF6, (byte) 0x00, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6437, Serial#: 853
    public void test(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0025((byte) 0x85, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6438, Serial#: 835
    public void test(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0026((byte) 0x85, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6439, Serial#: 844
    public void test(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0027((byte) 0x85, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6440, Serial#: 826
    public void test(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0028((byte) 0x84, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code testl  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 6441, Serial#: 1795
    public void testl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0029((byte) 0xF7, (byte) 0x00, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code testq  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 6442, Serial#: 1858
    public void testq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0030((byte) 0xF7, (byte) 0x00, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code testw  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 6443, Serial#: 1921
    public void testw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0031((byte) 0xF7, (byte) 0x00, base, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6444, Serial#: 860
    public void test(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0036((byte) 0x85, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code testw  }<i>destination</i>, <i>imm16</i>
     */
    // Template#: 6445, Serial#: 1976
    public void testw(AMD64GeneralRegister16 destination, short imm16) {
        assemble0042((byte) 0xF7, (byte) 0x00, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6446, Serial#: 842
    public void test(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0047((byte) 0x85, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code testl  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 6447, Serial#: 1850
    public void testl(AMD64GeneralRegister32 destination, int imm32) {
        assemble0050((byte) 0xF7, (byte) 0x00, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6448, Serial#: 851
    public void test(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0058((byte) 0x85, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code testq  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 6449, Serial#: 1913
    public void testq(AMD64GeneralRegister64 destination, int imm32) {
        assemble0061((byte) 0xF7, (byte) 0x00, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code testb  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 6450, Serial#: 1787
    public void testb(AMD64GeneralRegister8 destination, byte imm8) {
        assemble0065((byte) 0xF6, (byte) 0x00, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6451, Serial#: 833
    public void test(AMD64GeneralRegister8 destination, AMD64GeneralRegister8 source) {
        assemble0069((byte) 0x84, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code testb  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 6452, Serial#: 1731
    public void testb(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0075((byte) 0xF6, (byte) 0x00, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6453, Serial#: 852
    public void test(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0078((byte) 0x85, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6454, Serial#: 834
    public void test(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0079((byte) 0x85, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6455, Serial#: 843
    public void test(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0080((byte) 0x85, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6456, Serial#: 825
    public void test(AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0081((byte) 0x84, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code testl  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 6457, Serial#: 1794
    public void testl(AMD64IndirectRegister64 destination, int imm32) {
        assemble0082((byte) 0xF7, (byte) 0x00, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code testq  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 6458, Serial#: 1857
    public void testq(AMD64IndirectRegister64 destination, int imm32) {
        assemble0083((byte) 0xF7, (byte) 0x00, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code testw  }<i>destination</i>, <i>imm16</i>
     */
    // Template#: 6459, Serial#: 1920
    public void testw(AMD64IndirectRegister64 destination, short imm16) {
        assemble0084((byte) 0xF7, (byte) 0x00, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>imm32</i>
     */
    // Template#: 6460, Serial#: 2476
    public void test_EAX(int imm32) {
        assemble0085((byte) 0xA9, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>imm32</i>
     */
    // Template#: 6461, Serial#: 2477
    public void test_RAX(int imm32) {
        assemble0086((byte) 0xA9, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code testb  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 6462, Serial#: 1734
    public void rip_testb(int rel32, byte imm8) {
        assemble0087((byte) 0xF6, (byte) 0x00, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code testb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6463, Serial#: 1774
    public void testb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0090((byte) 0xF6, (byte) 0x00, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6464, Serial#: 859
    public void test(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0093((byte) 0x85, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6465, Serial#: 841
    public void test(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0094((byte) 0x85, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6466, Serial#: 850
    public void test(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0095((byte) 0x85, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6467, Serial#: 832
    public void test(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0096((byte) 0x84, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code testl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 6468, Serial#: 1837
    public void testl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0097((byte) 0xF7, (byte) 0x00, disp32, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code testq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 6469, Serial#: 1900
    public void testq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0098((byte) 0xF7, (byte) 0x00, disp32, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code testw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 6470, Serial#: 1963
    public void testw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0099((byte) 0xF7, (byte) 0x00, disp32, base, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 6471, Serial#: 855
    public void rip_test(int rel32, AMD64GeneralRegister16 source) {
        assemble0100((byte) 0x85, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 6472, Serial#: 837
    public void rip_test(int rel32, AMD64GeneralRegister32 source) {
        assemble0101((byte) 0x85, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 6473, Serial#: 846
    public void rip_test(int rel32, AMD64GeneralRegister64 source) {
        assemble0102((byte) 0x85, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 6474, Serial#: 828
    public void rip_test(int rel32, AMD64GeneralRegister8 source) {
        assemble0103((byte) 0x84, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code testb  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6475, Serial#: 1733
    public void m_testb(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0104((byte) 0xF6, (byte) 0x00, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6476, Serial#: 854
    public void m_test(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0107((byte) 0x85, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6477, Serial#: 836
    public void m_test(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0108((byte) 0x85, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6478, Serial#: 845
    public void m_test(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0109((byte) 0x85, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6479, Serial#: 827
    public void m_test(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0110((byte) 0x84, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code testl  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 6480, Serial#: 1796
    public void m_testl(int m32, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0111((byte) 0xF7, (byte) 0x00, m32, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code testq  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 6481, Serial#: 1859
    public void m_testq(int m32, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0112((byte) 0xF7, (byte) 0x00, m32, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code testw  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 6482, Serial#: 1922
    public void m_testw(int m32, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0113((byte) 0xF7, (byte) 0x00, m32, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code testb  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 6483, Serial#: 1773
    public void testb(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0114((byte) 0xF6, (byte) 0x00, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6484, Serial#: 858
    public void test(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0117((byte) 0x85, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6485, Serial#: 840
    public void test(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0118((byte) 0x85, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6486, Serial#: 849
    public void test(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0119((byte) 0x85, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6487, Serial#: 831
    public void test(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0120((byte) 0x84, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code testl  }<i>disp32</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 6488, Serial#: 1836
    public void testl(int disp32, AMD64IndirectRegister64 destination, int imm32) {
        assemble0121((byte) 0xF7, (byte) 0x00, disp32, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code testq  }<i>disp32</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 6489, Serial#: 1899
    public void testq(int disp32, AMD64IndirectRegister64 destination, int imm32) {
        assemble0122((byte) 0xF7, (byte) 0x00, disp32, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code testw  }<i>disp32</i>, <i>destination</i>, <i>imm16</i>
     */
    // Template#: 6490, Serial#: 1962
    public void testw(int disp32, AMD64IndirectRegister64 destination, short imm16) {
        assemble0123((byte) 0xF7, (byte) 0x00, disp32, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code testl  }<i>rel32</i>, <i>imm32</i>
     */
    // Template#: 6491, Serial#: 1797
    public void rip_testl(int rel32, int imm32) {
        assemble0124((byte) 0xF7, (byte) 0x00, rel32, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code testq  }<i>rel32</i>, <i>imm32</i>
     */
    // Template#: 6492, Serial#: 1860
    public void rip_testq(int rel32, int imm32) {
        assemble0125((byte) 0xF7, (byte) 0x00, rel32, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code testw  }<i>rel32</i>, <i>imm16</i>
     */
    // Template#: 6493, Serial#: 1923
    public void rip_testw(int rel32, short imm16) {
        assemble0126((byte) 0xF7, (byte) 0x00, rel32, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>imm16</i>
     */
    // Template#: 6494, Serial#: 2478
    public void test_AX(short imm16) {
        assemble0127((byte) 0xA9, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code ucomisd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6495, Serial#: 5025
    public void ucomisd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x2E, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code ucomisd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 6496, Serial#: 5024
    public void ucomisd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x2E, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code ucomisd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6497, Serial#: 5021
    public void ucomisd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x2E, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code ucomisd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6498, Serial#: 5020
    public void ucomisd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x2E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code ucomisd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6499, Serial#: 5028
    public void ucomisd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x2E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code ucomisd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 6500, Serial#: 5023
    public void rip_ucomisd(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x2E, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code ucomisd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6501, Serial#: 5027
    public void ucomisd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x2E, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code ucomisd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6502, Serial#: 5022
    public void m_ucomisd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x2E, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code ucomisd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 6503, Serial#: 5026
    public void ucomisd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x2E, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code ucomiss  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6504, Serial#: 4955
    public void ucomiss(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0137((byte) 0x2E, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code ucomiss  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 6505, Serial#: 4954
    public void ucomiss(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0138((byte) 0x2E, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code ucomiss  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6506, Serial#: 4951
    public void ucomiss(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0139((byte) 0x2E, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code ucomiss  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6507, Serial#: 4950
    public void ucomiss(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0140((byte) 0x2E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code ucomiss  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6508, Serial#: 4958
    public void ucomiss(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0141((byte) 0x2E, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code ucomiss  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 6509, Serial#: 4953
    public void rip_ucomiss(AMD64XMMRegister destination, int rel32) {
        assemble0142((byte) 0x2E, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code ucomiss  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6510, Serial#: 4957
    public void ucomiss(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0143((byte) 0x2E, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code ucomiss  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6511, Serial#: 4952
    public void m_ucomiss(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0144((byte) 0x2E, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code ucomiss  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 6512, Serial#: 4956
    public void ucomiss(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0145((byte) 0x2E, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code ud2  }
     */
    // Template#: 6513, Serial#: 4848
    public void ud2() {
        assemble0252((byte) 0x0B);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpckhpd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6514, Serial#: 3364
    public void unpckhpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x15, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpckhpd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 6515, Serial#: 3363
    public void unpckhpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x15, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpckhpd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6516, Serial#: 3360
    public void unpckhpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x15, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpckhpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6517, Serial#: 3359
    public void unpckhpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x15, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpckhpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6518, Serial#: 3367
    public void unpckhpd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x15, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpckhpd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 6519, Serial#: 3362
    public void rip_unpckhpd(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x15, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpckhpd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6520, Serial#: 3366
    public void unpckhpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x15, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpckhpd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6521, Serial#: 3361
    public void m_unpckhpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x15, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpckhpd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 6522, Serial#: 3365
    public void unpckhpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x15, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpckhps  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6523, Serial#: 3297
    public void unpckhps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0137((byte) 0x15, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpckhps  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 6524, Serial#: 3296
    public void unpckhps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0138((byte) 0x15, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpckhps  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6525, Serial#: 3293
    public void unpckhps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0139((byte) 0x15, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpckhps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6526, Serial#: 3292
    public void unpckhps(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0140((byte) 0x15, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpckhps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6527, Serial#: 3300
    public void unpckhps(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0141((byte) 0x15, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpckhps  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 6528, Serial#: 3295
    public void rip_unpckhps(AMD64XMMRegister destination, int rel32) {
        assemble0142((byte) 0x15, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpckhps  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6529, Serial#: 3299
    public void unpckhps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0143((byte) 0x15, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpckhps  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6530, Serial#: 3294
    public void m_unpckhps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0144((byte) 0x15, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpckhps  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 6531, Serial#: 3298
    public void unpckhps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0145((byte) 0x15, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpcklpd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6532, Serial#: 3355
    public void unpcklpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x14, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpcklpd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 6533, Serial#: 3354
    public void unpcklpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x14, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpcklpd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6534, Serial#: 3351
    public void unpcklpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x14, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpcklpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6535, Serial#: 3350
    public void unpcklpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x14, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpcklpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6536, Serial#: 3358
    public void unpcklpd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x14, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpcklpd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 6537, Serial#: 3353
    public void rip_unpcklpd(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x14, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpcklpd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6538, Serial#: 3357
    public void unpcklpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x14, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpcklpd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6539, Serial#: 3352
    public void m_unpcklpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x14, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpcklpd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 6540, Serial#: 3356
    public void unpcklpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x14, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpcklps  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6541, Serial#: 3288
    public void unpcklps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0137((byte) 0x14, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpcklps  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 6542, Serial#: 3287
    public void unpcklps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0138((byte) 0x14, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpcklps  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6543, Serial#: 3284
    public void unpcklps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0139((byte) 0x14, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpcklps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6544, Serial#: 3283
    public void unpcklps(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0140((byte) 0x14, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpcklps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6545, Serial#: 3291
    public void unpcklps(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0141((byte) 0x14, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpcklps  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 6546, Serial#: 3286
    public void rip_unpcklps(AMD64XMMRegister destination, int rel32) {
        assemble0142((byte) 0x14, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpcklps  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6547, Serial#: 3290
    public void unpcklps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0143((byte) 0x14, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpcklps  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6548, Serial#: 3285
    public void m_unpcklps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0144((byte) 0x14, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpcklps  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 6549, Serial#: 3289
    public void unpcklps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0145((byte) 0x14, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code verr  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6550, Serial#: 3107
    public void verr(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0244((byte) 0x00, (byte) 0x04, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code verr  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 6551, Serial#: 3106
    public void verr(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0245((byte) 0x00, (byte) 0x04, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code verr  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6552, Serial#: 3091
    public void verr(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0246((byte) 0x00, (byte) 0x04, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code verr  }<i>destination</i>
     */
    // Template#: 6553, Serial#: 3124
    public void verr(AMD64GeneralRegister16 destination) {
        assemble0467((byte) 0x00, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code verr  }<i>destination</i>
     */
    // Template#: 6554, Serial#: 3090
    public void verr(AMD64IndirectRegister64 destination) {
        assemble0247((byte) 0x00, (byte) 0x04, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code verr  }<i>rel32</i>
     */
    // Template#: 6555, Serial#: 3093
    public void rip_verr(int rel32) {
        assemble0248((byte) 0x00, (byte) 0x04, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code verr  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6556, Serial#: 3119
    public void verr(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0249((byte) 0x00, (byte) 0x04, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code verr  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6557, Serial#: 3092
    public void m_verr(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0250((byte) 0x00, (byte) 0x04, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code verr  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 6558, Serial#: 3118
    public void verr(int disp32, AMD64IndirectRegister64 destination) {
        assemble0251((byte) 0x00, (byte) 0x04, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code verw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6559, Serial#: 3109
    public void verw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0244((byte) 0x00, (byte) 0x05, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code verw  }<i>disp8</i>, <i>destination</i>
     */
    // Template#: 6560, Serial#: 3108
    public void verw(byte disp8, AMD64IndirectRegister64 destination) {
        assemble0245((byte) 0x00, (byte) 0x05, disp8, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code verw  }<i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6561, Serial#: 3095
    public void verw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0246((byte) 0x00, (byte) 0x05, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code verw  }<i>destination</i>
     */
    // Template#: 6562, Serial#: 3125
    public void verw(AMD64GeneralRegister16 destination) {
        assemble0467((byte) 0x00, (byte) 0x05, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code verw  }<i>destination</i>
     */
    // Template#: 6563, Serial#: 3094
    public void verw(AMD64IndirectRegister64 destination) {
        assemble0247((byte) 0x00, (byte) 0x05, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code verw  }<i>rel32</i>
     */
    // Template#: 6564, Serial#: 3097
    public void rip_verw(int rel32) {
        assemble0248((byte) 0x00, (byte) 0x05, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code verw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6565, Serial#: 3121
    public void verw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0249((byte) 0x00, (byte) 0x05, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code verw  }<i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6566, Serial#: 3096
    public void m_verw(int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0250((byte) 0x00, (byte) 0x05, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code verw  }<i>disp32</i>, <i>destination</i>
     */
    // Template#: 6567, Serial#: 3120
    public void verw(int disp32, AMD64IndirectRegister64 destination) {
        assemble0251((byte) 0x00, (byte) 0x05, disp32, destination);
    }

    /**
     * Pseudo-external assembler syntax: {@code wbinvd  }
     */
    // Template#: 6568, Serial#: 4847
    public void wbinvd() {
        assemble0252((byte) 0x09);
    }

    /**
     * Pseudo-external assembler syntax: {@code wrmsr  }
     */
    // Template#: 6569, Serial#: 3440
    public void wrmsr() {
        assemble0252((byte) 0x30);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6570, Serial#: 4363
    public void xadd(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0195((byte) 0xC1, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6571, Serial#: 4345
    public void xadd(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0196((byte) 0xC1, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6572, Serial#: 4354
    public void xadd(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0197((byte) 0xC1, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6573, Serial#: 4336
    public void xadd(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0290((byte) 0xC0, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6574, Serial#: 4362
    public void xadd(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0199((byte) 0xC1, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6575, Serial#: 4344
    public void xadd(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0200((byte) 0xC1, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6576, Serial#: 4353
    public void xadd(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0201((byte) 0xC1, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6577, Serial#: 4335
    public void xadd(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0291((byte) 0xC0, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6578, Serial#: 4359
    public void xadd(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0203((byte) 0xC1, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6579, Serial#: 4341
    public void xadd(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0204((byte) 0xC1, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6580, Serial#: 4350
    public void xadd(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0205((byte) 0xC1, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6581, Serial#: 4332
    public void xadd(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0292((byte) 0xC0, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6582, Serial#: 4366
    public void xadd(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0207((byte) 0xC1, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6583, Serial#: 4348
    public void xadd(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0209((byte) 0xC1, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6584, Serial#: 4357
    public void xadd(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0211((byte) 0xC1, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6585, Serial#: 4339
    public void xadd(AMD64GeneralRegister8 destination, AMD64GeneralRegister8 source) {
        assemble0293((byte) 0xC0, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6586, Serial#: 4358
    public void xadd(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0213((byte) 0xC1, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6587, Serial#: 4340
    public void xadd(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0214((byte) 0xC1, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6588, Serial#: 4349
    public void xadd(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0215((byte) 0xC1, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6589, Serial#: 4331
    public void xadd(AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0294((byte) 0xC0, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6590, Serial#: 4365
    public void xadd(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0218((byte) 0xC1, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6591, Serial#: 4347
    public void xadd(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0219((byte) 0xC1, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6592, Serial#: 4356
    public void xadd(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0220((byte) 0xC1, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6593, Serial#: 4338
    public void xadd(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0295((byte) 0xC0, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 6594, Serial#: 4361
    public void rip_xadd(int rel32, AMD64GeneralRegister16 source) {
        assemble0221((byte) 0xC1, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 6595, Serial#: 4343
    public void rip_xadd(int rel32, AMD64GeneralRegister32 source) {
        assemble0222((byte) 0xC1, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 6596, Serial#: 4352
    public void rip_xadd(int rel32, AMD64GeneralRegister64 source) {
        assemble0223((byte) 0xC1, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 6597, Serial#: 4334
    public void rip_xadd(int rel32, AMD64GeneralRegister8 source) {
        assemble0296((byte) 0xC0, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6598, Serial#: 4360
    public void m_xadd(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0225((byte) 0xC1, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6599, Serial#: 4342
    public void m_xadd(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0226((byte) 0xC1, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6600, Serial#: 4351
    public void m_xadd(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0227((byte) 0xC1, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6601, Serial#: 4333
    public void m_xadd(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0297((byte) 0xC0, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6602, Serial#: 4364
    public void xadd(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0229((byte) 0xC1, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6603, Serial#: 4346
    public void xadd(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0230((byte) 0xC1, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6604, Serial#: 4355
    public void xadd(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0231((byte) 0xC1, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6605, Serial#: 4337
    public void xadd(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0298((byte) 0xC0, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6606, Serial#: 893
    public void xchg(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0005((byte) 0x87, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6607, Serial#: 875
    public void xchg(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0006((byte) 0x87, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6608, Serial#: 884
    public void xchg(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0007((byte) 0x87, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6609, Serial#: 866
    public void xchg(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0008((byte) 0x86, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6610, Serial#: 892
    public void xchg(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0015((byte) 0x87, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6611, Serial#: 874
    public void xchg(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0016((byte) 0x87, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6612, Serial#: 883
    public void xchg(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0017((byte) 0x87, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6613, Serial#: 865
    public void xchg(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0018((byte) 0x86, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6614, Serial#: 889
    public void xchg(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0025((byte) 0x87, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6615, Serial#: 871
    public void xchg(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0026((byte) 0x87, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6616, Serial#: 880
    public void xchg(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0027((byte) 0x87, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6617, Serial#: 862
    public void xchg(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0028((byte) 0x86, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>register</i>
     */
    // Template#: 6618, Serial#: 900
    public void xchg___AX(AMD64GeneralRegister16 register) {
        assemble0658((byte) 0x90, register);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6619, Serial#: 896
    public void xchg(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0036((byte) 0x87, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>register</i>
     */
    // Template#: 6620, Serial#: 898
    public void xchg___EAX(AMD64GeneralRegister32 register) {
        assemble0736((byte) 0x90, register);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6621, Serial#: 878
    public void xchg(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0047((byte) 0x87, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>register</i>
     */
    // Template#: 6622, Serial#: 899
    public void xchg___RAX(AMD64GeneralRegister64 register) {
        assemble0737((byte) 0x90, register);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6623, Serial#: 887
    public void xchg(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0058((byte) 0x87, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6624, Serial#: 869
    public void xchg(AMD64GeneralRegister8 destination, AMD64GeneralRegister8 source) {
        assemble0069((byte) 0x86, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6625, Serial#: 888
    public void xchg(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0078((byte) 0x87, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6626, Serial#: 870
    public void xchg(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0079((byte) 0x87, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6627, Serial#: 879
    public void xchg(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0080((byte) 0x87, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6628, Serial#: 861
    public void xchg(AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0081((byte) 0x86, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6629, Serial#: 895
    public void xchg(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0093((byte) 0x87, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6630, Serial#: 877
    public void xchg(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0094((byte) 0x87, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6631, Serial#: 886
    public void xchg(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0095((byte) 0x87, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6632, Serial#: 868
    public void xchg(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0096((byte) 0x86, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 6633, Serial#: 891
    public void rip_xchg(int rel32, AMD64GeneralRegister16 source) {
        assemble0100((byte) 0x87, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 6634, Serial#: 873
    public void rip_xchg(int rel32, AMD64GeneralRegister32 source) {
        assemble0101((byte) 0x87, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 6635, Serial#: 882
    public void rip_xchg(int rel32, AMD64GeneralRegister64 source) {
        assemble0102((byte) 0x87, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 6636, Serial#: 864
    public void rip_xchg(int rel32, AMD64GeneralRegister8 source) {
        assemble0103((byte) 0x86, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6637, Serial#: 890
    public void m_xchg(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0107((byte) 0x87, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6638, Serial#: 872
    public void m_xchg(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0108((byte) 0x87, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6639, Serial#: 881
    public void m_xchg(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0109((byte) 0x87, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6640, Serial#: 863
    public void m_xchg(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0110((byte) 0x86, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6641, Serial#: 894
    public void xchg(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0117((byte) 0x87, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6642, Serial#: 876
    public void xchg(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0118((byte) 0x87, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6643, Serial#: 885
    public void xchg(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0119((byte) 0x87, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6644, Serial#: 867
    public void xchg(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0120((byte) 0x86, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xlat  }
     */
    // Template#: 6645, Serial#: 1712
    public void xlat() {
        assemble0146((byte) 0xD7);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>imm8</i>
     */
    // Template#: 6646, Serial#: 285
    public void xor_AL(byte imm8) {
        assemble0001((byte) 0x34, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorb  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6647, Serial#: 366
    public void xorb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0002((byte) 0x80, (byte) 0x06, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6648, Serial#: 654
    public void xorl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0002((byte) 0x83, (byte) 0x06, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6649, Serial#: 726
    public void xorq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0003((byte) 0x83, (byte) 0x06, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6650, Serial#: 798
    public void xorw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0004((byte) 0x83, (byte) 0x06, disp8, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6651, Serial#: 249
    public void xor(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0005((byte) 0x31, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6652, Serial#: 231
    public void xor(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0006((byte) 0x31, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6653, Serial#: 240
    public void xor(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0007((byte) 0x31, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6654, Serial#: 222
    public void xor(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0008((byte) 0x30, disp8, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorl  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 6655, Serial#: 438
    public void xorl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0009((byte) 0x81, (byte) 0x06, disp8, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorq  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 6656, Serial#: 510
    public void xorq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0010((byte) 0x81, (byte) 0x06, disp8, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorw  }<i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 6657, Serial#: 582
    public void xorw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0011((byte) 0x81, (byte) 0x06, disp8, base, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorb  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 6658, Serial#: 365
    public void xorb(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0012((byte) 0x80, (byte) 0x06, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorl  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 6659, Serial#: 653
    public void xorl(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0012((byte) 0x83, (byte) 0x06, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorq  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 6660, Serial#: 725
    public void xorq(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0013((byte) 0x83, (byte) 0x06, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorw  }<i>disp8</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 6661, Serial#: 797
    public void xorw(byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0014((byte) 0x83, (byte) 0x06, disp8, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6662, Serial#: 248
    public void xor(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0015((byte) 0x31, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6663, Serial#: 230
    public void xor(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0016((byte) 0x31, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6664, Serial#: 239
    public void xor(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0017((byte) 0x31, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>disp8</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6665, Serial#: 221
    public void xor(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0018((byte) 0x30, disp8, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorl  }<i>disp8</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 6666, Serial#: 437
    public void xorl(byte disp8, AMD64IndirectRegister64 destination, int imm32) {
        assemble0019((byte) 0x81, (byte) 0x06, disp8, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorq  }<i>disp8</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 6667, Serial#: 509
    public void xorq(byte disp8, AMD64IndirectRegister64 destination, int imm32) {
        assemble0020((byte) 0x81, (byte) 0x06, disp8, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorw  }<i>disp8</i>, <i>destination</i>, <i>imm16</i>
     */
    // Template#: 6668, Serial#: 581
    public void xorw(byte disp8, AMD64IndirectRegister64 destination, short imm16) {
        assemble0021((byte) 0x81, (byte) 0x06, disp8, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorb  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6669, Serial#: 346
    public void xorb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0022((byte) 0x80, (byte) 0x06, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorl  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6670, Serial#: 634
    public void xorl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0022((byte) 0x83, (byte) 0x06, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorq  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6671, Serial#: 706
    public void xorq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0023((byte) 0x83, (byte) 0x06, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorw  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6672, Serial#: 778
    public void xorw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0024((byte) 0x83, (byte) 0x06, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6673, Serial#: 245
    public void xor(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0025((byte) 0x31, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6674, Serial#: 227
    public void xor(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0026((byte) 0x31, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6675, Serial#: 236
    public void xor(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0027((byte) 0x31, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6676, Serial#: 218
    public void xor(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0028((byte) 0x30, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorl  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 6677, Serial#: 418
    public void xorl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0029((byte) 0x81, (byte) 0x06, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorq  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 6678, Serial#: 490
    public void xorq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0030((byte) 0x81, (byte) 0x06, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorw  }<i>base</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 6679, Serial#: 562
    public void xorw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0031((byte) 0x81, (byte) 0x06, base, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 6680, Serial#: 823
    public void xorw(AMD64GeneralRegister16 destination, byte imm8) {
        assemble0032((byte) 0x83, (byte) 0x06, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6681, Serial#: 282
    public void xor(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0033((byte) 0x33, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 6682, Serial#: 281
    public void xor(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0034((byte) 0x33, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6683, Serial#: 278
    public void xor(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0035((byte) 0x33, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6684, Serial#: 252
    public void xor(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        assemble0036((byte) 0x31, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6685, Serial#: 277
    public void xor(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        assemble0037((byte) 0x33, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 6686, Serial#: 280
    public void rip_xor(AMD64GeneralRegister16 destination, int rel32) {
        assemble0038((byte) 0x33, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6687, Serial#: 284
    public void xor(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0039((byte) 0x33, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6688, Serial#: 279
    public void m_xor(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0040((byte) 0x33, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 6689, Serial#: 283
    public void xor(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0041((byte) 0x33, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorw  }<i>destination</i>, <i>imm16</i>
     */
    // Template#: 6690, Serial#: 607
    public void xorw(AMD64GeneralRegister16 destination, short imm16) {
        assemble0042((byte) 0x81, (byte) 0x06, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorl  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 6691, Serial#: 679
    public void xorl(AMD64GeneralRegister32 destination, byte imm8) {
        assemble0043((byte) 0x83, (byte) 0x06, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6692, Serial#: 266
    public void xor(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0044((byte) 0x33, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 6693, Serial#: 265
    public void xor(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0045((byte) 0x33, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6694, Serial#: 262
    public void xor(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0046((byte) 0x33, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6695, Serial#: 234
    public void xor(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        assemble0047((byte) 0x31, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6696, Serial#: 261
    public void xor(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        assemble0048((byte) 0x33, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 6697, Serial#: 264
    public void rip_xor(AMD64GeneralRegister32 destination, int rel32) {
        assemble0049((byte) 0x33, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorl  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 6698, Serial#: 463
    public void xorl(AMD64GeneralRegister32 destination, int imm32) {
        assemble0050((byte) 0x81, (byte) 0x06, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6699, Serial#: 268
    public void xor(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0051((byte) 0x33, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6700, Serial#: 263
    public void m_xor(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0052((byte) 0x33, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 6701, Serial#: 267
    public void xor(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0053((byte) 0x33, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 6702, Serial#: 751
    public void xorq(AMD64GeneralRegister64 destination, byte imm8) {
        assemble0054((byte) 0x83, (byte) 0x06, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6703, Serial#: 274
    public void xor(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0055((byte) 0x33, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 6704, Serial#: 273
    public void xor(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0056((byte) 0x33, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6705, Serial#: 270
    public void xor(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0057((byte) 0x33, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6706, Serial#: 243
    public void xor(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0058((byte) 0x31, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6707, Serial#: 269
    public void xor(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        assemble0059((byte) 0x33, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 6708, Serial#: 272
    public void rip_xor(AMD64GeneralRegister64 destination, int rel32) {
        assemble0060((byte) 0x33, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorq  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 6709, Serial#: 535
    public void xorq(AMD64GeneralRegister64 destination, int imm32) {
        assemble0061((byte) 0x81, (byte) 0x06, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6710, Serial#: 276
    public void xor(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0062((byte) 0x33, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6711, Serial#: 271
    public void m_xor(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0063((byte) 0x33, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 6712, Serial#: 275
    public void xor(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0064((byte) 0x33, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorb  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 6713, Serial#: 391
    public void xorb(AMD64GeneralRegister8 destination, byte imm8) {
        assemble0065((byte) 0x80, (byte) 0x06, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6714, Serial#: 258
    public void xor(AMD64GeneralRegister8 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0066((byte) 0x32, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 6715, Serial#: 257
    public void xor(AMD64GeneralRegister8 destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0067((byte) 0x32, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6716, Serial#: 254
    public void xor(AMD64GeneralRegister8 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0068((byte) 0x32, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6717, Serial#: 225
    public void xor(AMD64GeneralRegister8 destination, AMD64GeneralRegister8 source) {
        assemble0069((byte) 0x30, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6718, Serial#: 253
    public void xor(AMD64GeneralRegister8 destination, AMD64IndirectRegister64 source) {
        assemble0070((byte) 0x32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 6719, Serial#: 256
    public void rip_xor(AMD64GeneralRegister8 destination, int rel32) {
        assemble0071((byte) 0x32, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6720, Serial#: 260
    public void xor(AMD64GeneralRegister8 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0072((byte) 0x32, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6721, Serial#: 255
    public void m_xor(AMD64GeneralRegister8 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0073((byte) 0x32, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 6722, Serial#: 259
    public void xor(AMD64GeneralRegister8 destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0074((byte) 0x32, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorb  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 6723, Serial#: 345
    public void xorb(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0075((byte) 0x80, (byte) 0x06, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorl  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 6724, Serial#: 633
    public void xorl(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0075((byte) 0x83, (byte) 0x06, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorq  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 6725, Serial#: 705
    public void xorq(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0076((byte) 0x83, (byte) 0x06, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorw  }<i>destination</i>, <i>imm8</i>
     */
    // Template#: 6726, Serial#: 777
    public void xorw(AMD64IndirectRegister64 destination, byte imm8) {
        assemble0077((byte) 0x83, (byte) 0x06, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6727, Serial#: 244
    public void xor(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0078((byte) 0x31, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6728, Serial#: 226
    public void xor(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0079((byte) 0x31, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6729, Serial#: 235
    public void xor(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0080((byte) 0x31, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6730, Serial#: 217
    public void xor(AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0081((byte) 0x30, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorl  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 6731, Serial#: 417
    public void xorl(AMD64IndirectRegister64 destination, int imm32) {
        assemble0082((byte) 0x81, (byte) 0x06, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorq  }<i>destination</i>, <i>imm32</i>
     */
    // Template#: 6732, Serial#: 489
    public void xorq(AMD64IndirectRegister64 destination, int imm32) {
        assemble0083((byte) 0x81, (byte) 0x06, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorw  }<i>destination</i>, <i>imm16</i>
     */
    // Template#: 6733, Serial#: 561
    public void xorw(AMD64IndirectRegister64 destination, short imm16) {
        assemble0084((byte) 0x81, (byte) 0x06, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>imm32</i>
     */
    // Template#: 6734, Serial#: 286
    public void xor_EAX(int imm32) {
        assemble0085((byte) 0x35, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>imm32</i>
     */
    // Template#: 6735, Serial#: 287
    public void xor_RAX(int imm32) {
        assemble0086((byte) 0x35, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorb  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 6736, Serial#: 348
    public void rip_xorb(int rel32, byte imm8) {
        assemble0087((byte) 0x80, (byte) 0x06, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorl  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 6737, Serial#: 636
    public void rip_xorl(int rel32, byte imm8) {
        assemble0087((byte) 0x83, (byte) 0x06, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorq  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 6738, Serial#: 708
    public void rip_xorq(int rel32, byte imm8) {
        assemble0088((byte) 0x83, (byte) 0x06, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorw  }<i>rel32</i>, <i>imm8</i>
     */
    // Template#: 6739, Serial#: 780
    public void rip_xorw(int rel32, byte imm8) {
        assemble0089((byte) 0x83, (byte) 0x06, rel32, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorb  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6740, Serial#: 382
    public void xorb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0090((byte) 0x80, (byte) 0x06, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6741, Serial#: 670
    public void xorl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0090((byte) 0x83, (byte) 0x06, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6742, Serial#: 742
    public void xorq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0091((byte) 0x83, (byte) 0x06, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6743, Serial#: 814
    public void xorw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0092((byte) 0x83, (byte) 0x06, disp32, base, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6744, Serial#: 251
    public void xor(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0093((byte) 0x31, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6745, Serial#: 233
    public void xor(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0094((byte) 0x31, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6746, Serial#: 242
    public void xor(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0095((byte) 0x31, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6747, Serial#: 224
    public void xor(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0096((byte) 0x30, disp32, base, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorl  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 6748, Serial#: 454
    public void xorl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0097((byte) 0x81, (byte) 0x06, disp32, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorq  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 6749, Serial#: 526
    public void xorq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0098((byte) 0x81, (byte) 0x06, disp32, base, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorw  }<i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 6750, Serial#: 598
    public void xorw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0099((byte) 0x81, (byte) 0x06, disp32, base, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 6751, Serial#: 247
    public void rip_xor(int rel32, AMD64GeneralRegister16 source) {
        assemble0100((byte) 0x31, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 6752, Serial#: 229
    public void rip_xor(int rel32, AMD64GeneralRegister32 source) {
        assemble0101((byte) 0x31, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 6753, Serial#: 238
    public void rip_xor(int rel32, AMD64GeneralRegister64 source) {
        assemble0102((byte) 0x31, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>rel32</i>, <i>source</i>
     */
    // Template#: 6754, Serial#: 220
    public void rip_xor(int rel32, AMD64GeneralRegister8 source) {
        assemble0103((byte) 0x30, rel32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorb  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6755, Serial#: 347
    public void m_xorb(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0104((byte) 0x80, (byte) 0x06, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorl  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6756, Serial#: 635
    public void m_xorl(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0104((byte) 0x83, (byte) 0x06, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorq  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6757, Serial#: 707
    public void m_xorq(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0105((byte) 0x83, (byte) 0x06, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorw  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     */
    // Template#: 6758, Serial#: 779
    public void m_xorw(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        assemble0106((byte) 0x83, (byte) 0x06, m32, index, scale, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6759, Serial#: 246
    public void m_xor(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        assemble0107((byte) 0x31, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6760, Serial#: 228
    public void m_xor(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        assemble0108((byte) 0x31, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6761, Serial#: 237
    public void m_xor(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        assemble0109((byte) 0x31, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     */
    // Template#: 6762, Serial#: 219
    public void m_xor(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        assemble0110((byte) 0x30, m32, index, scale, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorl  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 6763, Serial#: 419
    public void m_xorl(int m32, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0111((byte) 0x81, (byte) 0x06, m32, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorq  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     */
    // Template#: 6764, Serial#: 491
    public void m_xorq(int m32, AMD64IndexRegister64 index, Scale scale, int imm32) {
        assemble0112((byte) 0x81, (byte) 0x06, m32, index, scale, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorw  }<i>m32</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     */
    // Template#: 6765, Serial#: 563
    public void m_xorw(int m32, AMD64IndexRegister64 index, Scale scale, short imm16) {
        assemble0113((byte) 0x81, (byte) 0x06, m32, index, scale, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorb  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 6766, Serial#: 381
    public void xorb(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0114((byte) 0x80, (byte) 0x06, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorl  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 6767, Serial#: 669
    public void xorl(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0114((byte) 0x83, (byte) 0x06, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorq  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 6768, Serial#: 741
    public void xorq(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0115((byte) 0x83, (byte) 0x06, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorw  }<i>disp32</i>, <i>destination</i>, <i>imm8</i>
     */
    // Template#: 6769, Serial#: 813
    public void xorw(int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        assemble0116((byte) 0x83, (byte) 0x06, disp32, destination, imm8);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6770, Serial#: 250
    public void xor(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        assemble0117((byte) 0x31, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6771, Serial#: 232
    public void xor(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        assemble0118((byte) 0x31, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6772, Serial#: 241
    public void xor(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        assemble0119((byte) 0x31, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>disp32</i>, <i>destination</i>, <i>source</i>
     */
    // Template#: 6773, Serial#: 223
    public void xor(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        assemble0120((byte) 0x30, disp32, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorl  }<i>disp32</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 6774, Serial#: 453
    public void xorl(int disp32, AMD64IndirectRegister64 destination, int imm32) {
        assemble0121((byte) 0x81, (byte) 0x06, disp32, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorq  }<i>disp32</i>, <i>destination</i>, <i>imm32</i>
     */
    // Template#: 6775, Serial#: 525
    public void xorq(int disp32, AMD64IndirectRegister64 destination, int imm32) {
        assemble0122((byte) 0x81, (byte) 0x06, disp32, destination, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorw  }<i>disp32</i>, <i>destination</i>, <i>imm16</i>
     */
    // Template#: 6776, Serial#: 597
    public void xorw(int disp32, AMD64IndirectRegister64 destination, short imm16) {
        assemble0123((byte) 0x81, (byte) 0x06, disp32, destination, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorl  }<i>rel32</i>, <i>imm32</i>
     */
    // Template#: 6777, Serial#: 420
    public void rip_xorl(int rel32, int imm32) {
        assemble0124((byte) 0x81, (byte) 0x06, rel32, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorq  }<i>rel32</i>, <i>imm32</i>
     */
    // Template#: 6778, Serial#: 492
    public void rip_xorq(int rel32, int imm32) {
        assemble0125((byte) 0x81, (byte) 0x06, rel32, imm32);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorw  }<i>rel32</i>, <i>imm16</i>
     */
    // Template#: 6779, Serial#: 564
    public void rip_xorw(int rel32, short imm16) {
        assemble0126((byte) 0x81, (byte) 0x06, rel32, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>imm16</i>
     */
    // Template#: 6780, Serial#: 288
    public void xor_AX(short imm16) {
        assemble0127((byte) 0x35, imm16);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorpd  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6781, Serial#: 3766
    public void xorpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0128((byte) 0x57, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorpd  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 6782, Serial#: 3765
    public void xorpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0129((byte) 0x57, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorpd  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6783, Serial#: 3762
    public void xorpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0130((byte) 0x57, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6784, Serial#: 3761
    public void xorpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0131((byte) 0x57, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorpd  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6785, Serial#: 3769
    public void xorpd(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0132((byte) 0x57, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorpd  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 6786, Serial#: 3764
    public void rip_xorpd(AMD64XMMRegister destination, int rel32) {
        assemble0133((byte) 0x57, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorpd  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6787, Serial#: 3768
    public void xorpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0134((byte) 0x57, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorpd  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6788, Serial#: 3763
    public void m_xorpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0135((byte) 0x57, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorpd  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 6789, Serial#: 3767
    public void xorpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0136((byte) 0x57, destination, disp32, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorps  }<i>destination</i>, <i>disp8</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6790, Serial#: 3720
    public void xorps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0137((byte) 0x57, destination, disp8, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorps  }<i>destination</i>, <i>disp8</i>, <i>source</i>
     */
    // Template#: 6791, Serial#: 3719
    public void xorps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        assemble0138((byte) 0x57, destination, disp8, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorps  }<i>destination</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6792, Serial#: 3716
    public void xorps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0139((byte) 0x57, destination, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6793, Serial#: 3715
    public void xorps(AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        assemble0140((byte) 0x57, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorps  }<i>destination</i>, <i>source</i>
     */
    // Template#: 6794, Serial#: 3723
    public void xorps(AMD64XMMRegister destination, AMD64XMMRegister source) {
        assemble0141((byte) 0x57, destination, source);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorps  }<i>destination</i>, <i>rel32</i>
     */
    // Template#: 6795, Serial#: 3718
    public void rip_xorps(AMD64XMMRegister destination, int rel32) {
        assemble0142((byte) 0x57, destination, rel32);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorps  }<i>destination</i>, <i>disp32</i>, <i>base</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6796, Serial#: 3722
    public void xorps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        assemble0143((byte) 0x57, destination, disp32, base, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorps  }<i>destination</i>, <i>m32</i>, <i>index</i>, <i>scale</i>
     */
    // Template#: 6797, Serial#: 3717
    public void m_xorps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        assemble0144((byte) 0x57, destination, m32, index, scale);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorps  }<i>destination</i>, <i>disp32</i>, <i>source</i>
     */
    // Template#: 6798, Serial#: 3721
    public void xorps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        assemble0145((byte) 0x57, destination, disp32, source);
    }

    private void assemble0001(byte opcode1, byte imm8) {
        emitByte(opcode1);
        emitByte(imm8); // appended
    }

    private void assemble0002(byte opcode1, byte modRmOpcode, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
        emitByte(imm8); // appended
    }

    private void assemble0003(byte opcode1, byte modRmOpcode, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        byte rex = (byte) 0x48;
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
        emitByte(imm8); // appended
    }

    private void assemble0004(byte opcode1, byte modRmOpcode, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
        emitByte(imm8); // appended
    }

    private void assemble0005(byte opcode1, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0006(byte opcode1, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0007(byte opcode1, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        byte rex = (byte) 0x48;
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0008(byte opcode1, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.requiresRexPrefix()) {
            rex |= 0x40;
            if (source.value() >= 8) {
                rex |= 1 << 2; // mod field extension by REX.R bit
            }
        }
        if (rex != (byte) 0) {
            if (source.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + source.name() + " in the presence of a REX prefix");
            }
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0009(byte opcode1, byte modRmOpcode, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0010(byte opcode1, byte modRmOpcode, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        byte rex = (byte) 0x48;
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0011(byte opcode1, byte modRmOpcode, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
        // appended:
        emitByte((byte) (imm16 & 0xff));
        imm16 >>= 8;
        emitByte((byte) (imm16 & 0xff));
    }

    private void assemble0012(byte opcode1, byte modRmOpcode, byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
        emitByte(imm8); // appended
    }

    private void assemble0013(byte opcode1, byte modRmOpcode, byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
        emitByte(imm8); // appended
    }

    private void assemble0014(byte opcode1, byte modRmOpcode, byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
        emitByte(imm8); // appended
    }

    private void assemble0015(byte opcode1, byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0016(byte opcode1, byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0017(byte opcode1, byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0018(byte opcode1, byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.requiresRexPrefix()) {
            rex |= 0x40;
            if (source.value() >= 8) {
                rex |= 1 << 2; // mod field extension by REX.R bit
            }
        }
        if (rex != (byte) 0) {
            if (source.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + source.name() + " in the presence of a REX prefix");
            }
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0019(byte opcode1, byte modRmOpcode, byte disp8, AMD64IndirectRegister64 destination, int imm32) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0020(byte opcode1, byte modRmOpcode, byte disp8, AMD64IndirectRegister64 destination, int imm32) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0021(byte opcode1, byte modRmOpcode, byte disp8, AMD64IndirectRegister64 destination, short imm16) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
        // appended:
        emitByte((byte) (imm16 & 0xff));
        imm16 >>= 8;
        emitByte((byte) (imm16 & 0xff));
    }

    private void assemble0022(byte opcode1, byte modRmOpcode, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0002(opcode1, modRmOpcode, (byte) 0, base, index, scale, imm8);
            return;
        }
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(imm8); // appended
    }

    private void assemble0023(byte opcode1, byte modRmOpcode, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0003(opcode1, modRmOpcode, (byte) 0, base, index, scale, imm8);
            return;
        }
        byte rex = (byte) 0x48;
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(imm8); // appended
    }

    private void assemble0024(byte opcode1, byte modRmOpcode, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0004(opcode1, modRmOpcode, (byte) 0, base, index, scale, imm8);
            return;
        }
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(imm8); // appended
    }

    private void assemble0025(byte opcode1, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0005(opcode1, (byte) 0, base, index, scale, source);
            return;
        }
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0026(byte opcode1, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0006(opcode1, (byte) 0, base, index, scale, source);
            return;
        }
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0027(byte opcode1, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0007(opcode1, (byte) 0, base, index, scale, source);
            return;
        }
        byte rex = (byte) 0x48;
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0028(byte opcode1, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0008(opcode1, (byte) 0, base, index, scale, source);
            return;
        }
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.requiresRexPrefix()) {
            rex |= 0x40;
            if (source.value() >= 8) {
                rex |= 1 << 2; // mod field extension by REX.R bit
            }
        }
        if (rex != (byte) 0) {
            if (source.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + source.name() + " in the presence of a REX prefix");
            }
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0029(byte opcode1, byte modRmOpcode, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0009(opcode1, modRmOpcode, (byte) 0, base, index, scale, imm32);
            return;
        }
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0030(byte opcode1, byte modRmOpcode, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0010(opcode1, modRmOpcode, (byte) 0, base, index, scale, imm32);
            return;
        }
        byte rex = (byte) 0x48;
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0031(byte opcode1, byte modRmOpcode, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0011(opcode1, modRmOpcode, (byte) 0, base, index, scale, imm16);
            return;
        }
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (imm16 & 0xff));
        imm16 >>= 8;
        emitByte((byte) (imm16 & 0xff));
    }

    private void assemble0032(byte opcode1, byte modRmOpcode, AMD64GeneralRegister16 destination, byte imm8) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((3 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        emitByte(imm8); // appended
    }

    private void assemble0033(byte opcode1, AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0034(byte opcode1, AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0035(byte opcode1, AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0033(opcode1, destination, (byte) 0, base, index, scale);
            return;
        }
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0036(byte opcode1, AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
    }

    private void assemble0037(byte opcode1, AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0034(opcode1, destination, (byte) 0, source);
            return;
        }
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0038(byte opcode1, AMD64GeneralRegister16 destination, int rel32) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0039(byte opcode1, AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0040(byte opcode1, AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0041(byte opcode1, AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0042(byte opcode1, byte modRmOpcode, AMD64GeneralRegister16 destination, short imm16) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((3 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (imm16 & 0xff));
        imm16 >>= 8;
        emitByte((byte) (imm16 & 0xff));
    }

    private void assemble0043(byte opcode1, byte modRmOpcode, AMD64GeneralRegister32 destination, byte imm8) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((3 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        emitByte(imm8); // appended
    }

    private void assemble0044(byte opcode1, AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0045(byte opcode1, AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0046(byte opcode1, AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0044(opcode1, destination, (byte) 0, base, index, scale);
            return;
        }
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0047(byte opcode1, AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
    }

    private void assemble0048(byte opcode1, AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0045(opcode1, destination, (byte) 0, source);
            return;
        }
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0049(byte opcode1, AMD64GeneralRegister32 destination, int rel32) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0050(byte opcode1, byte modRmOpcode, AMD64GeneralRegister32 destination, int imm32) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((3 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0051(byte opcode1, AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0052(byte opcode1, AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0053(byte opcode1, AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0054(byte opcode1, byte modRmOpcode, AMD64GeneralRegister64 destination, byte imm8) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((3 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        emitByte(imm8); // appended
    }

    private void assemble0055(byte opcode1, AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0056(byte opcode1, AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0057(byte opcode1, AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0055(opcode1, destination, (byte) 0, base, index, scale);
            return;
        }
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0058(byte opcode1, AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
    }

    private void assemble0059(byte opcode1, AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0056(opcode1, destination, (byte) 0, source);
            return;
        }
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0060(byte opcode1, AMD64GeneralRegister64 destination, int rel32) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0061(byte opcode1, byte modRmOpcode, AMD64GeneralRegister64 destination, int imm32) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((3 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0062(byte opcode1, AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0063(byte opcode1, AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0064(byte opcode1, AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0065(byte opcode1, byte modRmOpcode, AMD64GeneralRegister8 destination, byte imm8) {
        byte rex = (byte) 0;
        if (destination.requiresRexPrefix()) {
            rex |= 0x40;
            if (destination.value() >= 8) {
                rex |= 1 << 0; // rm field extension by REX.B bit
            }
        }
        if (rex != (byte) 0) {
            if (destination.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + destination.name() + " in the presence of a REX prefix");
            }
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((3 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        emitByte(imm8); // appended
    }

    private void assemble0066(byte opcode1, AMD64GeneralRegister8 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0;
        if (destination.requiresRexPrefix()) {
            rex |= 0x40;
            if (destination.value() >= 8) {
                rex |= 1 << 2; // mod field extension by REX.R bit
            }
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            if (destination.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + destination.name() + " in the presence of a REX prefix");
            }
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0067(byte opcode1, AMD64GeneralRegister8 destination, byte disp8, AMD64IndirectRegister64 source) {
        byte rex = (byte) 0;
        if (destination.requiresRexPrefix()) {
            rex |= 0x40;
            if (destination.value() >= 8) {
                rex |= 1 << 2; // mod field extension by REX.R bit
            }
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            if (destination.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + destination.name() + " in the presence of a REX prefix");
            }
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0068(byte opcode1, AMD64GeneralRegister8 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0066(opcode1, destination, (byte) 0, base, index, scale);
            return;
        }
        byte rex = (byte) 0;
        if (destination.requiresRexPrefix()) {
            rex |= 0x40;
            if (destination.value() >= 8) {
                rex |= 1 << 2; // mod field extension by REX.R bit
            }
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            if (destination.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + destination.name() + " in the presence of a REX prefix");
            }
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0069(byte opcode1, AMD64GeneralRegister8 destination, AMD64GeneralRegister8 source) {
        byte rex = (byte) 0;
        if (destination.requiresRexPrefix()) {
            rex |= 0x40;
            if (destination.value() >= 8) {
                rex |= 1 << 0; // rm field extension by REX.B bit
            }
        }
        if (source.requiresRexPrefix()) {
            rex |= 0x40;
            if (source.value() >= 8) {
                rex |= 1 << 2; // mod field extension by REX.R bit
            }
        }
        if (rex != (byte) 0) {
            if (destination.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + destination.name() + " in the presence of a REX prefix");
            }
            if (source.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + source.name() + " in the presence of a REX prefix");
            }
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
    }

    private void assemble0070(byte opcode1, AMD64GeneralRegister8 destination, AMD64IndirectRegister64 source) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0067(opcode1, destination, (byte) 0, source);
            return;
        }
        byte rex = (byte) 0;
        if (destination.requiresRexPrefix()) {
            rex |= 0x40;
            if (destination.value() >= 8) {
                rex |= 1 << 2; // mod field extension by REX.R bit
            }
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            if (destination.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + destination.name() + " in the presence of a REX prefix");
            }
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0071(byte opcode1, AMD64GeneralRegister8 destination, int rel32) {
        byte rex = (byte) 0;
        if (destination.requiresRexPrefix()) {
            rex |= 0x40;
            if (destination.value() >= 8) {
                rex |= 1 << 2; // mod field extension by REX.R bit
            }
        }
        if (rex != (byte) 0) {
            if (destination.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + destination.name() + " in the presence of a REX prefix");
            }
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0072(byte opcode1, AMD64GeneralRegister8 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0;
        if (destination.requiresRexPrefix()) {
            rex |= 0x40;
            if (destination.value() >= 8) {
                rex |= 1 << 2; // mod field extension by REX.R bit
            }
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            if (destination.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + destination.name() + " in the presence of a REX prefix");
            }
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0073(byte opcode1, AMD64GeneralRegister8 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0;
        if (destination.requiresRexPrefix()) {
            rex |= 0x40;
            if (destination.value() >= 8) {
                rex |= 1 << 2; // mod field extension by REX.R bit
            }
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            if (destination.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + destination.name() + " in the presence of a REX prefix");
            }
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0074(byte opcode1, AMD64GeneralRegister8 destination, int disp32, AMD64IndirectRegister64 source) {
        byte rex = (byte) 0;
        if (destination.requiresRexPrefix()) {
            rex |= 0x40;
            if (destination.value() >= 8) {
                rex |= 1 << 2; // mod field extension by REX.R bit
            }
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            if (destination.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + destination.name() + " in the presence of a REX prefix");
            }
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0075(byte opcode1, byte modRmOpcode, AMD64IndirectRegister64 destination, byte imm8) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0012(opcode1, modRmOpcode, (byte) 0, destination, imm8);
            return;
        }
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(imm8); // appended
    }

    private void assemble0076(byte opcode1, byte modRmOpcode, AMD64IndirectRegister64 destination, byte imm8) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0013(opcode1, modRmOpcode, (byte) 0, destination, imm8);
            return;
        }
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(imm8); // appended
    }

    private void assemble0077(byte opcode1, byte modRmOpcode, AMD64IndirectRegister64 destination, byte imm8) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0014(opcode1, modRmOpcode, (byte) 0, destination, imm8);
            return;
        }
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(imm8); // appended
    }

    private void assemble0078(byte opcode1, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0015(opcode1, (byte) 0, destination, source);
            return;
        }
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0079(byte opcode1, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0016(opcode1, (byte) 0, destination, source);
            return;
        }
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0080(byte opcode1, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0017(opcode1, (byte) 0, destination, source);
            return;
        }
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0081(byte opcode1, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0018(opcode1, (byte) 0, destination, source);
            return;
        }
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.requiresRexPrefix()) {
            rex |= 0x40;
            if (source.value() >= 8) {
                rex |= 1 << 2; // mod field extension by REX.R bit
            }
        }
        if (rex != (byte) 0) {
            if (source.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + source.name() + " in the presence of a REX prefix");
            }
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0082(byte opcode1, byte modRmOpcode, AMD64IndirectRegister64 destination, int imm32) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0019(opcode1, modRmOpcode, (byte) 0, destination, imm32);
            return;
        }
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0083(byte opcode1, byte modRmOpcode, AMD64IndirectRegister64 destination, int imm32) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0020(opcode1, modRmOpcode, (byte) 0, destination, imm32);
            return;
        }
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0084(byte opcode1, byte modRmOpcode, AMD64IndirectRegister64 destination, short imm16) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0021(opcode1, modRmOpcode, (byte) 0, destination, imm16);
            return;
        }
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (imm16 & 0xff));
        imm16 >>= 8;
        emitByte((byte) (imm16 & 0xff));
    }

    private void assemble0085(byte opcode1, int imm32) {
        emitByte(opcode1);
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0086(byte opcode1, int imm32) {
        byte rex = (byte) 0x48;
        emitByte(rex);
        emitByte(opcode1);
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0087(byte opcode1, byte modRmOpcode, int rel32, byte imm8) {
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 5 << 0; // rm field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0088(byte opcode1, byte modRmOpcode, int rel32, byte imm8) {
        byte rex = (byte) 0x48;
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 5 << 0; // rm field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0089(byte opcode1, byte modRmOpcode, int rel32, byte imm8) {
        emitByte(((byte) 0x66)); // operand size prefix
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 5 << 0; // rm field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0090(byte opcode1, byte modRmOpcode, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0091(byte opcode1, byte modRmOpcode, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        byte rex = (byte) 0x48;
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0092(byte opcode1, byte modRmOpcode, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0093(byte opcode1, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0094(byte opcode1, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0095(byte opcode1, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        byte rex = (byte) 0x48;
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0096(byte opcode1, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.requiresRexPrefix()) {
            rex |= 0x40;
            if (source.value() >= 8) {
                rex |= 1 << 2; // mod field extension by REX.R bit
            }
        }
        if (rex != (byte) 0) {
            if (source.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + source.name() + " in the presence of a REX prefix");
            }
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0097(byte opcode1, byte modRmOpcode, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0098(byte opcode1, byte modRmOpcode, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        byte rex = (byte) 0x48;
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0099(byte opcode1, byte modRmOpcode, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        // appended:
        emitByte((byte) (imm16 & 0xff));
        imm16 >>= 8;
        emitByte((byte) (imm16 & 0xff));
    }

    private void assemble0100(byte opcode1, int rel32, AMD64GeneralRegister16 source) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0101(byte opcode1, int rel32, AMD64GeneralRegister32 source) {
        byte rex = (byte) 0;
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0102(byte opcode1, int rel32, AMD64GeneralRegister64 source) {
        byte rex = (byte) 0x48;
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0103(byte opcode1, int rel32, AMD64GeneralRegister8 source) {
        byte rex = (byte) 0;
        if (source.requiresRexPrefix()) {
            rex |= 0x40;
            if (source.value() >= 8) {
                rex |= 1 << 2; // mod field extension by REX.R bit
            }
        }
        if (rex != (byte) 0) {
            if (source.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + source.name() + " in the presence of a REX prefix");
            }
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0104(byte opcode1, byte modRmOpcode, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        byte rex = (byte) 0;
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0105(byte opcode1, byte modRmOpcode, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        byte rex = (byte) 0x48;
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0106(byte opcode1, byte modRmOpcode, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0107(byte opcode1, int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0108(byte opcode1, int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        byte rex = (byte) 0;
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0109(byte opcode1, int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        byte rex = (byte) 0x48;
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0110(byte opcode1, int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        byte rex = (byte) 0;
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.requiresRexPrefix()) {
            rex |= 0x40;
            if (source.value() >= 8) {
                rex |= 1 << 2; // mod field extension by REX.R bit
            }
        }
        if (rex != (byte) 0) {
            if (source.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + source.name() + " in the presence of a REX prefix");
            }
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0111(byte opcode1, byte modRmOpcode, int m32, AMD64IndexRegister64 index, Scale scale, int imm32) {
        byte rex = (byte) 0;
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0112(byte opcode1, byte modRmOpcode, int m32, AMD64IndexRegister64 index, Scale scale, int imm32) {
        byte rex = (byte) 0x48;
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0113(byte opcode1, byte modRmOpcode, int m32, AMD64IndexRegister64 index, Scale scale, short imm16) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        // appended:
        emitByte((byte) (imm16 & 0xff));
        imm16 >>= 8;
        emitByte((byte) (imm16 & 0xff));
    }

    private void assemble0114(byte opcode1, byte modRmOpcode, int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0115(byte opcode1, byte modRmOpcode, int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0116(byte opcode1, byte modRmOpcode, int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0117(byte opcode1, int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0118(byte opcode1, int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0119(byte opcode1, int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0120(byte opcode1, int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.requiresRexPrefix()) {
            rex |= 0x40;
            if (source.value() >= 8) {
                rex |= 1 << 2; // mod field extension by REX.R bit
            }
        }
        if (rex != (byte) 0) {
            if (source.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + source.name() + " in the presence of a REX prefix");
            }
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0121(byte opcode1, byte modRmOpcode, int disp32, AMD64IndirectRegister64 destination, int imm32) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0122(byte opcode1, byte modRmOpcode, int disp32, AMD64IndirectRegister64 destination, int imm32) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0123(byte opcode1, byte modRmOpcode, int disp32, AMD64IndirectRegister64 destination, short imm16) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        // appended:
        emitByte((byte) (imm16 & 0xff));
        imm16 >>= 8;
        emitByte((byte) (imm16 & 0xff));
    }

    private void assemble0124(byte opcode1, byte modRmOpcode, int rel32, int imm32) {
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 5 << 0; // rm field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0125(byte opcode1, byte modRmOpcode, int rel32, int imm32) {
        byte rex = (byte) 0x48;
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 5 << 0; // rm field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0126(byte opcode1, byte modRmOpcode, int rel32, short imm16) {
        emitByte(((byte) 0x66)); // operand size prefix
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 5 << 0; // rm field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        // appended:
        emitByte((byte) (imm16 & 0xff));
        imm16 >>= 8;
        emitByte((byte) (imm16 & 0xff));
    }

    private void assemble0127(byte opcode1, short imm16) {
        emitByte(((byte) 0x66)); // operand size prefix
        emitByte(opcode1);
        // appended:
        emitByte((byte) (imm16 & 0xff));
        imm16 >>= 8;
        emitByte((byte) (imm16 & 0xff));
    }

    private void assemble0128(byte opcode2, AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0129(byte opcode2, AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0130(byte opcode2, AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0128(opcode2, destination, (byte) 0, base, index, scale);
            return;
        }
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0131(byte opcode2, AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0129(opcode2, destination, (byte) 0, source);
            return;
        }
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0132(byte opcode2, AMD64XMMRegister destination, AMD64XMMRegister source) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0133(byte opcode2, AMD64XMMRegister destination, int rel32) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0134(byte opcode2, AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0135(byte opcode2, AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0136(byte opcode2, AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0137(byte opcode2, AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0138(byte opcode2, AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0139(byte opcode2, AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0137(opcode2, destination, (byte) 0, base, index, scale);
            return;
        }
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0140(byte opcode2, AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0138(opcode2, destination, (byte) 0, source);
            return;
        }
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0141(byte opcode2, AMD64XMMRegister destination, AMD64XMMRegister source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0142(byte opcode2, AMD64XMMRegister destination, int rel32) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0143(byte opcode2, AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0144(byte opcode2, AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0145(byte opcode2, AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0146(byte opcode1) {
        emitByte(opcode1);
    }

    private void assemble0147(byte opcode2, AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0148(byte opcode2, AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0149(byte opcode2, AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0147(opcode2, destination, (byte) 0, base, index, scale);
            return;
        }
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0150(byte opcode2, AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0148(opcode2, destination, (byte) 0, source);
            return;
        }
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0151(byte opcode2, AMD64XMMRegister destination, AMD64XMMRegister source) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0152(byte opcode2, AMD64XMMRegister destination, int rel32) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0153(byte opcode2, AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0154(byte opcode2, AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0155(byte opcode2, AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0156(byte opcode2, AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0157(byte opcode2, AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0158(byte opcode2, AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0156(opcode2, destination, (byte) 0, base, index, scale);
            return;
        }
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0159(byte opcode2, AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0157(opcode2, destination, (byte) 0, source);
            return;
        }
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0160(byte opcode2, AMD64XMMRegister destination, AMD64XMMRegister source) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0161(byte opcode2, AMD64XMMRegister destination, int rel32) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0162(byte opcode2, AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0163(byte opcode2, AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0164(byte opcode2, AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0165(byte opcode2, AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0166(byte opcode2, AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0167(byte opcode2, AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0165(opcode2, destination, (byte) 0, base, index, scale);
            return;
        }
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0168(byte opcode2, AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0169(byte opcode2, AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0166(opcode2, destination, (byte) 0, source);
            return;
        }
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0170(byte opcode2, AMD64GeneralRegister16 destination, int rel32) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0171(byte opcode2, AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0172(byte opcode2, AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0173(byte opcode2, AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0174(byte opcode2, AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0175(byte opcode2, AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0176(byte opcode2, AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0174(opcode2, destination, (byte) 0, base, index, scale);
            return;
        }
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0177(byte opcode2, AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0178(byte opcode2, AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0175(opcode2, destination, (byte) 0, source);
            return;
        }
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0179(byte opcode2, AMD64GeneralRegister32 destination, int rel32) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0180(byte opcode2, AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0181(byte opcode2, AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0182(byte opcode2, AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0183(byte opcode2, AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0184(byte opcode2, AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0185(byte opcode2, AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0183(opcode2, destination, (byte) 0, base, index, scale);
            return;
        }
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0186(byte opcode2, AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0187(byte opcode2, AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0184(opcode2, destination, (byte) 0, source);
            return;
        }
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0188(byte opcode2, AMD64GeneralRegister64 destination, int rel32) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0189(byte opcode2, AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0190(byte opcode2, AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0191(byte opcode2, AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0192(byte opcode2, AMD64GeneralRegister32 register) {
        byte rex = (byte) 0;
        if (register.value() >= 8) {
            rex |= (1 << 0) + 0x40; // opcode2 extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte((byte) (opcode2 + (register.value()& 7))); // opcode2_rexb
    }

    private void assemble0193(byte opcode2, AMD64GeneralRegister64 register) {
        byte rex = (byte) 0x48;
        rex |= (register.value() & 8) >> 3; // opcode2 extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte((byte) (opcode2 + (register.value()& 7))); // opcode2_rexb
    }

    private void assemble0194(byte opcode2, byte modRmOpcode, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
        emitByte(imm8); // appended
    }

    private void assemble0195(byte opcode2, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0196(byte opcode2, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0197(byte opcode2, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        byte rex = (byte) 0x48;
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0198(byte opcode2, byte modRmOpcode, byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
        emitByte(imm8); // appended
    }

    private void assemble0199(byte opcode2, byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0200(byte opcode2, byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0201(byte opcode2, byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0202(byte opcode2, byte modRmOpcode, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0194(opcode2, modRmOpcode, (byte) 0, base, index, scale, imm8);
            return;
        }
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(imm8); // appended
    }

    private void assemble0203(byte opcode2, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0195(opcode2, (byte) 0, base, index, scale, source);
            return;
        }
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0204(byte opcode2, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0196(opcode2, (byte) 0, base, index, scale, source);
            return;
        }
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0205(byte opcode2, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0197(opcode2, (byte) 0, base, index, scale, source);
            return;
        }
        byte rex = (byte) 0x48;
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0206(byte opcode2, byte modRmOpcode, AMD64GeneralRegister16 destination, byte imm8) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        emitByte(imm8); // appended
    }

    private void assemble0207(byte opcode2, AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
    }

    private void assemble0208(byte opcode2, byte modRmOpcode, AMD64GeneralRegister32 destination, byte imm8) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        emitByte(imm8); // appended
    }

    private void assemble0209(byte opcode2, AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
    }

    private void assemble0210(byte opcode2, byte modRmOpcode, AMD64GeneralRegister64 destination, byte imm8) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        emitByte(imm8); // appended
    }

    private void assemble0211(byte opcode2, AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
    }

    private void assemble0212(byte opcode2, byte modRmOpcode, AMD64IndirectRegister64 destination, byte imm8) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0198(opcode2, modRmOpcode, (byte) 0, destination, imm8);
            return;
        }
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(imm8); // appended
    }

    private void assemble0213(byte opcode2, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0199(opcode2, (byte) 0, destination, source);
            return;
        }
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0214(byte opcode2, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0200(opcode2, (byte) 0, destination, source);
            return;
        }
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0215(byte opcode2, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0201(opcode2, (byte) 0, destination, source);
            return;
        }
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0216(byte opcode2, byte modRmOpcode, int rel32, byte imm8) {
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 5 << 0; // rm field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0217(byte opcode2, byte modRmOpcode, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0218(byte opcode2, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0219(byte opcode2, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0220(byte opcode2, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        byte rex = (byte) 0x48;
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0221(byte opcode2, int rel32, AMD64GeneralRegister16 source) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0222(byte opcode2, int rel32, AMD64GeneralRegister32 source) {
        byte rex = (byte) 0;
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0223(byte opcode2, int rel32, AMD64GeneralRegister64 source) {
        byte rex = (byte) 0x48;
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0224(byte opcode2, byte modRmOpcode, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        byte rex = (byte) 0;
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0225(byte opcode2, int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0226(byte opcode2, int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source) {
        byte rex = (byte) 0;
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0227(byte opcode2, int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source) {
        byte rex = (byte) 0x48;
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0228(byte opcode2, byte modRmOpcode, int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0229(byte opcode2, int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0230(byte opcode2, int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0231(byte opcode2, int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0232(byte opcode1, byte modRmOpcode, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0233(byte opcode1, byte modRmOpcode, byte disp8, AMD64IndirectRegister64 destination) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0234(byte opcode1, byte modRmOpcode, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0232(opcode1, modRmOpcode, (byte) 0, base, index, scale);
            return;
        }
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0235(byte opcode1, byte modRmOpcode, AMD64GeneralRegister16 destination) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((3 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0236(byte opcode1, byte modRmOpcode, AMD64GeneralRegister64 destination) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((3 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0237(byte opcode1, byte modRmOpcode, AMD64IndirectRegister64 destination) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0233(opcode1, modRmOpcode, (byte) 0, destination);
            return;
        }
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0238(byte opcode1, int rel32) {
        emitByte(opcode1);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0239(byte opcode1, byte modRmOpcode, int rel32) {
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 5 << 0; // rm field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0240(byte opcode1, byte modRmOpcode, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0241(byte opcode1, byte modRmOpcode, int m32, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0;
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0242(byte opcode1, byte modRmOpcode, int disp32, AMD64IndirectRegister64 destination) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0243(byte opcode1) {
        byte rex = (byte) 0x48;
        emitByte(rex);
        emitByte(opcode1);
    }

    private void assemble0244(byte opcode2, byte modRmOpcode, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0245(byte opcode2, byte modRmOpcode, byte disp8, AMD64IndirectRegister64 destination) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0246(byte opcode2, byte modRmOpcode, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0244(opcode2, modRmOpcode, (byte) 0, base, index, scale);
            return;
        }
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0247(byte opcode2, byte modRmOpcode, AMD64IndirectRegister64 destination) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0245(opcode2, modRmOpcode, (byte) 0, destination);
            return;
        }
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0248(byte opcode2, byte modRmOpcode, int rel32) {
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 5 << 0; // rm field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0249(byte opcode2, byte modRmOpcode, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0250(byte opcode2, byte modRmOpcode, int m32, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0;
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0251(byte opcode2, byte modRmOpcode, int disp32, AMD64IndirectRegister64 destination) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0252(byte opcode2) {
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
    }

    private void assemble0253(byte opcode2, AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0254(byte opcode2, AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0255(byte opcode2, AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0253(opcode2, destination, (byte) 0, base, index, scale, amd64xmmcomparison);
            return;
        }
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0256(byte opcode2, AMD64XMMRegister destination, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0254(opcode2, destination, (byte) 0, source, amd64xmmcomparison);
            return;
        }
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0257(byte opcode2, AMD64XMMRegister destination, AMD64XMMRegister source, AMD64XMMComparison amd64xmmcomparison) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0258(byte opcode2, AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0259(byte opcode2, AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0260(byte opcode2, AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0261(byte opcode2, AMD64XMMRegister destination, int rel32, AMD64XMMComparison amd64xmmcomparison) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0262(byte opcode2, AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0263(byte opcode2, AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0264(byte opcode2, AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0262(opcode2, destination, (byte) 0, base, index, scale, amd64xmmcomparison);
            return;
        }
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0265(byte opcode2, AMD64XMMRegister destination, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0263(opcode2, destination, (byte) 0, source, amd64xmmcomparison);
            return;
        }
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0266(byte opcode2, AMD64XMMRegister destination, AMD64XMMRegister source, AMD64XMMComparison amd64xmmcomparison) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0267(byte opcode2, AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0268(byte opcode2, AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0269(byte opcode2, AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0270(byte opcode2, AMD64XMMRegister destination, int rel32, AMD64XMMComparison amd64xmmcomparison) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0271(byte opcode1) {
        emitByte(((byte) 0x66)); // operand size prefix
        emitByte(opcode1);
    }

    private void assemble0272(byte opcode2, AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0273(byte opcode2, AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0274(byte opcode2, AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0272(opcode2, destination, (byte) 0, base, index, scale, amd64xmmcomparison);
            return;
        }
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0275(byte opcode2, AMD64XMMRegister destination, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0273(opcode2, destination, (byte) 0, source, amd64xmmcomparison);
            return;
        }
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0276(byte opcode2, AMD64XMMRegister destination, AMD64XMMRegister source, AMD64XMMComparison amd64xmmcomparison) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0277(byte opcode2, AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0278(byte opcode2, AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0279(byte opcode2, AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0280(byte opcode2, AMD64XMMRegister destination, int rel32, AMD64XMMComparison amd64xmmcomparison) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0281(byte opcode2, AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0282(byte opcode2, AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0283(byte opcode2, AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0281(opcode2, destination, (byte) 0, base, index, scale, amd64xmmcomparison);
            return;
        }
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0284(byte opcode2, AMD64XMMRegister destination, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0282(opcode2, destination, (byte) 0, source, amd64xmmcomparison);
            return;
        }
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0285(byte opcode2, AMD64XMMRegister destination, AMD64XMMRegister source, AMD64XMMComparison amd64xmmcomparison) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0286(byte opcode2, AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0287(byte opcode2, AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0288(byte opcode2, AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0289(byte opcode2, AMD64XMMRegister destination, int rel32, AMD64XMMComparison amd64xmmcomparison) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        emitByte((byte) amd64xmmcomparison.value()); // appended
    }

    private void assemble0290(byte opcode2, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.requiresRexPrefix()) {
            rex |= 0x40;
            if (source.value() >= 8) {
                rex |= 1 << 2; // mod field extension by REX.R bit
            }
        }
        if (rex != (byte) 0) {
            if (source.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + source.name() + " in the presence of a REX prefix");
            }
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0291(byte opcode2, byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.requiresRexPrefix()) {
            rex |= 0x40;
            if (source.value() >= 8) {
                rex |= 1 << 2; // mod field extension by REX.R bit
            }
        }
        if (rex != (byte) 0) {
            if (source.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + source.name() + " in the presence of a REX prefix");
            }
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0292(byte opcode2, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0290(opcode2, (byte) 0, base, index, scale, source);
            return;
        }
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.requiresRexPrefix()) {
            rex |= 0x40;
            if (source.value() >= 8) {
                rex |= 1 << 2; // mod field extension by REX.R bit
            }
        }
        if (rex != (byte) 0) {
            if (source.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + source.name() + " in the presence of a REX prefix");
            }
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0293(byte opcode2, AMD64GeneralRegister8 destination, AMD64GeneralRegister8 source) {
        byte rex = (byte) 0;
        if (destination.requiresRexPrefix()) {
            rex |= 0x40;
            if (destination.value() >= 8) {
                rex |= 1 << 0; // rm field extension by REX.B bit
            }
        }
        if (source.requiresRexPrefix()) {
            rex |= 0x40;
            if (source.value() >= 8) {
                rex |= 1 << 2; // mod field extension by REX.R bit
            }
        }
        if (rex != (byte) 0) {
            if (destination.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + destination.name() + " in the presence of a REX prefix");
            }
            if (source.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + source.name() + " in the presence of a REX prefix");
            }
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
    }

    private void assemble0294(byte opcode2, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0291(opcode2, (byte) 0, destination, source);
            return;
        }
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.requiresRexPrefix()) {
            rex |= 0x40;
            if (source.value() >= 8) {
                rex |= 1 << 2; // mod field extension by REX.R bit
            }
        }
        if (rex != (byte) 0) {
            if (source.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + source.name() + " in the presence of a REX prefix");
            }
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0295(byte opcode2, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.requiresRexPrefix()) {
            rex |= 0x40;
            if (source.value() >= 8) {
                rex |= 1 << 2; // mod field extension by REX.R bit
            }
        }
        if (rex != (byte) 0) {
            if (source.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + source.name() + " in the presence of a REX prefix");
            }
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0296(byte opcode2, int rel32, AMD64GeneralRegister8 source) {
        byte rex = (byte) 0;
        if (source.requiresRexPrefix()) {
            rex |= 0x40;
            if (source.value() >= 8) {
                rex |= 1 << 2; // mod field extension by REX.R bit
            }
        }
        if (rex != (byte) 0) {
            if (source.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + source.name() + " in the presence of a REX prefix");
            }
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0297(byte opcode2, int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source) {
        byte rex = (byte) 0;
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.requiresRexPrefix()) {
            rex |= 0x40;
            if (source.value() >= 8) {
                rex |= 1 << 2; // mod field extension by REX.R bit
            }
        }
        if (rex != (byte) 0) {
            if (source.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + source.name() + " in the presence of a REX prefix");
            }
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0298(byte opcode2, int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.requiresRexPrefix()) {
            rex |= 0x40;
            if (source.value() >= 8) {
                rex |= 1 << 2; // mod field extension by REX.R bit
            }
        }
        if (rex != (byte) 0) {
            if (source.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + source.name() + " in the presence of a REX prefix");
            }
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0299(byte opcode2, MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0300(byte opcode2, MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0301(byte opcode2, MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0299(opcode2, destination, (byte) 0, base, index, scale);
            return;
        }
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0302(byte opcode2, MMXRegister destination, AMD64IndirectRegister64 source) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0300(opcode2, destination, (byte) 0, source);
            return;
        }
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0303(byte opcode2, MMXRegister destination, AMD64XMMRegister source) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0304(byte opcode2, MMXRegister destination, int rel32) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0305(byte opcode2, MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0306(byte opcode2, MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0307(byte opcode2, MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0308(byte opcode2, AMD64XMMRegister destination, MMXRegister source) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0309(byte opcode2, AMD64XMMRegister destination, MMXRegister source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0310(byte opcode2, MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0311(byte opcode2, MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        byte rex = (byte) 0;
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0312(byte opcode2, MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0310(opcode2, destination, (byte) 0, base, index, scale);
            return;
        }
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0313(byte opcode2, MMXRegister destination, AMD64IndirectRegister64 source) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0311(opcode2, destination, (byte) 0, source);
            return;
        }
        byte rex = (byte) 0;
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0314(byte opcode2, MMXRegister destination, AMD64XMMRegister source) {
        byte rex = (byte) 0;
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0315(byte opcode2, MMXRegister destination, int rel32) {
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0316(byte opcode2, MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0317(byte opcode2, MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0;
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0318(byte opcode2, MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        byte rex = (byte) 0;
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0319(byte opcode2, AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0320(byte opcode2, AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0321(byte opcode2, AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0319(opcode2, destination, (byte) 0, base, index, scale);
            return;
        }
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0322(byte opcode2, AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0320(opcode2, destination, (byte) 0, source);
            return;
        }
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0323(byte opcode2, AMD64GeneralRegister32 destination, AMD64XMMRegister source) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0324(byte opcode2, AMD64GeneralRegister32 destination, int rel32) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0325(byte opcode2, AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0326(byte opcode2, AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0327(byte opcode2, AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0328(byte opcode2, AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0329(byte opcode2, AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0330(byte opcode2, AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0328(opcode2, destination, (byte) 0, base, index, scale);
            return;
        }
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0331(byte opcode2, AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0329(opcode2, destination, (byte) 0, source);
            return;
        }
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0332(byte opcode2, AMD64GeneralRegister64 destination, AMD64XMMRegister source) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0333(byte opcode2, AMD64GeneralRegister64 destination, int rel32) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0334(byte opcode2, AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0335(byte opcode2, AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0336(byte opcode2, AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0337(byte opcode2, AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0338(byte opcode2, AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0339(byte opcode2, AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0337(opcode2, destination, (byte) 0, base, index, scale);
            return;
        }
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0340(byte opcode2, AMD64XMMRegister destination, AMD64GeneralRegister32 source) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0341(byte opcode2, AMD64XMMRegister destination, AMD64GeneralRegister64 source) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0342(byte opcode2, AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0338(opcode2, destination, (byte) 0, source);
            return;
        }
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0343(byte opcode2, AMD64XMMRegister destination, int rel32) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0344(byte opcode2, AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0345(byte opcode2, AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0346(byte opcode2, AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0347(byte opcode2, AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0348(byte opcode2, AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0349(byte opcode2, AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0347(opcode2, destination, (byte) 0, base, index, scale);
            return;
        }
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0350(byte opcode2, AMD64XMMRegister destination, AMD64GeneralRegister32 source) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0351(byte opcode2, AMD64XMMRegister destination, AMD64GeneralRegister64 source) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0352(byte opcode2, AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0348(opcode2, destination, (byte) 0, source);
            return;
        }
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0353(byte opcode2, AMD64XMMRegister destination, int rel32) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0354(byte opcode2, AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0355(byte opcode2, AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0356(byte opcode2, AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0357(byte opcode2, AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0358(byte opcode2, AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0359(byte opcode2, AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0357(opcode2, destination, (byte) 0, base, index, scale);
            return;
        }
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0360(byte opcode2, AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0358(opcode2, destination, (byte) 0, source);
            return;
        }
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0361(byte opcode2, AMD64GeneralRegister32 destination, AMD64XMMRegister source) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0362(byte opcode2, AMD64GeneralRegister32 destination, int rel32) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0363(byte opcode2, AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0364(byte opcode2, AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0365(byte opcode2, AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0366(byte opcode2, AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0367(byte opcode2, AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0368(byte opcode2, AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0366(opcode2, destination, (byte) 0, base, index, scale);
            return;
        }
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0369(byte opcode2, AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0367(opcode2, destination, (byte) 0, source);
            return;
        }
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0370(byte opcode2, AMD64GeneralRegister64 destination, AMD64XMMRegister source) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0371(byte opcode2, AMD64GeneralRegister64 destination, int rel32) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0372(byte opcode2, AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0373(byte opcode2, AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0374(byte opcode2, AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0375(byte opcode1, byte modRmOpcode, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0x48;
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0376(byte opcode1, byte modRmOpcode, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0377(byte opcode1, byte modRmOpcode, byte disp8, AMD64IndirectRegister64 destination) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0378(byte opcode1, byte modRmOpcode, byte disp8, AMD64IndirectRegister64 destination) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0379(byte opcode1, byte modRmOpcode, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0375(opcode1, modRmOpcode, (byte) 0, base, index, scale);
            return;
        }
        byte rex = (byte) 0x48;
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0380(byte opcode1, byte modRmOpcode, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0376(opcode1, modRmOpcode, (byte) 0, base, index, scale);
            return;
        }
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0381(byte opcode1, byte modRmOpcode, AMD64GeneralRegister32 destination) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((3 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0382(byte opcode1, byte modRmOpcode, AMD64GeneralRegister64 destination) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((3 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0383(byte opcode1, byte modRmOpcode, AMD64GeneralRegister8 destination) {
        byte rex = (byte) 0;
        if (destination.requiresRexPrefix()) {
            rex |= 0x40;
            if (destination.value() >= 8) {
                rex |= 1 << 0; // rm field extension by REX.B bit
            }
        }
        if (rex != (byte) 0) {
            if (destination.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + destination.name() + " in the presence of a REX prefix");
            }
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((3 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0384(byte opcode1, byte modRmOpcode, AMD64IndirectRegister64 destination) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0377(opcode1, modRmOpcode, (byte) 0, destination);
            return;
        }
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0385(byte opcode1, byte modRmOpcode, AMD64IndirectRegister64 destination) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0378(opcode1, modRmOpcode, (byte) 0, destination);
            return;
        }
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0386(byte opcode1, byte modRmOpcode, int rel32) {
        byte rex = (byte) 0x48;
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 5 << 0; // rm field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0387(byte opcode1, byte modRmOpcode, int rel32) {
        emitByte(((byte) 0x66)); // operand size prefix
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 5 << 0; // rm field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0388(byte opcode1, byte modRmOpcode, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0x48;
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0389(byte opcode1, byte modRmOpcode, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0390(byte opcode1, byte modRmOpcode, int m32, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0x48;
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0391(byte opcode1, byte modRmOpcode, int m32, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0392(byte opcode1, byte modRmOpcode, int disp32, AMD64IndirectRegister64 destination) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0393(byte opcode1, byte modRmOpcode, int disp32, AMD64IndirectRegister64 destination) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0394(byte opcode1, short imm16, byte imm8) {
        emitByte(opcode1);
        // appended:
        emitByte((byte) (imm16 & 0xff));
        imm16 >>= 8;
        emitByte((byte) (imm16 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0395(byte opcode2) {
        emitByte((byte) (0xD9)); // opcode1
        emitByte(opcode2);
    }

    private void assemble0396(byte opcode2, FPStackRegister st_i) {
        emitByte((byte) (0xD8)); // opcode1
        emitByte((byte) (opcode2 + st_i.value())); // opcode2
    }

    private void assemble0397(byte opcode2, FPStackRegister st_i) {
        emitByte((byte) (0xDC)); // opcode1
        emitByte((byte) (opcode2 + st_i.value())); // opcode2
    }

    private void assemble0398(byte opcode2, FPStackRegister st_i) {
        emitByte((byte) (0xDE)); // opcode1
        emitByte((byte) (opcode2 + st_i.value())); // opcode2
    }

    private void assemble0399(byte opcode2) {
        emitByte((byte) (0xDB)); // opcode1
        emitByte(opcode2);
    }

    private void assemble0400(byte opcode2, FPStackRegister st_i) {
        emitByte((byte) (0xDA)); // opcode1
        emitByte((byte) (opcode2 + st_i.value())); // opcode2
    }

    private void assemble0401(byte opcode2, FPStackRegister st_i) {
        emitByte((byte) (0xDB)); // opcode1
        emitByte((byte) (opcode2 + st_i.value())); // opcode2
    }

    private void assemble0402(byte opcode2, FPStackRegister st_i) {
        emitByte((byte) (0xDF)); // opcode1
        emitByte((byte) (opcode2 + st_i.value())); // opcode2
    }

    private void assemble0403(byte opcode2) {
        emitByte((byte) (0xDE)); // opcode1
        emitByte(opcode2);
    }

    private void assemble0404(byte opcode2, FPStackRegister st_i) {
        emitByte((byte) (0xDD)); // opcode1
        emitByte((byte) (opcode2 + st_i.value())); // opcode2
    }

    private void assemble0405(byte opcode2, FPStackRegister st_i) {
        emitByte((byte) (0xD9)); // opcode1
        emitByte((byte) (opcode2 + st_i.value())); // opcode2
    }

    private void assemble0406(byte opcode2) {
        emitByte((byte) (0xDF)); // opcode1
        emitByte(opcode2);
    }

    private void assemble0407(byte opcode2) {
        emitByte((byte) (0xDA)); // opcode1
        emitByte(opcode2);
    }

    private void assemble0408(byte opcode1, AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
        emitByte(imm8); // appended
    }

    private void assemble0409(byte opcode1, AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
        // appended:
        emitByte((byte) (imm16 & 0xff));
        imm16 >>= 8;
        emitByte((byte) (imm16 & 0xff));
    }

    private void assemble0410(byte opcode1, AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source, byte imm8) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
        emitByte(imm8); // appended
    }

    private void assemble0411(byte opcode1, AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source, short imm16) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
        // appended:
        emitByte((byte) (imm16 & 0xff));
        imm16 >>= 8;
        emitByte((byte) (imm16 & 0xff));
    }

    private void assemble0412(byte opcode1, AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0408(opcode1, destination, (byte) 0, base, index, scale, imm8);
            return;
        }
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(imm8); // appended
    }

    private void assemble0413(byte opcode1, AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0409(opcode1, destination, (byte) 0, base, index, scale, imm16);
            return;
        }
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (imm16 & 0xff));
        imm16 >>= 8;
        emitByte((byte) (imm16 & 0xff));
    }

    private void assemble0414(byte opcode1, AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source, byte imm8) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        emitByte(imm8); // appended
    }

    private void assemble0415(byte opcode1, AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source, short imm16) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (imm16 & 0xff));
        imm16 >>= 8;
        emitByte((byte) (imm16 & 0xff));
    }

    private void assemble0416(byte opcode1, AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source, byte imm8) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0410(opcode1, destination, (byte) 0, source, imm8);
            return;
        }
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(imm8); // appended
    }

    private void assemble0417(byte opcode1, AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source, short imm16) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0411(opcode1, destination, (byte) 0, source, imm16);
            return;
        }
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (imm16 & 0xff));
        imm16 >>= 8;
        emitByte((byte) (imm16 & 0xff));
    }

    private void assemble0418(byte opcode1, AMD64GeneralRegister16 destination, int rel32, byte imm8) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0419(byte opcode1, AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0420(byte opcode1, AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        // appended:
        emitByte((byte) (imm16 & 0xff));
        imm16 >>= 8;
        emitByte((byte) (imm16 & 0xff));
    }

    private void assemble0421(byte opcode1, AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0422(byte opcode1, AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale, short imm16) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        // appended:
        emitByte((byte) (imm16 & 0xff));
        imm16 >>= 8;
        emitByte((byte) (imm16 & 0xff));
    }

    private void assemble0423(byte opcode1, AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source, byte imm8) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0424(byte opcode1, AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source, short imm16) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        // appended:
        emitByte((byte) (imm16 & 0xff));
        imm16 >>= 8;
        emitByte((byte) (imm16 & 0xff));
    }

    private void assemble0425(byte opcode1, AMD64GeneralRegister16 destination, int rel32, short imm16) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        // appended:
        emitByte((byte) (imm16 & 0xff));
        imm16 >>= 8;
        emitByte((byte) (imm16 & 0xff));
    }

    private void assemble0426(byte opcode1, AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
        emitByte(imm8); // appended
    }

    private void assemble0427(byte opcode1, AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0428(byte opcode1, AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source, byte imm8) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
        emitByte(imm8); // appended
    }

    private void assemble0429(byte opcode1, AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source, int imm32) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0430(byte opcode1, AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0426(opcode1, destination, (byte) 0, base, index, scale, imm8);
            return;
        }
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(imm8); // appended
    }

    private void assemble0431(byte opcode1, AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0427(opcode1, destination, (byte) 0, base, index, scale, imm32);
            return;
        }
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0432(byte opcode1, AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source, byte imm8) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        emitByte(imm8); // appended
    }

    private void assemble0433(byte opcode1, AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source, int imm32) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0434(byte opcode1, AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source, byte imm8) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0428(opcode1, destination, (byte) 0, source, imm8);
            return;
        }
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(imm8); // appended
    }

    private void assemble0435(byte opcode1, AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source, int imm32) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0429(opcode1, destination, (byte) 0, source, imm32);
            return;
        }
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0436(byte opcode1, AMD64GeneralRegister32 destination, int rel32, byte imm8) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0437(byte opcode1, AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0438(byte opcode1, AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0439(byte opcode1, AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0440(byte opcode1, AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale, int imm32) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0441(byte opcode1, AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source, byte imm8) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0442(byte opcode1, AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source, int imm32) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0443(byte opcode1, AMD64GeneralRegister32 destination, int rel32, int imm32) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0444(byte opcode1, AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
        emitByte(imm8); // appended
    }

    private void assemble0445(byte opcode1, AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0446(byte opcode1, AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source, byte imm8) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
        emitByte(imm8); // appended
    }

    private void assemble0447(byte opcode1, AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source, int imm32) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0448(byte opcode1, AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0444(opcode1, destination, (byte) 0, base, index, scale, imm8);
            return;
        }
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(imm8); // appended
    }

    private void assemble0449(byte opcode1, AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0445(opcode1, destination, (byte) 0, base, index, scale, imm32);
            return;
        }
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0450(byte opcode1, AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source, byte imm8) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        emitByte(imm8); // appended
    }

    private void assemble0451(byte opcode1, AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source, int imm32) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0452(byte opcode1, AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source, byte imm8) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0446(opcode1, destination, (byte) 0, source, imm8);
            return;
        }
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(imm8); // appended
    }

    private void assemble0453(byte opcode1, AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source, int imm32) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0447(opcode1, destination, (byte) 0, source, imm32);
            return;
        }
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0454(byte opcode1, AMD64GeneralRegister64 destination, int rel32, byte imm8) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0455(byte opcode1, AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0456(byte opcode1, AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0457(byte opcode1, AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0458(byte opcode1, AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale, int imm32) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0459(byte opcode1, AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source, byte imm8) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0460(byte opcode1, AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source, int imm32) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0461(byte opcode1, AMD64GeneralRegister64 destination, int rel32, int imm32) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0462(byte opcode1, byte imm8) {
        byte rex = (byte) 0x48;
        emitByte(rex);
        emitByte(opcode1);
        emitByte(imm8); // appended
    }

    private void assemble0463(byte opcode1, byte imm8) {
        emitByte(((byte) 0x66)); // operand size prefix
        emitByte(opcode1);
        emitByte(imm8); // appended
    }

    private void assemble0464(byte opcode1, byte rel8) {
        emitByte(opcode1);
        emitByte(rel8); // appended
    }

    private void assemble0465(byte opcode2, int rel32) {
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0466(byte opcode2, byte modRmOpcode) {
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        emitByte(modRMByte);
    }

    private void assemble0467(byte opcode2, byte modRmOpcode, AMD64GeneralRegister16 destination) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0468(byte opcode2, MMXRegister destination, MMXRegister source) {
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0469(byte opcode1, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
        emitByte(imm8); // appended
    }

    private void assemble0470(byte opcode1, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, SegmentRegister source) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0471(byte opcode1, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0472(byte opcode1, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        byte rex = (byte) 0x48;
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0473(byte opcode1, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
        // appended:
        emitByte((byte) (imm16 & 0xff));
        imm16 >>= 8;
        emitByte((byte) (imm16 & 0xff));
    }

    private void assemble0474(byte opcode1, byte disp8, AMD64IndirectRegister64 destination, byte imm8) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
        emitByte(imm8); // appended
    }

    private void assemble0475(byte opcode1, byte disp8, AMD64IndirectRegister64 destination, SegmentRegister source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0476(byte opcode1, byte disp8, AMD64IndirectRegister64 destination, int imm32) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0477(byte opcode1, byte disp8, AMD64IndirectRegister64 destination, int imm32) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0478(byte opcode1, byte disp8, AMD64IndirectRegister64 destination, short imm16) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
        // appended:
        emitByte((byte) (imm16 & 0xff));
        imm16 >>= 8;
        emitByte((byte) (imm16 & 0xff));
    }

    private void assemble0479(byte opcode1, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0469(opcode1, (byte) 0, base, index, scale, imm8);
            return;
        }
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(imm8); // appended
    }

    private void assemble0480(byte opcode1, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, SegmentRegister source) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0470(opcode1, (byte) 0, base, index, scale, source);
            return;
        }
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0481(byte opcode1, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0471(opcode1, (byte) 0, base, index, scale, imm32);
            return;
        }
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0482(byte opcode1, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0472(opcode1, (byte) 0, base, index, scale, imm32);
            return;
        }
        byte rex = (byte) 0x48;
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0483(byte opcode1, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0473(opcode1, (byte) 0, base, index, scale, imm16);
            return;
        }
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (imm16 & 0xff));
        imm16 >>= 8;
        emitByte((byte) (imm16 & 0xff));
    }

    private void assemble0484(byte opcode1, AMD64GeneralRegister16 destination, SegmentRegister source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
    }

    private void assemble0485(byte opcode1, AMD64GeneralRegister16 destination, short imm16) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (imm16 & 0xff));
        imm16 >>= 8;
        emitByte((byte) (imm16 & 0xff));
    }

    private void assemble0486(byte opcode1, AMD64GeneralRegister16 register, short imm16) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (register.value() >= 8) {
            rex |= (1 << 0) + 0x40; // opcode1 extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (opcode1 + (register.value()& 7))); // opcode1_rexb
        // appended:
        emitByte((byte) (imm16 & 0xff));
        imm16 >>= 8;
        emitByte((byte) (imm16 & 0xff));
    }

    private void assemble0487(byte opcode1, AMD64GeneralRegister32 destination, int imm32) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0488(byte opcode1, AMD64GeneralRegister32 register, int imm32) {
        byte rex = (byte) 0;
        if (register.value() >= 8) {
            rex |= (1 << 0) + 0x40; // opcode1 extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (opcode1 + (register.value()& 7))); // opcode1_rexb
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0489(byte opcode2, AMD64GeneralRegister64 destination, ControlRegister source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
    }

    private void assemble0490(byte opcode2, AMD64GeneralRegister64 destination, DebugRegister source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
    }

    private void assemble0491(byte opcode1, AMD64GeneralRegister64 destination, int imm32) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0492(byte opcode1, AMD64GeneralRegister64 register, long imm64) {
        byte rex = (byte) 0x48;
        rex |= (register.value() & 8) >> 3; // opcode1 extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (opcode1 + (register.value()& 7))); // opcode1_rexb
        // appended:
        emitByte((byte) (imm64 & 0xff));
        imm64 >>= 8;
        emitByte((byte) (imm64 & 0xff));
        imm64 >>= 8;
        emitByte((byte) (imm64 & 0xff));
        imm64 >>= 8;
        emitByte((byte) (imm64 & 0xff));
        imm64 >>= 8;
        emitByte((byte) (imm64 & 0xff));
        imm64 >>= 8;
        emitByte((byte) (imm64 & 0xff));
        imm64 >>= 8;
        emitByte((byte) (imm64 & 0xff));
        imm64 >>= 8;
        emitByte((byte) (imm64 & 0xff));
    }

    private void assemble0493(byte opcode1, AMD64GeneralRegister8 register, byte imm8) {
        byte rex = (byte) 0;
        if (register.requiresRexPrefix()) {
            rex |= 0x40;
            if (register.value() >= 8) {
                rex |= 1 << 0; // opcode1 extension by REX.B bit
            }
        }
        if (rex != (byte) 0) {
            if (register.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + register.name() + " in the presence of a REX prefix");
            }
            emitByte(rex);
        }
        emitByte((byte) (opcode1 + (register.value()& 7))); // opcode1_rexb
        emitByte(imm8); // appended
    }

    private void assemble0494(byte opcode1, AMD64GeneralRegister8 destination, byte imm8) {
        byte rex = (byte) 0;
        if (destination.requiresRexPrefix()) {
            rex |= 0x40;
            if (destination.value() >= 8) {
                rex |= 1 << 0; // rm field extension by REX.B bit
            }
        }
        if (rex != (byte) 0) {
            if (destination.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + destination.name() + " in the presence of a REX prefix");
            }
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        emitByte(imm8); // appended
    }

    private void assemble0495(byte opcode1, AMD64IndirectRegister64 destination, byte imm8) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0474(opcode1, (byte) 0, destination, imm8);
            return;
        }
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(imm8); // appended
    }

    private void assemble0496(byte opcode1, AMD64IndirectRegister64 destination, SegmentRegister source) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0475(opcode1, (byte) 0, destination, source);
            return;
        }
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0497(byte opcode1, AMD64IndirectRegister64 destination, int imm32) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0476(opcode1, (byte) 0, destination, imm32);
            return;
        }
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0498(byte opcode1, AMD64IndirectRegister64 destination, int imm32) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0477(opcode1, (byte) 0, destination, imm32);
            return;
        }
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0499(byte opcode1, AMD64IndirectRegister64 destination, short imm16) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0478(opcode1, (byte) 0, destination, imm16);
            return;
        }
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (imm16 & 0xff));
        imm16 >>= 8;
        emitByte((byte) (imm16 & 0xff));
    }

    private void assemble0500(byte opcode2, ControlRegister destination, AMD64GeneralRegister64 source) {
        byte rex = (byte) 0;
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0501(byte opcode2, DebugRegister destination, AMD64GeneralRegister64 source) {
        byte rex = (byte) 0;
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0502(byte opcode1, SegmentRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0503(byte opcode1, SegmentRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        byte rex = (byte) 0;
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0504(byte opcode1, SegmentRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0502(opcode1, destination, (byte) 0, base, index, scale);
            return;
        }
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0505(byte opcode1, SegmentRegister destination, AMD64GeneralRegister16 source) {
        byte rex = (byte) 0;
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0506(byte opcode1, SegmentRegister destination, AMD64IndirectRegister64 source) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0503(opcode1, destination, (byte) 0, source);
            return;
        }
        byte rex = (byte) 0;
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0507(byte opcode1, SegmentRegister destination, int rel32) {
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0508(byte opcode1, SegmentRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0509(byte opcode1, SegmentRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0;
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0510(byte opcode1, SegmentRegister destination, int disp32, AMD64IndirectRegister64 source) {
        byte rex = (byte) 0;
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0511(byte opcode1, int rel32, byte imm8) {
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0512(byte opcode1, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0513(byte opcode1, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, SegmentRegister source) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0514(byte opcode1, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0515(byte opcode1, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32) {
        byte rex = (byte) 0x48;
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0516(byte opcode1, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        // appended:
        emitByte((byte) (imm16 & 0xff));
        imm16 >>= 8;
        emitByte((byte) (imm16 & 0xff));
    }

    private void assemble0517(byte opcode1, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        byte rex = (byte) 0;
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0518(byte opcode1, int m32, AMD64IndexRegister64 index, Scale scale, SegmentRegister source) {
        byte rex = (byte) 0;
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0519(byte opcode1, int m32, AMD64IndexRegister64 index, Scale scale, int imm32) {
        byte rex = (byte) 0;
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0520(byte opcode1, int m32, AMD64IndexRegister64 index, Scale scale, int imm32) {
        byte rex = (byte) 0x48;
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0521(byte opcode1, int m32, AMD64IndexRegister64 index, Scale scale, short imm16) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        // appended:
        emitByte((byte) (imm16 & 0xff));
        imm16 >>= 8;
        emitByte((byte) (imm16 & 0xff));
    }

    private void assemble0522(byte opcode1, int disp32, AMD64IndirectRegister64 destination, byte imm8) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0523(byte opcode1, int disp32, AMD64IndirectRegister64 destination, SegmentRegister source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0524(byte opcode1, int disp32, AMD64IndirectRegister64 destination, int imm32) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0525(byte opcode1, int disp32, AMD64IndirectRegister64 destination, int imm32) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0526(byte opcode1, int disp32, AMD64IndirectRegister64 destination, short imm16) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        // appended:
        emitByte((byte) (imm16 & 0xff));
        imm16 >>= 8;
        emitByte((byte) (imm16 & 0xff));
    }

    private void assemble0527(byte opcode1, int rel32, SegmentRegister source) {
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0528(byte opcode1, int rel32, int imm32) {
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0529(byte opcode1, int rel32, int imm32) {
        byte rex = (byte) 0x48;
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        // appended:
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
        imm32 >>= 8;
        emitByte((byte) (imm32 & 0xff));
    }

    private void assemble0530(byte opcode1, int rel32, short imm16) {
        emitByte(((byte) 0x66)); // operand size prefix
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        // appended:
        emitByte((byte) (imm16 & 0xff));
        imm16 >>= 8;
        emitByte((byte) (imm16 & 0xff));
    }

    private void assemble0531(byte opcode1, long m64) {
        emitByte(opcode1);
        // appended:
        emitByte((byte) (m64 & 0xff));
        m64 >>= 8;
        emitByte((byte) (m64 & 0xff));
        m64 >>= 8;
        emitByte((byte) (m64 & 0xff));
        m64 >>= 8;
        emitByte((byte) (m64 & 0xff));
        m64 >>= 8;
        emitByte((byte) (m64 & 0xff));
        m64 >>= 8;
        emitByte((byte) (m64 & 0xff));
        m64 >>= 8;
        emitByte((byte) (m64 & 0xff));
        m64 >>= 8;
        emitByte((byte) (m64 & 0xff));
    }

    private void assemble0532(byte opcode1, long m64) {
        byte rex = (byte) 0x48;
        emitByte(rex);
        emitByte(opcode1);
        // appended:
        emitByte((byte) (m64 & 0xff));
        m64 >>= 8;
        emitByte((byte) (m64 & 0xff));
        m64 >>= 8;
        emitByte((byte) (m64 & 0xff));
        m64 >>= 8;
        emitByte((byte) (m64 & 0xff));
        m64 >>= 8;
        emitByte((byte) (m64 & 0xff));
        m64 >>= 8;
        emitByte((byte) (m64 & 0xff));
        m64 >>= 8;
        emitByte((byte) (m64 & 0xff));
        m64 >>= 8;
        emitByte((byte) (m64 & 0xff));
    }

    private void assemble0533(byte opcode1, long m64) {
        emitByte(((byte) 0x66)); // operand size prefix
        emitByte(opcode1);
        // appended:
        emitByte((byte) (m64 & 0xff));
        m64 >>= 8;
        emitByte((byte) (m64 & 0xff));
        m64 >>= 8;
        emitByte((byte) (m64 & 0xff));
        m64 >>= 8;
        emitByte((byte) (m64 & 0xff));
        m64 >>= 8;
        emitByte((byte) (m64 & 0xff));
        m64 >>= 8;
        emitByte((byte) (m64 & 0xff));
        m64 >>= 8;
        emitByte((byte) (m64 & 0xff));
        m64 >>= 8;
        emitByte((byte) (m64 & 0xff));
    }

    private void assemble0534(byte opcode2, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0535(byte opcode2, byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0536(byte opcode2, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0534(opcode2, (byte) 0, base, index, scale, source);
            return;
        }
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0537(byte opcode2, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0535(opcode2, (byte) 0, destination, source);
            return;
        }
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0538(byte opcode2, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0539(byte opcode2, int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0540(byte opcode2, int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0541(byte opcode2, int rel32, AMD64XMMRegister source) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0542(byte opcode2, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0543(byte opcode2, byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0544(byte opcode2, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0542(opcode2, (byte) 0, base, index, scale, source);
            return;
        }
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0545(byte opcode2, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0543(opcode2, (byte) 0, destination, source);
            return;
        }
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0546(byte opcode2, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0547(byte opcode2, int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        byte rex = (byte) 0;
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0548(byte opcode2, int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0549(byte opcode2, int rel32, AMD64XMMRegister source) {
        byte rex = (byte) 0;
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0550(byte opcode2, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0551(byte opcode2, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, MMXRegister source) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0552(byte opcode2, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, MMXRegister source) {
        byte rex = (byte) 0x48;
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0553(byte opcode2, byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0554(byte opcode2, byte disp8, AMD64IndirectRegister64 destination, MMXRegister source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0555(byte opcode2, byte disp8, AMD64IndirectRegister64 destination, MMXRegister source) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0556(byte opcode2, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0550(opcode2, (byte) 0, base, index, scale, source);
            return;
        }
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0557(byte opcode2, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, MMXRegister source) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0551(opcode2, (byte) 0, base, index, scale, source);
            return;
        }
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0558(byte opcode2, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, MMXRegister source) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0552(opcode2, (byte) 0, base, index, scale, source);
            return;
        }
        byte rex = (byte) 0x48;
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0559(byte opcode2, AMD64GeneralRegister32 destination, AMD64XMMRegister source) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
    }

    private void assemble0560(byte opcode2, AMD64GeneralRegister32 destination, MMXRegister source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
    }

    private void assemble0561(byte opcode2, AMD64GeneralRegister64 destination, AMD64XMMRegister source) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
    }

    private void assemble0562(byte opcode2, AMD64GeneralRegister64 destination, MMXRegister source) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
    }

    private void assemble0563(byte opcode2, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0553(opcode2, (byte) 0, destination, source);
            return;
        }
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0564(byte opcode2, AMD64IndirectRegister64 destination, MMXRegister source) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0554(opcode2, (byte) 0, destination, source);
            return;
        }
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0565(byte opcode2, AMD64IndirectRegister64 destination, MMXRegister source) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0555(opcode2, (byte) 0, destination, source);
            return;
        }
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0566(byte opcode2, AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0567(byte opcode2, AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0568(byte opcode2, AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0566(opcode2, destination, (byte) 0, base, index, scale);
            return;
        }
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0569(byte opcode2, AMD64XMMRegister destination, AMD64GeneralRegister32 source) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0570(byte opcode2, AMD64XMMRegister destination, AMD64GeneralRegister64 source) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0571(byte opcode2, AMD64XMMRegister destination, AMD64IndirectRegister64 source) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0567(opcode2, destination, (byte) 0, source);
            return;
        }
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0572(byte opcode2, AMD64XMMRegister destination, int rel32) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0573(byte opcode2, AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0574(byte opcode2, AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0575(byte opcode2, AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0576(byte opcode2, MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0x48;
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0577(byte opcode2, MMXRegister destination, byte disp8, AMD64IndirectRegister64 source) {
        byte rex = (byte) 0x48;
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0578(byte opcode2, MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0576(opcode2, destination, (byte) 0, base, index, scale);
            return;
        }
        byte rex = (byte) 0x48;
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0579(byte opcode2, MMXRegister destination, AMD64GeneralRegister32 source) {
        byte rex = (byte) 0;
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0580(byte opcode2, MMXRegister destination, AMD64GeneralRegister64 source) {
        byte rex = (byte) 0x48;
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0581(byte opcode2, MMXRegister destination, AMD64IndirectRegister64 source) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0577(opcode2, destination, (byte) 0, source);
            return;
        }
        byte rex = (byte) 0x48;
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0582(byte opcode2, MMXRegister destination, int rel32) {
        byte rex = (byte) 0x48;
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0583(byte opcode2, MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0x48;
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0584(byte opcode2, MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0x48;
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0585(byte opcode2, MMXRegister destination, int disp32, AMD64IndirectRegister64 source) {
        byte rex = (byte) 0x48;
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0586(byte opcode2, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0587(byte opcode2, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, MMXRegister source) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0588(byte opcode2, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, MMXRegister source) {
        byte rex = (byte) 0x48;
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0589(byte opcode2, int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0590(byte opcode2, int m32, AMD64IndexRegister64 index, Scale scale, MMXRegister source) {
        byte rex = (byte) 0;
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0591(byte opcode2, int m32, AMD64IndexRegister64 index, Scale scale, MMXRegister source) {
        byte rex = (byte) 0x48;
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0592(byte opcode2, int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0593(byte opcode2, int disp32, AMD64IndirectRegister64 destination, MMXRegister source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0594(byte opcode2, int disp32, AMD64IndirectRegister64 destination, MMXRegister source) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0595(byte opcode2, int rel32, AMD64XMMRegister source) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0x48;
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0596(byte opcode2, int rel32, MMXRegister source) {
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0597(byte opcode2, int rel32, MMXRegister source) {
        byte rex = (byte) 0x48;
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0598(byte opcode2, MMXRegister destination, AMD64XMMRegister source) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0599(byte opcode2, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0600(byte opcode2, byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0601(byte opcode2, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0599(opcode2, (byte) 0, base, index, scale, source);
            return;
        }
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0602(byte opcode2, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0600(opcode2, (byte) 0, destination, source);
            return;
        }
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0603(byte opcode2, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0604(byte opcode2, int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0605(byte opcode2, int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0606(byte opcode2, int rel32, AMD64XMMRegister source) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0607(byte opcode2, AMD64GeneralRegister32 destination, AMD64XMMRegister source) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0608(byte opcode2, AMD64GeneralRegister32 destination, AMD64XMMRegister source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0609(byte opcode2, AMD64XMMRegister destination, AMD64XMMRegister source) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
    }

    private void assemble0610(byte opcode2, AMD64XMMRegister destination, MMXRegister source) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0611(byte opcode2, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0612(byte opcode2, byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0613(byte opcode2, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0611(opcode2, (byte) 0, base, index, scale, source);
            return;
        }
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0614(byte opcode2, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0612(opcode2, (byte) 0, destination, source);
            return;
        }
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0615(byte opcode2, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0616(byte opcode2, int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0617(byte opcode2, int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0618(byte opcode2, int rel32, AMD64XMMRegister source) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0619(byte opcode2, AMD64GeneralRegister16 destination, AMD64GeneralRegister8 source) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.requiresRexPrefix()) {
            rex |= 0x40;
            if (source.value() >= 8) {
                rex |= 1 << 0; // rm field extension by REX.B bit
            }
        }
        if (rex != (byte) 0) {
            if (source.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + source.name() + " in the presence of a REX prefix");
            }
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0620(byte opcode2, AMD64GeneralRegister32 destination, AMD64GeneralRegister8 source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.requiresRexPrefix()) {
            rex |= 0x40;
            if (source.value() >= 8) {
                rex |= 1 << 0; // rm field extension by REX.B bit
            }
        }
        if (rex != (byte) 0) {
            if (source.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + source.name() + " in the presence of a REX prefix");
            }
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0621(byte opcode2, AMD64GeneralRegister64 destination, AMD64GeneralRegister8 source) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        if (source.isHighByte()) {
            throw new IllegalArgumentException("Cannot encode " + source.name() + " in the presence of a REX prefix");
        }
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0622(byte opcode1, AMD64GeneralRegister64 destination, AMD64GeneralRegister32 source) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte(opcode1);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0623(byte opcode2, AMD64GeneralRegister32 destination, AMD64GeneralRegister16 source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0624(byte opcode2, AMD64GeneralRegister64 destination, AMD64GeneralRegister16 source) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 1; // mod field extension by REX.R bit
        rex |= (source.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0625(byte opcode1, AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0626(byte opcode1, AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0627(byte opcode1, AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0625(opcode1, destination, (byte) 0, base, index, scale);
            return;
        }
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0628(byte opcode1, AMD64GeneralRegister64 destination, AMD64GeneralRegister32 source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0629(byte opcode1, AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0626(opcode1, destination, (byte) 0, source);
            return;
        }
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0630(byte opcode1, AMD64GeneralRegister64 destination, int rel32) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0631(byte opcode1, AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0632(byte opcode1, AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0633(byte opcode1, AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0634(byte opcode2, AMD64GeneralRegister32 destination, AMD64XMMRegister source, byte imm8) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        emitByte(imm8); // appended
    }

    private void assemble0635(byte opcode2, AMD64GeneralRegister32 destination, MMXRegister source, byte imm8) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        emitByte(imm8); // appended
    }

    private void assemble0636(byte opcode2, AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
        emitByte(imm8); // appended
    }

    private void assemble0637(byte opcode2, AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source, byte imm8) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
        emitByte(imm8); // appended
    }

    private void assemble0638(byte opcode2, AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0636(opcode2, destination, (byte) 0, base, index, scale, imm8);
            return;
        }
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(imm8); // appended
    }

    private void assemble0639(byte opcode2, AMD64XMMRegister destination, AMD64GeneralRegister32 source, byte imm8) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        emitByte(imm8); // appended
    }

    private void assemble0640(byte opcode2, AMD64XMMRegister destination, AMD64IndirectRegister64 source, byte imm8) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0637(opcode2, destination, (byte) 0, source, imm8);
            return;
        }
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(imm8); // appended
    }

    private void assemble0641(byte opcode2, AMD64XMMRegister destination, int rel32, byte imm8) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0642(byte opcode2, AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0643(byte opcode2, AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0644(byte opcode2, AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source, byte imm8) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0645(byte opcode2, MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
        emitByte(imm8); // appended
    }

    private void assemble0646(byte opcode2, MMXRegister destination, byte disp8, AMD64IndirectRegister64 source, byte imm8) {
        byte rex = (byte) 0;
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
        emitByte(imm8); // appended
    }

    private void assemble0647(byte opcode2, MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0645(opcode2, destination, (byte) 0, base, index, scale, imm8);
            return;
        }
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(imm8); // appended
    }

    private void assemble0648(byte opcode2, MMXRegister destination, AMD64GeneralRegister32 source, byte imm8) {
        byte rex = (byte) 0;
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        emitByte(imm8); // appended
    }

    private void assemble0649(byte opcode2, MMXRegister destination, AMD64IndirectRegister64 source, byte imm8) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0646(opcode2, destination, (byte) 0, source, imm8);
            return;
        }
        byte rex = (byte) 0;
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(imm8); // appended
    }

    private void assemble0650(byte opcode2, MMXRegister destination, int rel32, byte imm8) {
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0651(byte opcode2, MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0652(byte opcode2, MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        byte rex = (byte) 0;
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0653(byte opcode2, MMXRegister destination, int disp32, AMD64IndirectRegister64 source, byte imm8) {
        byte rex = (byte) 0;
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0654(byte opcode2, AMD64GeneralRegister32 destination, MMXRegister source) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0655(byte opcode1, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0656(byte opcode1, byte disp8, AMD64IndirectRegister64 destination) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0657(byte opcode1, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0655(opcode1, (byte) 0, base, index, scale);
            return;
        }
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0658(byte opcode1, AMD64GeneralRegister16 register) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (register.value() >= 8) {
            rex |= (1 << 0) + 0x40; // opcode1 extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (opcode1 + (register.value()& 7))); // opcode1_rexb
    }

    private void assemble0659(byte opcode1, AMD64GeneralRegister64 register) {
        byte rex = (byte) 0;
        if (register.value() >= 8) {
            rex |= (1 << 0) + 0x40; // opcode1 extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (opcode1 + (register.value()& 7))); // opcode1_rexb
    }

    private void assemble0660(byte opcode1, AMD64IndirectRegister64 destination) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0656(opcode1, (byte) 0, destination);
            return;
        }
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0661(byte opcode1, int rel32) {
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0662(byte opcode1, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0663(byte opcode1, int m32, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0;
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0664(byte opcode1, int disp32, AMD64IndirectRegister64 destination) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte(opcode1);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0665(byte opcode2, AMD64XMMRegister destination, AMD64XMMRegister source, byte imm8) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        emitByte(imm8); // appended
    }

    private void assemble0666(byte opcode2, AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
        emitByte(imm8); // appended
    }

    private void assemble0667(byte opcode2, AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source, byte imm8) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
        emitByte(imm8); // appended
    }

    private void assemble0668(byte opcode2, AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0666(opcode2, destination, (byte) 0, base, index, scale, imm8);
            return;
        }
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(imm8); // appended
    }

    private void assemble0669(byte opcode2, AMD64XMMRegister destination, AMD64IndirectRegister64 source, byte imm8) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0667(opcode2, destination, (byte) 0, source, imm8);
            return;
        }
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(imm8); // appended
    }

    private void assemble0670(byte opcode2, AMD64XMMRegister destination, AMD64XMMRegister source, byte imm8) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        emitByte(imm8); // appended
    }

    private void assemble0671(byte opcode2, AMD64XMMRegister destination, int rel32, byte imm8) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0672(byte opcode2, AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0673(byte opcode2, AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0674(byte opcode2, AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source, byte imm8) {
        emitByte(((byte) 0xF3)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0675(byte opcode2, AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
        emitByte(imm8); // appended
    }

    private void assemble0676(byte opcode2, AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source, byte imm8) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
        emitByte(imm8); // appended
    }

    private void assemble0677(byte opcode2, AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0675(opcode2, destination, (byte) 0, base, index, scale, imm8);
            return;
        }
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(imm8); // appended
    }

    private void assemble0678(byte opcode2, AMD64XMMRegister destination, AMD64IndirectRegister64 source, byte imm8) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0676(opcode2, destination, (byte) 0, source, imm8);
            return;
        }
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(imm8); // appended
    }

    private void assemble0679(byte opcode2, AMD64XMMRegister destination, AMD64XMMRegister source, byte imm8) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        emitByte(imm8); // appended
    }

    private void assemble0680(byte opcode2, AMD64XMMRegister destination, int rel32, byte imm8) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0681(byte opcode2, AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0682(byte opcode2, AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0683(byte opcode2, AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source, byte imm8) {
        emitByte(((byte) 0xF2)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0684(byte opcode2, MMXRegister destination, MMXRegister source, byte imm8) {
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        emitByte(imm8); // appended
    }

    private void assemble0685(byte opcode2, byte modRmOpcode, AMD64XMMRegister destination, byte imm8) {
        emitByte(((byte) 0x66)); // instruction selection prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        emitByte(imm8); // appended
    }

    private void assemble0686(byte opcode2, byte modRmOpcode, MMXRegister destination, byte imm8) {
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        emitByte(imm8); // appended
    }

    private void assemble0687(byte opcode1, short imm16) {
        emitByte(opcode1);
        // appended:
        emitByte((byte) (imm16 & 0xff));
        imm16 >>= 8;
        emitByte((byte) (imm16 & 0xff));
    }

    private void assemble0688(byte opcode2, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
    }

    private void assemble0689(byte opcode2, byte disp8, AMD64IndirectRegister64 destination) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
    }

    private void assemble0690(byte opcode2, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0688(opcode2, (byte) 0, base, index, scale);
            return;
        }
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
    }

    private void assemble0691(byte opcode2, AMD64GeneralRegister8 destination) {
        byte rex = (byte) 0;
        if (destination.requiresRexPrefix()) {
            rex |= 0x40;
            if (destination.value() >= 8) {
                rex |= 1 << 0; // rm field extension by REX.B bit
            }
        }
        if (rex != (byte) 0) {
            if (destination.isHighByte()) {
                throw new IllegalArgumentException("Cannot encode " + destination.name() + " in the presence of a REX prefix");
            }
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0692(byte opcode2, AMD64IndirectRegister64 destination) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0689(opcode2, (byte) 0, destination);
            return;
        }
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
    }

    private void assemble0693(byte opcode2, int rel32) {
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
    }

    private void assemble0694(byte opcode2, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0695(byte opcode2, int m32, AMD64IndexRegister64 index, Scale scale) {
        byte rex = (byte) 0;
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
    }

    private void assemble0696(byte opcode2, int disp32, AMD64IndirectRegister64 destination) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
    }

    private void assemble0697(byte opcode2, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source, byte imm8) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
        emitByte(imm8); // appended
    }

    private void assemble0698(byte opcode2, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source, byte imm8) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
        emitByte(imm8); // appended
    }

    private void assemble0699(byte opcode2, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source, byte imm8) {
        byte rex = (byte) 0x48;
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
        emitByte(imm8); // appended
    }

    private void assemble0700(byte opcode2, byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source, byte imm8) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
        emitByte(imm8); // appended
    }

    private void assemble0701(byte opcode2, byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source, byte imm8) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
        emitByte(imm8); // appended
    }

    private void assemble0702(byte opcode2, byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source, byte imm8) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
        emitByte(imm8); // appended
    }

    private void assemble0703(byte opcode2, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source, byte imm8) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0697(opcode2, (byte) 0, base, index, scale, source, imm8);
            return;
        }
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(imm8); // appended
    }

    private void assemble0704(byte opcode2, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source, byte imm8) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0698(opcode2, (byte) 0, base, index, scale, source, imm8);
            return;
        }
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(imm8); // appended
    }

    private void assemble0705(byte opcode2, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source, byte imm8) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0699(opcode2, (byte) 0, base, index, scale, source, imm8);
            return;
        }
        byte rex = (byte) 0x48;
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(imm8); // appended
    }

    private void assemble0706(byte opcode2, AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source, byte imm8) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        emitByte(imm8); // appended
    }

    private void assemble0707(byte opcode2, AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source, byte imm8) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        emitByte(imm8); // appended
    }

    private void assemble0708(byte opcode2, AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source, byte imm8) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        emitByte(imm8); // appended
    }

    private void assemble0709(byte opcode2, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source, byte imm8) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0700(opcode2, (byte) 0, destination, source, imm8);
            return;
        }
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(imm8); // appended
    }

    private void assemble0710(byte opcode2, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source, byte imm8) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0701(opcode2, (byte) 0, destination, source, imm8);
            return;
        }
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(imm8); // appended
    }

    private void assemble0711(byte opcode2, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source, byte imm8) {
        if (destination == AMD64IndirectRegister64.RBP_INDIRECT || destination == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0702(opcode2, (byte) 0, destination, source, imm8);
            return;
        }
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(imm8); // appended
    }

    private void assemble0712(byte opcode2, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source, byte imm8) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0713(byte opcode2, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source, byte imm8) {
        byte rex = (byte) 0;
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0714(byte opcode2, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source, byte imm8) {
        byte rex = (byte) 0x48;
        rex |= (base.value() & 8) >> 3; // SIB base field extension by REX.B bit
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0715(byte opcode2, int rel32, AMD64GeneralRegister16 source, byte imm8) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0716(byte opcode2, int rel32, AMD64GeneralRegister32 source, byte imm8) {
        byte rex = (byte) 0;
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0717(byte opcode2, int rel32, AMD64GeneralRegister64 source, byte imm8) {
        byte rex = (byte) 0x48;
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0718(byte opcode2, int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source, byte imm8) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0719(byte opcode2, int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source, byte imm8) {
        byte rex = (byte) 0;
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0720(byte opcode2, int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source, byte imm8) {
        byte rex = (byte) 0x48;
        rex |= (index.value() & 8) >> 2; // SIB index field extension by REX.X bit
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0721(byte opcode2, int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source, byte imm8) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0722(byte opcode2, int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source, byte imm8) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0723(byte opcode2, int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source, byte imm8) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        rex |= (source.value() & 8) >> 1; // mod field extension by REX.R bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        modRMByte |= (source.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        if (destination == AMD64IndirectRegister64.RSP_INDIRECT || destination == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0724(byte opcode2, AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(disp8); // appended
        emitByte(imm8); // appended
    }

    private void assemble0725(byte opcode2, AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source, byte imm8) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((1 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(disp8); // appended
        emitByte(imm8); // appended
    }

    private void assemble0726(byte opcode2, AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        if (base == AMD64BaseRegister64.RBP_BASE || base == AMD64BaseRegister64.R13_BASE) {
            assemble0724(opcode2, destination, (byte) 0, base, index, scale, imm8);
            return;
        }
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        emitByte(imm8); // appended
    }

    private void assemble0727(byte opcode2, AMD64XMMRegister destination, AMD64IndirectRegister64 source, byte imm8) {
        if (source == AMD64IndirectRegister64.RBP_INDIRECT || source == AMD64IndirectRegister64.R13_INDIRECT) {
            assemble0725(opcode2, destination, (byte) 0, source, imm8);
            return;
        }
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        emitByte(imm8); // appended
    }

    private void assemble0728(byte opcode2, AMD64XMMRegister destination, AMD64XMMRegister source, byte imm8) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        emitByte(imm8); // appended
    }

    private void assemble0729(byte opcode2, AMD64XMMRegister destination, int rel32, byte imm8) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 5 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        // appended:
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        rel32 >>= 8;
        emitByte((byte) (rel32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0730(byte opcode2, AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (base.value() >= 8) {
            rex |= (1 << 0) + 0x40; // SIB base field extension by REX.B bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) 0;
        sibByte |= (base.value() & 7) << 0; // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0731(byte opcode2, AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (index.value() >= 8) {
            rex |= (1 << 1) + 0x40; // SIB index field extension by REX.X bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((0 << 6)); // mod field
        modRMByte |= 4 << 0; // rm field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        emitByte(modRMByte);
        byte sibByte = (byte) (5 << 0); // base field
        sibByte |= (index.value() & 7) << 3; // index field
        sibByte |= scale.value() << 6; // scale field
        emitByte(sibByte);
        // appended:
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        m32 >>= 8;
        emitByte((byte) (m32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0732(byte opcode2, AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source, byte imm8) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 2) + 0x40; // mod field extension by REX.R bit
        }
        if (source.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((2 << 6)); // mod field
        modRMByte |= (destination.value() & 7) << 3; // reg field
        modRMByte |= (source.value() & 7) << 0; // rm field
        emitByte(modRMByte);
        if (source == AMD64IndirectRegister64.RSP_INDIRECT || source == AMD64IndirectRegister64.R12_INDIRECT) {
            emitByte(((byte) 0x24)); // SIB byte
        }
        // appended:
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        disp32 >>= 8;
        emitByte((byte) (disp32 & 0xff));
        emitByte(imm8); // appended
    }

    private void assemble0733(byte opcode2, byte modRmOpcode, AMD64GeneralRegister16 destination) {
        emitByte(((byte) 0x66)); // operand size prefix
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0734(byte opcode2, byte modRmOpcode, AMD64GeneralRegister32 destination) {
        byte rex = (byte) 0;
        if (destination.value() >= 8) {
            rex |= (1 << 0) + 0x40; // rm field extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0735(byte opcode2, byte modRmOpcode, AMD64GeneralRegister64 destination) {
        byte rex = (byte) 0x48;
        rex |= (destination.value() & 8) >> 3; // rm field extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (0x0F)); // opcode1
        emitByte(opcode2);
        byte modRMByte = (byte) ((3 << 6) | (modRmOpcode << 3)); // mod field, group opcode in reg field
        modRMByte |= (destination.value() & 7) << 0; // rm field
        emitByte(modRMByte);
    }

    private void assemble0736(byte opcode1, AMD64GeneralRegister32 register) {
        byte rex = (byte) 0;
        if (register.value() >= 8) {
            rex |= (1 << 0) + 0x40; // opcode1 extension by REX.B bit
        }
        if (rex != (byte) 0) {
            emitByte(rex);
        }
        emitByte((byte) (opcode1 + (register.value()& 7))); // opcode1_rexb
    }

    private void assemble0737(byte opcode1, AMD64GeneralRegister64 register) {
        byte rex = (byte) 0x48;
        rex |= (register.value() & 8) >> 3; // opcode1 extension by REX.B bit
        emitByte(rex);
        emitByte((byte) (opcode1 + (register.value()& 7))); // opcode1_rexb
    }

}
// END GENERATED CONTENT
