<!--
 ~  This file is part of the jasm project (http://code.google.com/p/jasm).
 ~
 ~  This file is licensed to you under the BSD License; You may not use
 ~  this file except in compliance with the License. See the LICENSE.txt
 ~  file distributed with this work for a copy of the License and information
 ~  regarding copyright ownership.
 -->
<project name="jasm" default="main" basedir=".">

  <property name="main.src.java" location="src/main/java"/>
  <property name="test.src.java" location="src/test/java"/>

  <property name="junit.jar" location="lib/junit-4.4.jar"/>
  <property name="cli.jar" location="lib/cli-1.0.jar"/>

  <property name="generated.dir" location="generated"/>
  <property name="generated.java" location="${generated.dir}/java"/>

  <property name="output.dir" location="target"/>
  <property name="output.main.classes" location="${output.dir}/main-classes"/>
  <property name="output.test.classes" location="${output.dir}/test-classes"/>
  <property name="output.example.classes" location="${output.dir}/example-classes"/>
  <property name="output.unit.test.reports" location="${output.dir}/test/unit/reports"/>
  <property name="output.jar" location="${output.dir}/jasm.jar"/>
  <property name="output.javadocs" location="${output.dir}/javadocs"/>

  <target name="clobber" depends="clean" description="Remove all generated artifacts.">
    <echo>It's clobbering time!</echo>
    <delete dir="${generated.dir}"/>
  </target>

  <target name="clean" description="Clean the output directory">
    <delete dir="${output.dir}"/>
  </target>

  <macrodef name="gen-asm">
    <attribute name="isa"/>
    <sequential>
      <delete dir="${generated.java}/jasm/@{isa}/as"/>
      <mkdir dir="${generated.java}/jasm/@{isa}/as"/>
      <java classname="jasm.tools.gen.as.Main" classpath="${output.main.classes}:${cli.jar}" failonerror="true">
        <arg line="-d ${generated.java} --isa @{isa}"/>
      </java>
    </sequential>
  </macrodef>

  <target name="compile-generators">
    <mkdir dir="${output.main.classes}"/>
    <javac srcdir="${main.src.java}"
           destdir="${output.main.classes}"
           classpath="${cli.jar}"
           debug="true"
           deprecation="true"
           optimize="false"
           source="1.5">
      <compilerarg value="-Xlint:unchecked"/>
      <include name="jasm/tools/**"/>
      <exclude name="jasm/tools/test/**"/>
      <exclude name="jasm/tools/**/correctness/**"/>
      <exclude name="jasm/tools/**/performance/**"/>
    </javac>
  </target>

  <target name="check-generated">
    <!-- Check by looking to see if last file was generated -->
    <available property="assemblers.generated"
               file="${generated.java}/jasm/sparc/as/SPARCLabelAssembler.java"/>
  </target>

  <target name="generate-assemblers"
          description="Generate the assemblers"
          depends="check-generated, compile-generators"
          unless="assemblers.generated">
    <gen-asm isa="amd64"/>
    <gen-asm isa="ia32"/>
    <gen-asm isa="ppc"/>
    <gen-asm isa="sparc"/>
  </target>

  <target name="compile" description="Compile the code" depends="generate-assemblers">
    <mkdir dir="${output.main.classes}"/>
    <javac srcdir="${generated.java}:${main.src.java}"
           destdir="${output.main.classes}"
           classpath="${cli.jar}"
           debug="true"
           deprecation="true"
           optimize="false"
           source="1.5">
      <compilerarg value="-Xlint:unchecked"/>
    </javac>
  </target>

  <target name="compile-tests" depends="compile" description="Compile the code">
    <mkdir dir="${output.test.classes}"/>
    <javac srcdir="${test.src.java}"
           destdir="${output.test.classes}"
           classpath="${junit.jar}:${output.main.classes}"
           debug="true"
           deprecation="true"
           optimize="false"
           source="1.5">
      <compilerarg value="-Xlint:unchecked"/>
    </javac>
  </target>

  <target name="compile-examples" depends="compile">
    <mkdir dir="${output.example.classes}"/>
    <javac srcdir="examples/answer/java"
           destdir="${output.example.classes}"
           classpath="${output.main.classes}"
           debug="true"
           deprecation="true"
           optimize="false"
           source="1.5">
      <compilerarg value="-Xlint:unchecked"/>
    </javac>
  </target>

  <target name="unit-tests" depends="compile-tests" description="Run the test cases" unless="skip.tests">
    <mkdir dir="${output.unit.test.reports}"/>
    <junit printSummary="yes" errorproperty="tests.failed" failureproperty="tests.failed" fork="true" dir=".">
      <sysproperty key="basedir" value="."/>
      <formatter type="xml"/>
      <formatter type="plain" usefile="false"/>
      <classpath>
        <pathelement location="${output.main.classes}"/>
        <pathelement location="${output.test.classes}"/>
      </classpath>
      <batchtest todir="${output.unit.test.reports}">
        <fileset dir="${test.src.java}">
          <exclude name="**/SpeedTest.java"/>
          <include name="**/*Test.java"/>
        </fileset>
      </batchtest>
    </junit>
    <fail if="tests.failed" message="Tests failed."/>
  </target>

  <target name="package" depends="unit-tests, compile-examples, compile" description="Package the code" unless="skip.tests">
    <jar jarfile="${output.jar}" basedir="${output.main.classes}"/>
  </target>

  <target name="main" depends="package, compile-tests" description="Compile, package and test the code"/>

  <target name="javadoc">
    <mkdir dir="${output.javadocs}"/>
    <javadoc access="protected"
             author="false"
             destdir="${output.javadocs}"
             nodeprecated="false"
             nodeprecatedlist="false"
             noindex="false"
             nonavbar="false"
             notree="false"
             source="1.5"
             sourcepath="${main.src.java}"
             splitindex="true"
             use="true"
             version="true">
    </javadoc>
  </target>

</project>
